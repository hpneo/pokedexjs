(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (global){
/** @jsx React.DOM */

var React = require('react'),
    PokemonList = require('./pokemon-list'),
    PokemonDetail = require('./pokemon-detail'),
    PokedexApp;

PokedexApp = React.createClass({displayName: "PokedexApp",
  nameToIndex: function(pokemonName) {
    pokemonName = pokemonName || this.props.pokemons[0].Name;

    for (var index = 0; index < this.props.pokemons.length; index++) {
      var pokemon = this.props.pokemons[index];

      if (pokemon.Name.toLowerCase() === pokemonName.toLowerCase()) {
        break;
      }
    }

    return index;
  },
  getInitialState: function() {
    return { index: this.nameToIndex(this.props.initialPokemon) };
  },
  componentDidMount: function() {
    window.addEventListener('popstate', function(popStateEvent) {
      var pokemonName = popStateEvent.state.pokemonName;

      this.setState({ index: this.nameToIndex(pokemonName) });
    }.bind(this));
  },
  onItemClick: function(item, index) {
    this.setState({ index: index });

    if ('history' in global) {
      global.history.pushState({ pokemonName: item.Name.toLowerCase() }, item.Name, '/' + item.Name.toLowerCase());
    }
  },
  render: function() {
    var index = this.state.index;

    return (
      React.createElement("main", null, 
        React.createElement(PokemonList, {pokemons: this.props.pokemons, onItemClick: this.onItemClick}), 
        React.createElement(PokemonDetail, {pokemon: this.props.pokemons[index], index: index})
      )
    );
  }
});

module.exports = PokedexApp;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./pokemon-detail":2,"./pokemon-list":3,"react":162}],2:[function(require,module,exports){
/** @jsx React.DOM */

var React = require('react'),
    PokemonDetail;

PokemonDetail = React.createClass({displayName: "PokemonDetail",
  padString: function(number) {
    var string = number.toString(),
        padding = '000';

    return padding.substring(0, padding.length - string.length) + string;
  },
  render: function() {
    return (
      React.createElement("section", {id: "pokemon-detail"}, 
        React.createElement("h2", null, this.props.pokemon.Name), 
        React.createElement("aside", {id: "pokemon-picture"}, 
          React.createElement("img", {src: '/images/big/' + this.padString(this.props.index + 1) + '.png'}), 

          React.createElement("dl", null, 
            React.createElement("dt", null, "Type 1:"), 
            React.createElement("dd", null, this.props.pokemon.Type1), 
            React.createElement("dt", null, "Type 2:"), 
            React.createElement("dd", null, this.props.pokemon.Type2)
          ), 

          React.createElement("dl", null, 
            React.createElement("dt", null, "Height:"), 
            React.createElement("dd", null, this.props.pokemon.Height, " m"), 
            React.createElement("dt", null, "Weight:"), 
            React.createElement("dd", null, this.props.pokemon.Weight, " kg")
          )
        ), 
        React.createElement("aside", {id: "pokemon-info"}, 
          React.createElement("p", null, this.props.pokemon.Pokedex)
        )
      )
    );
  }
});

module.exports = PokemonDetail;

},{"react":162}],3:[function(require,module,exports){
/** @jsx React.DOM */

var React = require('react'),
    PokemonList;

function padString(number) {
  var string = number.toString(),
      padding = '000';

  return padding.substring(0, padding.length - string.length) + string;
}

PokemonList = React.createClass({displayName: "PokemonList",
  renderListItem: function(item, index) {
    var key = item.InternalName.toLowerCase(),
        styles = { backgroundImage: 'url("/images/icons/icon' + padString(index + 1) + '.png")' };

    return React.createElement("li", {key: key, style: styles, onClick: this.props.onItemClick.bind(null, item, index)}, item.Name);
  },
  render: function() {
    return (
      React.createElement("aside", {id: "pokemon-list"}, 
        React.createElement("ul", null, 
          this.props.pokemons.map(this.renderListItem)
        )
      )
    );
  }
});

module.exports = PokemonList;

},{"react":162}],4:[function(require,module,exports){
module.exports = [{"Name":"Bulbasaur","InternalName":"BULBASAUR","Type1":"GRASS","Type2":"POISON","HiddenAbility":"CHLOROPHYLL","Moves":"1,TACKLE,3,GROWL,7,LEECHSEED,9,VINEWHIP,13,POISONPOWDER,13,SLEEPPOWDER,15,TAKEDOWN,19,RAZORLEAF,21,SWEETSCENT,25,GROWTH,27,DOUBLEEDGE,31,WORRYSEED,33,SYNTHESIS,37,SEEDBOMB","Height":"0.7","Weight":"6.9","Habitat":"Grassland","Kind":"Seed","Pokedex":"Bulbasaur can be seen napping in bright sunlight. There is a seed on its back. By soaking up the sun's rays, the seed grows progressively larger.","Evolutions":"IVYSAUR,Level,16"},{"Name":"Ivysaur","InternalName":"IVYSAUR","Type1":"GRASS","Type2":"POISON","HiddenAbility":"CHLOROPHYLL","Moves":"1,TACKLE,1,GROWL,1,LEECHSEED,3,GROWL,7,LEECHSEED,9,VINEWHIP,13,POISONPOWDER,13,SLEEPPOWDER,15,TAKEDOWN,20,RAZORLEAF,23,SWEETSCENT,28,GROWTH,31,DOUBLEEDGE,36,WORRYSEED,39,SYNTHESIS,44,SOLARBEAM","Height":"1.0","Weight":"13.0","Habitat":"Grassland","Kind":"Seed","Pokedex":"To support its bulb, Ivysaur's legs grow sturdy. If it spends more time lying in the sunlight, the bud will soon bloom into a large flower.","Evolutions":"VENUSAUR,Level,32"},{"Name":"Venusaur","InternalName":"VENUSAUR","Type1":"GRASS","Type2":"POISON","HiddenAbility":"CHLOROPHYLL","Moves":"1,TACKLE,1,GROWL,1,LEECHSEED,1,VINEWHIP,3,GROWL,7,LEECHSEED,9,VINEWHIP,13,POISONPOWDER,13,SLEEPPOWDER,15,TAKEDOWN,20,RAZORLEAF,23,SWEETSCENT,28,GROWTH,31,DOUBLEEDGE,32,PETALDANCE,39,WORRYSEED,45,SYNTHESIS,50,PETALBLIZZARD,53,SOLARBEAM","Height":"2.0","Weight":"100.0","Habitat":"Grassland","Kind":"Seed","Pokedex":"Venusaur's flower is said to take on vivid colors if it gets plenty of nutrition and sunlight. The flower's aroma soothes the emotions of people.","Evolutions":null},{"Name":"Charmander","InternalName":"CHARMANDER","Type1":"FIRE","HiddenAbility":"SOLARPOWER","Moves":"1,SCRATCH,1,GROWL,7,EMBER,10,SMOKESCREEN,16,DRAGONRAGE,19,SCARYFACE,25,FIREFANG,28,FLAMEBURST,34,SLASH,37,FLAMETHROWER,43,FIRESPIN,46,INFERNO","Height":"0.6","Weight":"8.5","Habitat":"Mountain","Kind":"Lizard","Pokedex":"The flame that burns at the tip of its tail is an indication of its emotions. The flame wavers when Charmander is happy, and blazes when it is enraged.","Evolutions":"CHARMELEON,Level,16"},{"Name":"Charmeleon","InternalName":"CHARMELEON","Type1":"FIRE","HiddenAbility":"SOLARPOWER","Moves":"1,SCRATCH,1,GROWL,1,EMBER,7,EMBER,10,SMOKESCREEN,17,DRAGONRAGE,21,SCARYFACE,28,FIREFANG,32,FLAMEBURST,39,SLASH,43,FLAMETHROWER,50,FIRESPIN,54,INFERNO","Height":"1.1","Weight":"19.0","Habitat":"Mountain","Kind":"Flame","Pokedex":"Without pity, its sharp claws destroy foes. If it encounters a strong enemy, it becomes agitated, and the flame on its tail flares with a bluish white color.","Evolutions":"CHARIZARD,Level,36"},{"Name":"Charizard","InternalName":"CHARIZARD","Type1":"FIRE","Type2":"FLYING","HiddenAbility":"SOLARPOWER","Moves":"1,FLAREBLITZ,1,HEATWAVE,1,DRAGONCLAW,1,SHADOWCLAW,1,AIRSLASH,1,SCRATCH,1,GROWL,1,EMBER,1,SMOKESCREEN,7,EMBER,10,SMOKESCREEN,17,DRAGONRAGE,21,SCARYFACE,28,FIREFANG,32,FLAMEBURST,36,WINGATTACK,41,SLASH,47,FLAMETHROWER,56,FIRESPIN,62,INFERNO,71,HEATWAVE,77,FLAREBLITZ","Height":"1.7","Weight":"90.5","Habitat":"Mountain","Kind":"Flame","Pokedex":"A Charizard flies about in search of strong opponents. It breathes intense flames that can melt any material. However, it will never torch a weaker foe.","Evolutions":null},{"Name":"Squirtle","InternalName":"SQUIRTLE","Type1":"WATER","HiddenAbility":"RAINDISH","Moves":"1,TACKLE,4,TAILWHIP,7,WATERGUN,10,WITHDRAW,13,BUBBLE,16,BITE,19,RAPIDSPIN,22,PROTECT,25,WATERPULSE,28,AQUATAIL,31,SKULLBASH,34,IRONDEFENSE,37,RAINDANCE,40,HYDROPUMP","Height":"0.5","Weight":"9.0","Habitat":"WatersEdge","Kind":"Tiny Turtle","Pokedex":"Its shell is not just for protection. Its rounded shape and the grooves on its surface minimize resistance in water, enabling Squirtle to swim at high speeds.","Evolutions":"WARTORTLE,Level,16"},{"Name":"Wartortle","InternalName":"WARTORTLE","Type1":"WATER","HiddenAbility":"RAINDISH","Moves":"1,TACKLE,1,TAILWHIP,1,WATERGUN,4,TAILWHIP,7,WATERGUN,10,WITHDRAW,13,BUBBLE,16,BITE,20,RAPIDSPIN,24,PROTECT,28,WATERPULSE,32,AQUATAIL,36,SKULLBASH,40,IRONDEFENSE,44,RAINDANCE,48,HYDROPUMP","Height":"1.0","Weight":"22.5","Habitat":"WatersEdge","Kind":"Turtle","Pokedex":"Its large tail is covered with rich, thick fur that deepens in color with age. The scratches on its shell are evidence of this PokÃ©mon's toughness in battle.","Evolutions":"BLASTOISE,Level,36"},{"Name":"Blastoise","InternalName":"BLASTOISE","Type1":"WATER","HiddenAbility":"RAINDISH","Moves":"1,FLASHCANNON,1,TACKLE,1,TAILWHIP,1,WATERGUN,1,WITHDRAW,4,TAILWHIP,7,WATERGUN,10,WITHDRAW,13,BUBBLE,16,BITE,20,RAPIDSPIN,24,PROTECT,28,WATERPULSE,32,AQUATAIL,39,SKULLBASH,46,IRONDEFENSE,53,RAINDANCE,60,HYDROPUMP","Height":"1.6","Weight":"85.5","Habitat":"WatersEdge","Kind":"Shellfish","Pokedex":"The waterspouts that protrude from its shell are highly accurate. Their bullets of water can precisely nail tin cans from a distance of over 160 feet.","Evolutions":null},{"Name":"Caterpie","InternalName":"CATERPIE","Type1":"BUG","HiddenAbility":"RUNAWAY","Moves":"1,TACKLE,1,STRINGSHOT,15,BUGBITE","Height":"0.3","Weight":"2.9","Habitat":"Forest","Kind":"Worm","Pokedex":"Its voracious appetite compels it to devour leaves bigger than itself without hesitation. It releases a terribly strong odor from its antennae.","Evolutions":"METAPOD,Level,7"},{"Name":"Metapod","InternalName":"METAPOD","Type1":"BUG","Moves":"1,HARDEN,7,HARDEN","Height":"0.7","Weight":"9.9","Habitat":"Forest","Kind":"Cocoon","Pokedex":"Its shell is as hard as an iron slab. A Metapod does not move very much because it is preparing its soft innards for evolution inside the shell.","Evolutions":"BUTTERFREE,Level,10"},{"Name":"Butterfree","InternalName":"BUTTERFREE","Type1":"BUG","Type2":"FLYING","HiddenAbility":"TINTEDLENS","Moves":"1,CONFUSION,10,CONFUSION,12,POISONPOWDER,12,STUNSPORE,12,SLEEPPOWDER,16,GUST,18,SUPERSONIC,22,WHIRLWIND,24,PSYBEAM,28,SILVERWIND,30,TAILWIND,34,RAGEPOWDER,36,SAFEGUARD,40,CAPTIVATE,42,BUGBUZZ,46,QUIVERDANCE","Height":"1.1","Weight":"32.0","Habitat":"Forest","Kind":"Butterfly","Pokedex":"It has a superior ability to search for delicious honey from flowers. It can seek, extract, and carry honey from flowers blooming over six miles away.","WildItemUncommon":"SILVERPOWDER","Evolutions":null},{"Name":"Weedle","InternalName":"WEEDLE","Type1":"BUG","Type2":"POISON","HiddenAbility":"RUNAWAY","Moves":"1,POISONSTING,1,STRINGSHOT,15,BUGBITE","Height":"0.3","Weight":"3.2","Habitat":"Forest","Kind":"Hairy Bug","Pokedex":"A Weedle has an extremely acute sense of smell. It distinguishes its favorite kinds of leaves from those it dislikes by sniffing with its big red proboscis (nose).","Evolutions":"KAKUNA,Level,7"},{"Name":"Kakuna","InternalName":"KAKUNA","Type1":"BUG","Type2":"POISON","Moves":"1,HARDEN,7,HARDEN","Height":"0.6","Weight":"10.0","Habitat":"Forest","Kind":"Cocoon","Pokedex":"It remains virtually immobile while it clings to a tree. However, on the inside, it busily prepares for evolution. This is evident from how hot its shell becomes.","Evolutions":"BEEDRILL,Level,10"},{"Name":"Beedrill","InternalName":"BEEDRILL","Type1":"BUG","Type2":"POISON","HiddenAbility":"SNIPER","Moves":"1,FURYATTACK,10,FURYATTACK,13,FOCUSENERGY,16,TWINEEDLE,19,RAGE,22,PURSUIT,25,TOXICSPIKES,28,PINMISSILE,31,AGILITY,34,ASSURANCE,37,POISONJAB,40,ENDEAVOR,45,FELLSTINGER","Height":"1.0","Weight":"29.5","Habitat":"Forest","Kind":"Poison Bee","Pokedex":"A Beedrill is extremely territorial. For safety reasons, no one should ever approach its nest. If angered, they will attack in a swarm.","WildItemUncommon":"POISONBARB","Evolutions":null},{"Name":"Pidgey","InternalName":"PIDGEY","Type1":"NORMAL","Type2":"FLYING","HiddenAbility":"BIGPECKS","Moves":"1,TACKLE,5,SANDATTACK,9,GUST,13,QUICKATTACK,17,WHIRLWIND,21,TWISTER,25,FEATHERDANCE,29,AGILITY,33,WINGATTACK,37,ROOST,41,TAILWIND,45,MIRRORMOVE,49,AIRSLASH,53,HURRICANE","Height":"0.3","Weight":"1.8","Habitat":"Forest","Kind":"Tiny Bird","Pokedex":"It has an extremely sharp sense of direction. It can unerringly return home to its nest, however far it may be removed from its familiar surroundings.","Evolutions":"PIDGEOTTO,Level,18"},{"Name":"Pidgeotto","InternalName":"PIDGEOTTO","Type1":"NORMAL","Type2":"FLYING","HiddenAbility":"BIGPECKS","Moves":"1,TACKLE,1,SANDATTACK,1,GUST,5,SANDATTACK,9,GUST,13,QUICKATTACK,17,WHIRLWIND,22,TWISTER,27,FEATHERDANCE,32,AGILITY,37,WINGATTACK,42,ROOST,47,TAILWIND,52,MIRRORMOVE,57,AIRSLASH,62,HURRICANE","Height":"1.1","Weight":"30.0","Habitat":"Forest","Kind":"Bird","Pokedex":"This PokÃ©mon flies around, patrolling its large territory. If its living space is violated, it shows no mercy in thoroughly punishing the foe with its sharp claws.","Evolutions":"PIDGEOT,Level,36"},{"Name":"Pidgeot","InternalName":"PIDGEOT","Type1":"NORMAL","Type2":"FLYING","HiddenAbility":"BIGPECKS","Moves":"1,HURRICANE,1,TACKLE,1,SANDATTACK,1,GUST,1,QUICKATTACK,5,SANDATTACK,9,GUST,13,QUICKATTACK,17,WHIRLWIND,22,TWISTER,27,FEATHERDANCE,32,AGILITY,38,WINGATTACK,44,ROOST,50,TAILWIND,56,MIRRORMOVE,62,AIRSLASH,68,HURRICANE","Height":"1.5","Weight":"39.5","Habitat":"Forest","Kind":"Bird","Pokedex":"This PokÃ©mon has gorgeous, glossy feathers. Many trainers are so captivated by the beautiful feathers on its head that they choose Pidgeot as their PokÃ©mon.","Evolutions":null},{"Name":"Rattata","InternalName":"RATTATA","Type1":"NORMAL","HiddenAbility":"HUSTLE","Moves":"1,TACKLE,1,TAILWHIP,4,QUICKATTACK,7,FOCUSENERGY,10,BITE,13,PURSUIT,16,HYPERFANG,19,SUCKERPUNCH,22,CRUNCH,25,ASSURANCE,28,SUPERFANG,31,DOUBLEEDGE,34,ENDEAVOR","Height":"0.3","Weight":"3.5","Habitat":"Grassland","Kind":"Mouse","Pokedex":"A Rattata is cautious in the extreme. Even while it is asleep, it constantly moves its ears and listens for danger. It will make its nest anywhere.","WildItemUncommon":"CHILANBERRY","Evolutions":"RATICATE,Level,20"},{"Name":"Raticate","InternalName":"RATICATE","Type1":"NORMAL","HiddenAbility":"HUSTLE","Moves":"1,SWORDSDANCE,1,TACKLE,1,TAILWHIP,1,QUICKATTACK,1,FOCUSENERGY,4,QUICKATTACK,7,FOCUSENERGY,10,BITE,13,PURSUIT,16,HYPERFANG,19,SUCKERPUNCH,20,SCARYFACE,24,CRUNCH,29,ASSURANCE,34,SUPERFANG,39,DOUBLEEDGE,44,ENDEAVOR","Height":"0.7","Weight":"18.5","Habitat":"Grassland","Kind":"Mouse","Pokedex":"A Raticate's sturdy fangs grow steadily. To keep them ground down, it gnaws on rocks and logs. It may even chew on the walls of houses.","WildItemUncommon":"CHILANBERRY","Evolutions":null},{"Name":"Spearow","InternalName":"SPEAROW","Type1":"NORMAL","Type2":"FLYING","HiddenAbility":"SNIPER","Moves":"1,PECK,1,GROWL,5,LEER,9,FURYATTACK,13,PURSUIT,17,AERIALACE,21,MIRRORMOVE,25,AGILITY,29,ASSURANCE,33,ROOST,37,DRILLPECK","Height":"0.3","Weight":"2.0","Habitat":"RoughTerrain","Kind":"Tiny Bird","Pokedex":"Its loud cry can be heard over half a mile away. If its high, keening cry is heard echoing all around, it is a sign that they are warning each other of danger.","Evolutions":"FEAROW,Level,20"},{"Name":"Fearow","InternalName":"FEAROW","Type1":"NORMAL","Type2":"FLYING","HiddenAbility":"SNIPER","Moves":"1,DRILLRUN,1,PLUCK,1,PECK,1,GROWL,1,LEER,1,FURYATTACK,5,LEER,9,FURYATTACK,13,PURSUIT,17,AERIALACE,23,MIRRORMOVE,29,AGILITY,35,ASSURANCE,41,ROOST,47,DRILLPECK,53,DRILLRUN","Height":"1.2","Weight":"38.0","Habitat":"RoughTerrain","Kind":"Beak","Pokedex":"Its long neck and elongated beak are ideal for catching prey in soil or water. It deftly moves this extended and skinny beak to pluck prey.","WildItemUncommon":"SHARPBEAK","Evolutions":null},{"Name":"Ekans","InternalName":"EKANS","Type1":"POISON","HiddenAbility":"UNNERVE","Moves":"1,WRAP,1,LEER,4,POISONSTING,9,BITE,12,GLARE,17,SCREECH,20,ACID,25,STOCKPILE,25,SWALLOW,25,SPITUP,28,ACIDSPRAY,33,MUDBOMB,36,GASTROACID,38,BELCH,41,HAZE,44,COIL,49,GUNKSHOT","Height":"2.0","Weight":"6.9","Habitat":"Grassland","Kind":"Snake","Pokedex":"An Ekans curls itself up in a spiral while it rests. This position allows it to quickly respond to an enemy from any direction with a threat from its upraised head.","Evolutions":"ARBOK,Level,22"},{"Name":"Arbok","InternalName":"ARBOK","Type1":"POISON","HiddenAbility":"UNNERVE","Moves":"1,ICEFANG,1,THUNDERFANG,1,FIREFANG,1,WRAP,1,LEER,1,POISONSTING,1,BITE,4,POISONSTING,9,BITE,12,GLARE,17,SCREECH,20,ACID,22,CRUNCH,27,STOCKPILE,27,SWALLOW,27,SPITUP,32,ACIDSPRAY,39,MUDBOMB,44,GASTROACID,48,BELCH,51,HAZE,56,COIL,63,GUNKSHOT","Height":"3.5","Weight":"65.0","Habitat":"Grassland","Kind":"Cobra","Pokedex":"This PokÃ©mon has a terrifically strong constricting power. It can even flatten steel oil drums. Once it wraps its body around its foe, escaping is impossible.","Evolutions":null},{"Name":"Pikachu","InternalName":"PIKACHU","Type1":"ELECTRIC","HiddenAbility":"LIGHTNINGROD","Moves":"1,TAILWHIP,1,THUNDERSHOCK,5,GROWL,7,PLAYNICE,10,QUICKATTACK,13,ELECTROBALL,18,THUNDERWAVE,21,FEINT,23,DOUBLETEAM,26,SPARK,29,NUZZLE,34,DISCHARGE,37,SLAM,42,THUNDERBOLT,45,AGILITY,50,WILDCHARGE,53,LIGHTSCREEN,58,THUNDER","Height":"0.4","Weight":"6.0","Habitat":"Forest","Kind":"Mouse","Pokedex":"It stores electricity in the electric sacs on its cheeks. When it releases pent-up energy in a burst, the electric power is equal to a lightning bolt.","WildItemCommon":"ORANBERRY","WildItemRare":"LIGHTBALL","Evolutions":"RAICHU,Item,THUNDERSTONE"},{"Name":"Raichu","InternalName":"RAICHU","Type1":"ELECTRIC","HiddenAbility":"LIGHTNINGROD","Moves":"1,THUNDERSHOCK,1,TAILWHIP,1,QUICKATTACK,1,THUNDERBOLT","Height":"0.8","Weight":"30.0","Habitat":"Forest","Kind":"Mouse","Pokedex":"If it stores too much electricity, its behavior turns aggressive. To avoid this, it occasionally discharges excess energy and calms itself down.","WildItemCommon":"ORANBERRY","Evolutions":null},{"Name":"Sandshrew","InternalName":"SANDSHREW","Type1":"GROUND","HiddenAbility":"SANDRUSH","Moves":"1,SCRATCH,1,DEFENSECURL,3,SANDATTACK,5,POISONSTING,7,ROLLOUT,9,RAPIDSPIN,11,FURYCUTTER,14,MAGNITUDE,17,SWIFT,20,FURYSWIPES,23,SANDTOMB,26,SLASH,30,DIG,34,GYROBALL,38,SWORDSDANCE,42,SANDSTORM,46,EARTHQUAKE","Height":"0.6","Weight":"12.0","Habitat":"RoughTerrain","Kind":"Mouse","Pokedex":"When it curls up in a ball, it can make any attack bounce off harmlessly. Its hide has turned tough and solid as a result of living in the desert.","WildItemUncommon":"QUICKCLAW","Evolutions":"SANDSLASH,Level,22"},{"Name":"Sandslash","InternalName":"SANDSLASH","Type1":"GROUND","HiddenAbility":"SANDRUSH","Moves":"1,SCRATCH,1,DEFENSECURL,1,SANDATTACK,1,POISONSTING,3,SANDATTACK,5,POISONSTING,7,ROLLOUT,9,RAPIDSPIN,11,FURYCUTTER,14,MAGNITUDE,17,SWIFT,20,FURYSWIPES,22,CRUSHCLAW,24,SANDTOMB,28,SLASH,33,DIG,38,GYROBALL,43,SWORDSDANCE,48,SANDSTORM,53,EARTHQUAKE","Height":"1.0","Weight":"29.5","Habitat":"RoughTerrain","Kind":"Mouse","Pokedex":"It curls up in a ball to protect itself from enemy attacks. It also curls up to prevent heatstroke during the daytime when temperatures rise sharply.","WildItemUncommon":"QUICKCLAW","Evolutions":null},{"Name":"Nidoran","InternalName":"NIDORANfE","Type1":"POISON","HiddenAbility":"HUSTLE","Moves":"1,GROWL,1,SCRATCH,7,TAILWHIP,9,DOUBLEKICK,13,POISONSTING,19,FURYSWIPES,21,BITE,25,HELPINGHAND,31,TOXICSPIKES,33,FLATTER,37,CRUNCH,43,CAPTIVATE,45,POISONFANG","Height":"0.4","Weight":"7.0","Habitat":"Grassland","Kind":"Poison Pin","Pokedex":"Its highly toxic barbs are thought to have developed as protection for this small-bodied PokÃ©mon. When enraged, it releases a horrible toxin from its horn.","Evolutions":"NIDORINA,Level,16"},{"Name":"Nidorina","InternalName":"NIDORINA","Type1":"POISON","HiddenAbility":"HUSTLE","Moves":"1,GROWL,1,SCRATCH,7,TAILWHIP,9,DOUBLEKICK,13,POISONSTING,20,FURYSWIPES,23,BITE,28,HELPINGHAND,35,TOXICSPIKES,38,FLATTER,43,CRUNCH,50,CAPTIVATE,58,POISONFANG","Height":"0.8","Weight":"20.0","Habitat":"Grassland","Kind":"Poison Pin","Pokedex":"When it is with its friends or family, its barbs are tucked away to prevent injury. It appears to become nervous if separated from the others.","Evolutions":"NIDOQUEEN,Item,MOONSTONE"},{"Name":"Nidoqueen","InternalName":"NIDOQUEEN","Type1":"POISON","Type2":"GROUND","HiddenAbility":"SHEERFORCE","Moves":"1,SUPERPOWER,1,SCRATCH,1,TAILWHIP,1,DOUBLEKICK,1,POISONSTING,23,CHIPAWAY,35,BODYSLAM,43,EARTHPOWER,58,SUPERPOWER","Height":"1.3","Weight":"60.0","Habitat":"Grassland","Kind":"Drill","Pokedex":"It is adept at sending foes flying with harsh tackles using its tough, scaly body. This PokÃ©mon is at its strongest when it is defending its young.","Evolutions":null},{"Name":"Nidoran","InternalName":"NIDORANmA","Type1":"POISON","HiddenAbility":"HUSTLE","Moves":"1,LEER,1,PECK,7,FOCUSENERGY,9,DOUBLEKICK,13,POISONSTING,19,FURYATTACK,21,HORNATTACK,25,HELPINGHAND,31,TOXICSPIKES,33,FLATTER,37,POISONJAB,43,CAPTIVATE,45,HORNDRILL","Height":"0.5","Weight":"9.0","Habitat":"Grassland","Kind":"Poison Pin","Pokedex":"The male Nidoran has developed muscles that freely move its ears in any direction. Even the slightest sound does not escape this PokÃ©mon's notice.","Evolutions":"NIDORINO,Level,16"},{"Name":"Nidorino","InternalName":"NIDORINO","Type1":"POISON","HiddenAbility":"HUSTLE","Moves":"1,LEER,1,PECK,7,FOCUSENERGY,9,DOUBLEKICK,13,POISONSTING,20,FURYATTACK,23,HORNATTACK,28,HELPINGHAND,35,TOXICSPIKES,38,FLATTER,43,POISONJAB,50,CAPTIVATE,58,HORNDRILL","Height":"0.9","Weight":"19.5","Habitat":"Grassland","Kind":"Poison Pin","Pokedex":"Its horn is harder than a diamond. If it senses a hostile presence, all the barbs on its back bristle up at once, and it challenges the foe with all its might.","Evolutions":"NIDOKING,Item,MOONSTONE"},{"Name":"Nidoking","InternalName":"NIDOKING","Type1":"POISON","Type2":"GROUND","HiddenAbility":"SHEERFORCE","Moves":"1,MEGAHORN,1,PECK,1,FOCUSENERGY,1,DOUBLEKICK,1,POISONSTING,23,CHIPAWAY,35,THRASH,43,EARTHPOWER,58,MEGAHORN","Height":"1.4","Weight":"62.0","Habitat":"Grassland","Kind":"Drill","Pokedex":"A Nidoking's thick tail packs enormously destructive power capable of toppling a metal transmission tower. Once it goes on a rampage, there is no stopping it.","Evolutions":null},{"Name":"Clefairy","InternalName":"CLEFAIRY","Type1":"FAIRY","HiddenAbility":"FRIENDGUARD","Moves":"1,AFTERYOU,1,HEALINGWISH,1,DISARMINGVOICE,1,POUND,1,GROWL,1,ENCORE,7,SING,10,DOUBLESLAP,13,DEFENSECURL,16,FOLLOWME,19,BESTOW,22,WAKEUPSLAP,25,MINIMIZE,28,STOREDPOWER,31,METRONOME,34,COSMICPOWER,37,LUCKYCHANT,40,BODYSLAM,43,MOONLIGHT,46,MOONBLAST,49,GRAVITY,50,METEORMASH,55,HEALINGWISH,58,AFTERYOU","Height":"0.6","Weight":"7.5","Habitat":"Mountain","Kind":"Fairy","Pokedex":"On every night of a full moon, they come out to play. When dawn arrives, the tired Clefairy go to sleep nestled up against each other in deep and quiet mountains.","WildItemCommon":"LEPPABERRY","WildItemUncommon":"MOONSTONE","WildItemRare":"COMETSHARD","Evolutions":"CLEFABLE,Item,MOONSTONE"},{"Name":"Clefable","InternalName":"CLEFABLE","Type1":"FAIRY","HiddenAbility":"UNAWARE","Moves":"1,DISARMINGVOICE,1,SING,1,DOUBLESLAP,1,MINIMIZE,1,METRONOME","Height":"1.3","Weight":"40.0","Habitat":"Mountain","Kind":"Fairy","Pokedex":"A Clefable uses its wings to skip lightly as if it were flying. Its bouncy step lets it even walk on water. On quiet, moonlit nights, it strolls on lakes.","WildItemCommon":"LEPPABERRY","WildItemUncommon":"MOONSTONE","WildItemRare":"COMETSHARD","Evolutions":null},{"Name":"Vulpix","InternalName":"VULPIX","Type1":"FIRE","HiddenAbility":"DROUGHT","Moves":"1,EMBER,4,TAILWHIP,7,ROAR,9,BABYDOLLEYES,10,QUICKATTACK,12,CONFUSERAY,15,FIRESPIN,18,PAYBACK,20,WILLOWISP,23,FEINTATTACK,26,HEX,28,FLAMEBURST,31,EXTRASENSORY,34,SAFEGUARD,36,FLAMETHROWER,39,IMPRISON,42,FIREBLAST,44,GRUDGE,47,CAPTIVATE,50,INFERNO","Height":"0.6","Weight":"9.9","Habitat":"Grassland","Kind":"Fox","Pokedex":"It can freely control fire, making fiery orbs fly like will-o'-the-wisps. Just before evolution, its six tails grow hot as if on fire.","WildItemCommon":"RAWSTBERRY","WildItemUncommon":"RAWSTBERRY","WildItemRare":"RAWSTBERRY","Evolutions":"NINETALES,Item,FIRESTONE"},{"Name":"Ninetales","InternalName":"NINETALES","Type1":"FIRE","HiddenAbility":"DROUGHT","Moves":"1,IMPRISON,1,NASTYPLOT,1,FLAMETHROWER,1,QUICKATTACK,1,CONFUSERAY,1,SAFEGUARD","Height":"1.1","Weight":"19.9","Habitat":"Grassland","Kind":"Fox","Pokedex":"It has long been said that each of the nine tails embody an enchanted power. A long-lived Ninetales will have fur that shines like gold.","WildItemCommon":"RAWSTBERRY","WildItemUncommon":"RAWSTBERRY","WildItemRare":"RAWSTBERRY","Evolutions":null},{"Name":"Jigglypuff","InternalName":"JIGGLYPUFF","Type1":"NORMAL","Type2":"FAIRY","HiddenAbility":"FRIENDGUARD","Moves":"1,SING,3,DEFENSECURL,5,POUND,8,PLAYNICE,11,DISARMINGVOICE,15,DISABLE,18,DOUBLESLAP,21,ROLLOUT,24,ROUND,28,WAKEUPSLAP,32,REST,35,BODYSLAM,37,MIMIC,40,GYROBALL,44,HYPERVOICE,49,DOUBLEEDGE","Height":"0.5","Weight":"5.5","Habitat":"Grassland","Kind":"Balloon","Pokedex":"Nothing can avoid falling asleep hearing a Jigglypuff's song. The sound waves of its singing voice match the brain waves of someone in a deep sleep.","Evolutions":"WIGGLYTUFF,Item,MOONSTONE"},{"Name":"Wigglytuff","InternalName":"WIGGLYTUFF","Type1":"NORMAL","Type2":"FAIRY","HiddenAbility":"FRISK","Moves":"1,DOUBLEEDGE,1,PLAYROUGH,1,SING,1,DEFENSECURL,1,DISABLE,1,DOUBLESLAP","Height":"1.0","Weight":"12.0","Habitat":"Grassland","Kind":"Balloon","Pokedex":"Its fur is the ultimate in luxuriousness. Sleeping alongside a Wigglytuff is simply divine. Its body expands seemingly without end when it inhales.","Evolutions":null},{"Name":"Zubat","InternalName":"ZUBAT","Type1":"POISON","Type2":"FLYING","HiddenAbility":"INFILTRATOR","Moves":"1,LEECHLIFE,5,SUPERSONIC,7,ASTONISH,11,BITE,13,WINGATTACK,17,CONFUSERAY,19,AIRCUTTER,23,SWIFT,25,POISONFANG,29,MEANLOOK,31,ACROBATICS,35,HAZE,37,VENOSHOCK,41,AIRSLASH,43,QUICKGUARD","Height":"0.8","Weight":"7.5","Habitat":"Cave","Kind":"Bat","Pokedex":"While living in pitch-black caverns, their eyes gradually grew shut and deprived them of vision. They use ultrasonic waves to detect obstacles.","Evolutions":"GOLBAT,Level,22"},{"Name":"Golbat","InternalName":"GOLBAT","Type1":"POISON","Type2":"FLYING","HiddenAbility":"INFILTRATOR","Moves":"1,SCREECH,1,LEECHLIFE,1,SUPERSONIC,1,ASTONISH,1,BITE,5,SUPERSONIC,7,ASTONISH,11,BITE,13,WINGATTACK,17,CONFUSERAY,19,AIRCUTTER,24,SWIFT,27,POISONFANG,32,MEANLOOK,35,ACROBATICS,40,HAZE,43,VENOSHOCK,48,AIRSLASH,51,QUICKGUARD","Height":"1.6","Weight":"55.0","Habitat":"Cave","Kind":"Bat","Pokedex":"Its fangs easily puncture even thick animal hide. It loves to feast on the blood of people and PokÃ©mon. It flits about in darkness and strikes from behind.","Evolutions":"CROBAT,Happiness,"},{"Name":"Oddish","InternalName":"ODDISH","Type1":"GRASS","Type2":"POISON","HiddenAbility":"RUNAWAY","Moves":"1,ABSORB,5,SWEETSCENT,9,ACID,13,POISONPOWDER,14,STUNSPORE,15,SLEEPPOWDER,19,MEGADRAIN,23,LUCKYCHANT,27,MOONLIGHT,31,GIGADRAIN,35,TOXIC,39,NATURALGIFT,43,MOONBLAST,47,GRASSYTERRAIN,51,PETALDANCE","Height":"0.5","Weight":"5.4","Habitat":"Grassland","Kind":"Weed","Pokedex":"This PokÃ©mon grows by absorbing moonlight. During the daytime, it buries itself in the ground, leaving only its leaves exposed to avoid detection by its enemies.","Evolutions":"GLOOM,Level,21"},{"Name":"Gloom","InternalName":"GLOOM","Type1":"GRASS","Type2":"POISON","HiddenAbility":"STENCH","Moves":"1,ABSORB,1,SWEETSCENT,1,ACID,5,SWEETSCENT,9,ACID,13,POISONPOWDER,14,STUNSPORE,15,SLEEPPOWDER,19,MEGADRAIN,24,LUCKYCHANT,29,MOONLIGHT,34,GIGADRAIN,39,TOXIC,44,NATURALGIFT,49,PETALBLIZZARD,54,GRASSYTERRAIN,59,PETALDANCE","Height":"0.8","Weight":"8.6","Habitat":"Grassland","Kind":"Weed","Pokedex":"A horribly noxious honey drools from its mouth. One whiff of the honey can result in memory loss. Some fans are said to enjoy this overwhelming stink, however.","Evolutions":"VILEPLUME,Item,LEAFSTONE,BELLOSSOM,Item,SUNSTONE"},{"Name":"Vileplume","InternalName":"VILEPLUME","Type1":"GRASS","Type2":"POISON","HiddenAbility":"EFFECTSPORE","Moves":"1,MEGADRAIN,1,AROMATHERAPY,1,POISONPOWDER,1,STUNSPORE,49,PETALBLIZZARD,59,PETALDANCE,64,SOLARBEAM","Height":"1.2","Weight":"18.6","Habitat":"Grassland","Kind":"Flower","Pokedex":"In seasons when it produces more pollen, the air around a Vileplume turns yellow with the powder as it walks. The pollen is highly toxic and causes paralysis.","Evolutions":null},{"Name":"Paras","InternalName":"PARAS","Type1":"BUG","Type2":"GRASS","HiddenAbility":"DAMP","Moves":"1,SCRATCH,6,STUNSPORE,6,POISONPOWDER,11,LEECHLIFE,17,FURYCUTTER,22,SPORE,27,SLASH,33,GROWTH,38,GIGADRAIN,43,AROMATHERAPY,49,RAGEPOWDER,54,XSCISSOR","Height":"0.3","Weight":"5.4","Habitat":"Forest","Kind":"Mushroom","Pokedex":"A Paras has parasitic tochukaso mushrooms growing on its back. They grow by drawing nutrients from the host. They are valued as a medicine for long life.","WildItemCommon":"TINYMUSHROOM","WildItemUncommon":"BIGMUSHROOM","WildItemRare":"BALMMUSHROOM","Evolutions":"PARASECT,Level,24"},{"Name":"Parasect","InternalName":"PARASECT","Type1":"BUG","Type2":"GRASS","HiddenAbility":"DAMP","Moves":"1,CROSSPOISON,1,SCRATCH,1,STUNSPORE,1,POISONPOWDER,1,LEECHLIFE,6,STUNSPORE,6,POISONPOWDER,11,LEECHLIFE,17,FURYCUTTER,22,SPORE,29,SLASH,37,GROWTH,44,GIGADRAIN,51,AROMATHERAPY,59,RAGEPOWDER,66,XSCISSOR","Height":"1.0","Weight":"29.5","Habitat":"Forest","Kind":"Mushroom","Pokedex":"Parasect are known to infest the roots of large trees en masse and drain nutrients. When an infested tree dies, they move onto another tree all at once.","WildItemCommon":"TINYMUSHROOM","WildItemUncommon":"BIGMUSHROOM","WildItemRare":"BALMMUSHROOM","Evolutions":null},{"Name":"Venonat","InternalName":"VENONAT","Type1":"BUG","Type2":"POISON","HiddenAbility":"RUNAWAY","Moves":"1,TACKLE,1,DISABLE,1,FORESIGHT,5,SUPERSONIC,11,CONFUSION,13,POISONPOWDER,17,LEECHLIFE,23,STUNSPORE,25,PSYBEAM,29,SLEEPPOWDER,35,SIGNALBEAM,37,ZENHEADBUTT,41,POISONFANG,47,PSYCHIC","Height":"1.0","Weight":"30.0","Habitat":"Forest","Kind":"Insect","Pokedex":"Its coat of thin, stiff hair that covers its entire body is said to have evolved for protection. Its large eyes never fail to spot even miniscule prey.","Evolutions":"VENOMOTH,Level,31"},{"Name":"Venomoth","InternalName":"VENOMOTH","Type1":"BUG","Type2":"POISON","HiddenAbility":"WONDERSKIN","Moves":"1,QUIVERDANCE,1,BUGBUZZ,1,SILVERWIND,1,TACKLE,1,DISABLE,1,FORESIGHT,1,SUPERSONIC,5,SUPERSONIC,11,CONFUSION,13,POISONPOWDER,17,LEECHLIFE,23,STUNSPORE,25,PSYBEAM,29,SLEEPPOWDER,31,GUST,37,SIGNALBEAM,41,ZENHEADBUTT,47,POISONFANG,55,PSYCHIC,59,BUGBUZZ,63,QUIVERDANCE","Height":"1.5","Weight":"12.5","Habitat":"Forest","Kind":"Poison Moth","Pokedex":"Venomoth are nocturnal--they only are active at night. Their favorite prey are insects that gather around streetlights, attracted by the light in the darkness.","WildItemUncommon":"SHEDSHELL","Evolutions":null},{"Name":"Diglett","InternalName":"DIGLETT","Type1":"GROUND","HiddenAbility":"SANDFORCE","Moves":"1,SCRATCH,1,SANDATTACK,4,GROWL,7,ASTONISH,12,MUDSLAP,15,MAGNITUDE,18,BULLDOZE,23,SUCKERPUNCH,26,MUDBOMB,29,EARTHPOWER,34,DIG,37,SLASH,40,EARTHQUAKE,45,FISSURE","Height":"0.2","Weight":"0.8","Habitat":"Cave","Kind":"Mole","Pokedex":"Diglett are raised in most farms. The reason is simple--wherever they burrow, the soil is left perfectly tilled for growing delicious crops.","WildItemUncommon":"SOFTSAND","Evolutions":"DUGTRIO,Level,26"},{"Name":"Dugtrio","InternalName":"DUGTRIO","Type1":"GROUND","HiddenAbility":"SANDFORCE","Moves":"1,ROTOTILLER,1,NIGHTSLASH,1,TRIATTACK,1,SCRATCH,1,SANDATTACK,1,GROWL,4,GROWL,7,ASTONISH,12,MUDSLAP,15,MAGNITUDE,18,BULLDOZE,23,SUCKERPUNCH,26,SANDTOMB,28,MUDBOMB,33,EARTHPOWER,40,DIG,45,SLASH,50,EARTHQUAKE,57,FISSURE","Height":"0.7","Weight":"33.3","Habitat":"Cave","Kind":"Mole","Pokedex":"Because the triplets originally split from one body, they think exactly alike. They work cooperatively to burrow endlessly through the ground.","WildItemUncommon":"SOFTSAND","Evolutions":null},{"Name":"Meowth","InternalName":"MEOWTH","Type1":"NORMAL","HiddenAbility":"UNNERVE","Moves":"1,SCRATCH,1,GROWL,6,BITE,9,FAKEOUT,14,FURYSWIPES,17,SCREECH,22,FEINTATTACK,25,TAUNT,30,PAYDAY,33,SLASH,38,NASTYPLOT,41,ASSURANCE,46,CAPTIVATE,49,NIGHTSLASH,50,FEINT","Height":"0.4","Weight":"4.2","Habitat":"Urban","Kind":"Scratch Cat","Pokedex":"Meowth withdraw their sharp claws into their paws to silently sneak about. For some reason, this PokÃ©mon loves shiny coins that glitter with light.","WildItemUncommon":"QUICKCLAW","Evolutions":"PERSIAN,Level,28"},{"Name":"Persian","InternalName":"PERSIAN","Type1":"NORMAL","HiddenAbility":"UNNERVE","Moves":"1,PLAYROUGH,1,SWITCHEROO,1,SCRATCH,1,GROWL,1,BITE,1,FAKEOUT,6,BITE,9,FAKEOUT,14,FURYSWIPES,17,SCREECH,22,FEINTATTACK,25,TAUNT,28,SWIFT,32,POWERGEM,37,SLASH,44,NASTYPLOT,49,ASSURANCE,56,CAPTIVATE,61,NIGHTSLASH,65,FEINT","Height":"1.0","Weight":"32.0","Habitat":"Urban","Kind":"Classy Cat","Pokedex":"A Persian's six bold whiskers sense air movements to determine what is in its vicinity. It becomes docile if grabbed by the whiskers.","WildItemUncommon":"QUICKCLAW","Evolutions":null},{"Name":"Psyduck","InternalName":"PSYDUCK","Type1":"WATER","HiddenAbility":"SWIFTSWIM","Moves":"1,WATERSPORT,1,SCRATCH,4,TAILWHIP,8,WATERGUN,11,CONFUSION,15,FURYSWIPES,18,WATERPULSE,22,DISABLE,25,SCREECH,29,AQUATAIL,32,ZENHEADBUTT,36,SOAK,39,PSYCHUP,43,AMNESIA,46,HYDROPUMP,50,WONDERROOM","Height":"0.8","Weight":"19.6","Habitat":"WatersEdge","Kind":"Duck","Pokedex":"When its headache intensifies, it starts using strange powers. However, it has no recollection of its powers, so it always looks befuddled and bewildered.","Evolutions":"GOLDUCK,Level,33"},{"Name":"Golduck","InternalName":"GOLDUCK","Type1":"WATER","HiddenAbility":"SWIFTSWIM","Moves":"1,AQUAJET,1,WATERSPORT,1,SCRATCH,1,TAILWHIP,1,WATERGUN,4,TAILWHIP,8,WATERGUN,11,CONFUSION,15,FURYSWIPES,18,WATERPULSE,22,DISABLE,25,ZENHEADBUTT,29,SCREECH,32,AQUATAIL,38,SOAK,43,PSYCHUP,49,AMNESIA,54,HYDROPUMP,60,WONDERROOM","Height":"1.7","Weight":"76.6","Habitat":"WatersEdge","Kind":"Duck","Pokedex":"A Golduck is an adept swimmer. It sometimes joins competitive swimmers in training. It uses psychic powers when its forehead shimmers with light.","Evolutions":null},{"Name":"Mankey","InternalName":"MANKEY","Type1":"FIGHTING","HiddenAbility":"DEFIANT","Moves":"1,COVET,1,SCRATCH,1,LOWKICK,1,LEER,1,FOCUSENERGY,9,FURYSWIPES,13,KARATECHOP,17,SEISMICTOSS,21,SCREECH,25,ASSURANCE,33,SWAGGER,37,CROSSCHOP,41,THRASH,45,PUNISHMENT,49,CLOSECOMBAT,53,FINALGAMBIT","Height":"0.5","Weight":"28.0","Habitat":"Mountain","Kind":"Pig Monkey","Pokedex":"When it starts shaking and its nasal breathing turns rough, it's a sure sign of anger. However, since this happens instantly, there is no time to flee.","WildItemUncommon":"PAYAPABERRY","Evolutions":"PRIMEAPE,Level,28"},{"Name":"Primeape","InternalName":"PRIMEAPE","Type1":"FIGHTING","HiddenAbility":"DEFIANT","Moves":"1,FINALGAMBIT,1,FLING,1,SCRATCH,1,LOWKICK,1,LEER,1,FOCUSENERGY,9,FURYSWIPES,13,KARATECHOP,17,SEISMICTOSS,21,SCREECH,25,ASSURANCE,28,RAGE,35,SWAGGER,41,CROSSCHOP,47,THRASH,53,PUNISHMENT,59,CLOSECOMBAT,63,FINALGAMBIT","Height":"1.0","Weight":"32.0","Habitat":"Mountain","Kind":"Pig Monkey","Pokedex":"When it becomes furious, its blood circulation becomes more robust, and its muscles are made stronger. But it also becomes much less intelligent.","WildItemUncommon":"PAYAPABERRY","Evolutions":null},{"Name":"Growlithe","InternalName":"GROWLITHE","Type1":"FIRE","HiddenAbility":"JUSTIFIED","Moves":"1,BITE,1,ROAR,6,EMBER,8,LEER,10,ODORSLEUTH,12,HELPINGHAND,17,FLAMEWHEEL,19,REVERSAL,21,FIREFANG,23,TAKEDOWN,28,FLAMEBURST,30,AGILITY,32,RETALIATE,34,FLAMETHROWER,39,CRUNCH,41,HEATWAVE,43,OUTRAGE,45,FLAREBLITZ","Height":"0.7","Weight":"19.0","Habitat":"Grassland","Kind":"Puppy","Pokedex":"Its superb sense of smell ensures that this PokÃ©mon won't forget any scent, no matter what. It uses its sense of smell to detect the emotions of others.","WildItemCommon":"RAWSTBERRY","WildItemUncommon":"RAWSTBERRY","WildItemRare":"RAWSTBERRY","Evolutions":"ARCANINE,Item,FIRESTONE"},{"Name":"Arcanine","InternalName":"ARCANINE","Type1":"FIRE","HiddenAbility":"JUSTIFIED","Moves":"1,THUNDERFANG,1,BITE,1,ROAR,1,ODORSLEUTH,1,FIREFANG,34,EXTREMESPEED","Height":"1.9","Weight":"155.0","Habitat":"Grassland","Kind":"Legendary","Pokedex":"This fleet-footed PokÃ©mon is said to run over 6,200 miles in a single day and night. The fire that blazes wildly within its body is its source of power.","WildItemCommon":"RAWSTBERRY","WildItemUncommon":"RAWSTBERRY","WildItemRare":"RAWSTBERRY","Evolutions":null},{"Name":"Poliwag","InternalName":"POLIWAG","Type1":"WATER","HiddenAbility":"SWIFTSWIM","Moves":"1,WATERSPORT,5,WATERGUN,8,HYPNOSIS,11,BUBBLE,15,DOUBLESLAP,18,RAINDANCE,21,BODYSLAM,25,BUBBLEBEAM,28,MUDSHOT,31,BELLYDRUM,35,WAKEUPSLAP,38,HYDROPUMP,41,MUDBOMB","Height":"0.6","Weight":"12.4","Habitat":"WatersEdge","Kind":"Tadpole","Pokedex":"It is possible to see this PokÃ©mon's spiral innards right through its thin skin. However, the skin is also very flexible. Even sharp fangs bounce right off it.","Evolutions":"POLIWHIRL,Level,25"},{"Name":"Poliwhirl","InternalName":"POLIWHIRL","Type1":"WATER","HiddenAbility":"SWIFTSWIM","Moves":"1,WATERSPORT,1,WATERGUN,1,HYPNOSIS,5,WATERGUN,8,HYPNOSIS,11,BUBBLE,15,DOUBLESLAP,18,RAINDANCE,21,BODYSLAM,27,BUBBLEBEAM,32,MUDSHOT,37,BELLYDRUM,43,WAKEUPSLAP,48,HYDROPUMP,53,MUDBOMB","Height":"1.0","Weight":"20.0","Habitat":"WatersEdge","Kind":"Tadpole","Pokedex":"Its body surface is always wet and slick with an oily fluid. Because of this greasy covering, it can easily slip and slide out of the clutches of any enemy in battle.","WildItemUncommon":"KINGSROCK","Evolutions":"POLIWRATH,Item,WATERSTONE,POLITOED,TradeItem,KINGSROCK"},{"Name":"Poliwrath","InternalName":"POLIWRATH","Type1":"WATER","Type2":"FIGHTING","HiddenAbility":"SWIFTSWIM","Moves":"1,CIRCLETHROW,1,BUBBLEBEAM,1,HYPNOSIS,1,DOUBLESLAP,1,SUBMISSION,32,DYNAMICPUNCH,43,MINDREADER,53,CIRCLETHROW","Height":"1.3","Weight":"54.0","Habitat":"WatersEdge","Kind":"Tadpole","Pokedex":"Its highly developed muscles never grow fatigued, however much it exercises. This PokÃ©mon can swim back and forth across the Pacific Ocean without effort.","WildItemUncommon":"KINGSROCK","Evolutions":null},{"Name":"Abra","InternalName":"ABRA","Type1":"PSYCHIC","HiddenAbility":"MAGICGUARD","Moves":"1,TELEPORT","Height":"0.9","Weight":"19.5","Habitat":"Urban","Kind":"Psi","Pokedex":"A PokÃ©mon that sleeps 18 hours a day. Observation revealed that it uses Teleport to change its location once every hour.","WildItemUncommon":"TWISTEDSPOON","Evolutions":"KADABRA,Level,16"},{"Name":"Kadabra","InternalName":"KADABRA","Type1":"PSYCHIC","HiddenAbility":"MAGICGUARD","Moves":"1,TELEPORT,1,KINESIS,1,CONFUSION,16,CONFUSION,18,DISABLE,21,PSYBEAM,23,MIRACLEEYE,26,REFLECT,28,PSYCHOCUT,31,RECOVER,33,TELEKINESIS,36,ALLYSWITCH,38,PSYCHIC,41,ROLEPLAY,43,FUTURESIGHT,46,TRICK","Height":"1.3","Weight":"56.5","Habitat":"Urban","Kind":"Psi","Pokedex":"It is rumored that a boy with psychic abilities suddenly transformed into Kadabra while he was assisting research into extrasensory powers.","WildItemUncommon":"TWISTEDSPOON","Evolutions":"ALAKAZAM,Trade,"},{"Name":"Alakazam","InternalName":"ALAKAZAM","Type1":"PSYCHIC","HiddenAbility":"MAGICGUARD","Moves":"1,TELEPORT,1,KINESIS,1,CONFUSION,16,CONFUSION,18,DISABLE,21,PSYBEAM,23,MIRACLEEYE,26,REFLECT,28,PSYCHOCUT,31,RECOVER,33,TELEKINESIS,36,ALLYSWITCH,38,PSYCHIC,41,CALMMIND,43,FUTURESIGHT,46,TRICK","Height":"1.5","Weight":"48.0","Habitat":"Urban","Kind":"Psi","Pokedex":"While it has strong psychic abilities and high intelligence, an Alakazam's muscles are very weak. It uses psychic power to move its body.","WildItemUncommon":"TWISTEDSPOON","Evolutions":null},{"Name":"Machop","InternalName":"MACHOP","Type1":"FIGHTING","HiddenAbility":"STEADFAST","Moves":"1,LOWKICK,1,LEER,3,FOCUSENERGY,7,KARATECHOP,9,FORESIGHT,13,LOWSWEEP,15,SEISMICTOSS,19,REVENGE,21,KNOCKOFF,25,VITALTHROW,27,WAKEUPSLAP,31,DUALCHOP,33,SUBMISSION,37,BULKUP,39,CROSSCHOP,43,SCARYFACE,45,DYNAMICPUNCH","Height":"0.8","Weight":"19.5","Habitat":"Mountain","Kind":"Superpower","Pokedex":"It continually undertakes strenuous training to master all forms of martial arts. Its strength lets it easily hoist a sumo wrestler onto its shoulders.","Evolutions":"MACHOKE,Level,28"},{"Name":"Machoke","InternalName":"MACHOKE","Type1":"FIGHTING","HiddenAbility":"STEADFAST","Moves":"1,LOWKICK,1,LEER,1,FOCUSENERGY,1,KARATECHOP,3,FOCUSENERGY,7,KARATECHOP,9,FORESIGHT,13,LOWSWEEP,15,SEISMICTOSS,19,REVENGE,21,KNOCKOFF,25,VITALTHROW,27,WAKEUPSLAP,33,DUALCHOP,37,SUBMISSION,43,BULKUP,47,CROSSCHOP,53,SCARYFACE,57,DYNAMICPUNCH","Height":"1.5","Weight":"70.5","Habitat":"Mountain","Kind":"Superpower","Pokedex":"A belt is worn by a Machoke to keep its overwhelming power under control. Because it is so dangerous, no one has ever removed the belt.","Evolutions":"MACHAMP,Trade,"},{"Name":"Machamp","InternalName":"MACHAMP","Type1":"FIGHTING","HiddenAbility":"STEADFAST","Moves":"1,WIDEGUARD,1,LOWKICK,1,LEER,1,FOCUSENERGY,1,KARATECHOP,3,FOCUSENERGY,7,KARATECHOP,9,FORESIGHT,13,LOWSWEEP,15,SEISMICTOSS,19,REVENGE,21,KNOCKOFF,25,VITALTHROW,27,WAKEUPSLAP,33,DUALCHOP,37,SUBMISSION,43,BULKUP,47,CROSSCHOP,53,SCARYFACE,57,DYNAMICPUNCH","Height":"1.6","Weight":"130.0","Habitat":"Mountain","Kind":"Superpower","Pokedex":"It is impossible to defend against punches and chops doled out by its four arms. Its fighting spirit flares up when it faces a tough opponent.","Evolutions":null},{"Name":"Bellsprout","InternalName":"BELLSPROUT","Type1":"GRASS","Type2":"POISON","HiddenAbility":"GLUTTONY","Moves":"7,GROWTH,11,WRAP,13,SLEEPPOWDER,15,POISONPOWDER,17,STUNSPORE,23,ACID,27,KNOCKOFF,29,SWEETSCENT,35,GASTROACID,39,RAZORLEAF,41,SLAM,47,WRINGOUT","Height":"0.7","Weight":"4.0","Habitat":"Forest","Kind":"Flower","Pokedex":"A Bellsprout's thin and flexible body lets it bend and sway to avoid any attack, however strong it may be. From its mouth, it leaks a fluid that melts even iron.","Evolutions":"WEEPINBELL,Level,21"},{"Name":"Weepinbell","InternalName":"WEEPINBELL","Type1":"GRASS","Type2":"POISON","HiddenAbility":"GLUTTONY","Moves":"1,VINEWHIP,1,GROWTH,1,WRAP,7,GROWTH,11,WRAP,13,SLEEPPOWDER,15,POISONPOWDER,17,STUNSPORE,23,ACID,27,KNOCKOFF,29,SWEETSCENT,35,GASTROACID,39,RAZORLEAF,41,SLAM,47,WRINGOUT","Height":"1.0","Weight":"6.4","Habitat":"Forest","Kind":"Flycatcher","Pokedex":"At night, a Weepinbell hangs on to a tree branch with its hooked rear and sleeps. If it moves around in its sleep, it may wake up to find itself on the ground.","Evolutions":"VICTREEBEL,Item,LEAFSTONE"},{"Name":"Victreebel","InternalName":"VICTREEBEL","Type1":"GRASS","Type2":"POISON","HiddenAbility":"GLUTTONY","Moves":"1,STOCKPILE,1,SWALLOW,1,SPITUP,1,VINEWHIP,1,SLEEPPOWDER,1,SWEETSCENT,1,RAZORLEAF,27,LEAFTORNADO,47,LEAFSTORM,47,LEAFBLADE","Height":"1.7","Weight":"15.5","Habitat":"Forest","Kind":"Flycatcher","Pokedex":"The long vine extending from its head is waved about as if it were a living thing to attract prey. When an unsuspecting victim approaches, it is swallowed whole.","Evolutions":null},{"Name":"Tentacool","InternalName":"TENTACOOL","Type1":"WATER","Type2":"POISON","HiddenAbility":"RAINDISH","Moves":"1,POISONSTING,4,SUPERSONIC,7,CONSTRICT,10,ACID,13,TOXICSPIKES,16,WATERPULSE,19,WRAP,22,ACIDSPRAY,25,BUBBLEBEAM,28,BARRIER,31,POISONJAB,34,BRINE,37,SCREECH,40,HEX,43,SLUDGEWAVE,46,HYDROPUMP,49,WRINGOUT","Height":"0.9","Weight":"45.5","Habitat":"Sea","Kind":"Jellyfish","Pokedex":"Its body is almost entirely composed of water. It ensnares its foe with its two long tentacles, then stabs with the poison stingers at their tips.","WildItemUncommon":"POISONBARB","Evolutions":"TENTACRUEL,Level,30"},{"Name":"Tentacruel","InternalName":"TENTACRUEL","Type1":"WATER","Type2":"POISON","HiddenAbility":"RAINDISH","Moves":"1,REFLECTTYPE,1,WRINGOUT,1,POISONSTING,1,SUPERSONIC,1,CONSTRICT,1,ACID,4,SUPERSONIC,7,CONSTRICT,10,ACID,13,TOXICSPIKES,16,WATERPULSE,19,WRAP,22,ACIDSPRAY,25,BUBBLEBEAM,28,BARRIER,32,POISONJAB,36,BRINE,40,SCREECH,44,HEX,48,SLUDGEWAVE,52,HYDROPUMP,56,WRINGOUT","Height":"1.6","Weight":"55.0","Habitat":"Sea","Kind":"Jellyfish","Pokedex":"It lives in complex rock formations on the ocean floor and traps prey using its 80 tentacles. Its red orbs glow when it grows excited or agitated.","WildItemUncommon":"POISONBARB","Evolutions":null},{"Name":"Geodude","InternalName":"GEODUDE","Type1":"ROCK","Type2":"GROUND","HiddenAbility":"SANDVEIL","Moves":"1,TACKLE,1,DEFENSECURL,4,MUDSPORT,6,ROCKPOLISH,10,ROLLOUT,12,MAGNITUDE,16,ROCKTHROW,18,SMACKDOWN,22,BULLDOZE,24,SELFDESTRUCT,28,STEALTHROCK,30,ROCKBLAST,34,EARTHQUAKE,36,EXPLOSION,40,DOUBLEEDGE,42,STONEEDGE","Height":"0.4","Weight":"20.0","Habitat":"Mountain","Kind":"Rock","Pokedex":"It climbs mountain paths using only the power of its arms. Because they look just like boulders lining paths, hikers may step on them without noticing.","WildItemUncommon":"EVERSTONE","Evolutions":"GRAVELER,Level,25"},{"Name":"Graveler","InternalName":"GRAVELER","Type1":"ROCK","Type2":"GROUND","HiddenAbility":"SANDVEIL","Moves":"1,TACKLE,1,DEFENSECURL,1,MUDSPORT,1,ROCKPOLISH,4,MUDSPORT,6,ROCKPOLISH,10,ROLLOUT,12,MAGNITUDE,16,ROCKTHROW,18,SMACKDOWN,22,BULLDOZE,24,SELFDESTRUCT,30,STEALTHROCK,34,ROCKBLAST,40,EARTHQUAKE,44,EXPLOSION,50,DOUBLEEDGE,54,STONEEDGE","Height":"1.0","Weight":"105.0","Habitat":"Mountain","Kind":"Rock","Pokedex":"They descend from mountains by tumbling down steep slopes. They are so brutal, they smash aside obstructing trees and massive boulders with thunderous tackles.","WildItemUncommon":"EVERSTONE","Evolutions":"GOLEM,Trade,"},{"Name":"Golem","InternalName":"GOLEM","Type1":"ROCK","Type2":"GROUND","HiddenAbility":"SANDVEIL","Moves":"1,HEAVYSLAM,1,TACKLE,1,DEFENSECURL,1,MUDSPORT,1,ROCKPOLISH,4,MUDSPORT,6,ROCKPOLISH,10,STEAMROLLER,12,MAGNITUDE,16,ROCKTHROW,18,SMACKDOWN,22,BULLDOZE,24,SELFDESTRUCT,30,STEALTHROCK,34,ROCKBLAST,40,EARTHQUAKE,44,EXPLOSION,50,DOUBLEEDGE,54,STONEEDGE,60,HEAVYSLAM","Height":"1.4","Weight":"300.0","Habitat":"Mountain","Kind":"Megaton","Pokedex":"It is said to live in volcanic craters on mountain peaks. Once a year, it sheds its hide and grows larger. The shed hide crumbles and returns to the soil.","WildItemUncommon":"EVERSTONE","Evolutions":null},{"Name":"Ponyta","InternalName":"PONYTA","Type1":"FIRE","HiddenAbility":"FLAMEBODY","Moves":"1,GROWL,1,TACKLE,4,TAILWHIP,9,EMBER,13,FLAMEWHEEL,17,STOMP,21,FLAMECHARGE,25,FIRESPIN,29,TAKEDOWN,33,INFERNO,37,AGILITY,41,FIREBLAST,45,BOUNCE,49,FLAREBLITZ","Height":"1.0","Weight":"30.0","Habitat":"Grassland","Kind":"Fire Horse","Pokedex":"A Ponyta is very weak at birth. It can barely stand up. Its legs become stronger as it stumbles and falls while trying to keep up with its parent.","WildItemUncommon":"SHUCABERRY","Evolutions":"RAPIDASH,Level,40"},{"Name":"Rapidash","InternalName":"RAPIDASH","Type1":"FIRE","HiddenAbility":"FLAMEBODY","Moves":"1,POISONJAB,1,MEGAHORN,1,GROWL,1,QUICKATTACK,1,TAILWHIP,1,EMBER,4,TAILWHIP,9,EMBER,13,FLAMEWHEEL,17,STOMP,21,FLAMECHARGE,25,FIRESPIN,29,TAKEDOWN,33,INFERNO,37,AGILITY,40,FURYATTACK,41,FIREBLAST,45,BOUNCE,49,FLAREBLITZ","Height":"1.7","Weight":"95.0","Habitat":"Grassland","Kind":"Fire Horse","Pokedex":"It usually canters casually in the fields and plains. But once a Rapidash turns serious, its fiery manes flare and blaze as it gallops its way up to 150 mph.","WildItemUncommon":"SHUCABERRY","Evolutions":null},{"Name":"Slowpoke","InternalName":"SLOWPOKE","Type1":"WATER","Type2":"PSYCHIC","HiddenAbility":"REGENERATOR","Moves":"1,CURSE,1,YAWN,1,TACKLE,5,GROWL,9,WATERGUN,14,CONFUSION,19,DISABLE,23,HEADBUTT,28,WATERPULSE,32,ZENHEADBUTT,36,SLACKOFF,41,AMNESIA,45,PSYCHIC,49,RAINDANCE,54,PSYCHUP,58,HEALPULSE","Height":"1.2","Weight":"36.0","Habitat":"WatersEdge","Kind":"Dopey","Pokedex":"It catches prey by dipping its tail in water at the side of a river. But it often forgets what it is doing and spends entire days just loafing at water's edge.","WildItemUncommon":"LAGGINGTAIL","Evolutions":"SLOWBRO,Level,37,SLOWKING,TradeItem,KINGSROCK"},{"Name":"Slowbro","InternalName":"SLOWBRO","Type1":"WATER","Type2":"PSYCHIC","HiddenAbility":"REGENERATOR","Moves":"1,HEALPULSE,1,CURSE,1,YAWN,1,TACKLE,1,GROWL,5,GROWL,9,WATERGUN,14,CONFUSION,19,DISABLE,23,HEADBUTT,28,WATERPULSE,32,ZENHEADBUTT,36,SLACKOFF,37,WITHDRAW,43,AMNESIA,49,PSYCHIC,55,RAINDANCE,62,PSYCHUP,68,HEALPULSE","Height":"1.6","Weight":"78.5","Habitat":"WatersEdge","Kind":"Hermit Crab","Pokedex":"Its tail has a Shellder firmly attached with a bite. As a result, the tail can't be used for fishing anymore. This forces it to reluctantly swim and catch prey.","WildItemUncommon":"KINGSROCK","Evolutions":null},{"Name":"Magnemite","InternalName":"MAGNEMITE","Type1":"ELECTRIC","Type2":"STEEL","HiddenAbility":"ANALYTIC","Moves":"1,TACKLE,5,SUPERSONIC,7,THUNDERSHOCK,11,SONICBOOM,13,THUNDERWAVE,17,MAGNETBOMB,19,SPARK,23,MIRRORSHOT,25,METALSOUND,29,ELECTROBALL,31,FLASHCANNON,35,SCREECH,37,DISCHARGE,41,LOCKON,43,MAGNETRISE,47,GYROBALL,49,ZAPCANNON","Height":"0.3","Weight":"6.0","Habitat":"RoughTerrain","Kind":"Magnet","Pokedex":"The units at its sides are extremely powerful magnets. They generate enough magnetism to draw in iron objects from over 300 feet away.","WildItemUncommon":"METALCOAT","Evolutions":"MAGNETON,Level,30"},{"Name":"Magneton","InternalName":"MAGNETON","Type1":"ELECTRIC","Type2":"STEEL","HiddenAbility":"ANALYTIC","Moves":"1,ZAPCANNON,1,ELECTRICTERRAIN,1,TACKLE,1,SUPERSONIC,1,THUNDERSHOCK,1,SONICBOOM,5,SUPERSONIC,7,THUNDERSHOCK,11,SONICBOOM,13,THUNDERWAVE,17,MAGNETBOMB,19,SPARK,23,MIRRORSHOT,25,METALSOUND,29,ELECTROBALL,30,TRIATTACK,33,FLASHCANNON,39,SCREECH,43,DISCHARGE,49,LOCKON,53,MAGNETRISE,59,GYROBALL,63,ZAPCANNON","Height":"1.0","Weight":"60.0","Habitat":"RoughTerrain","Kind":"Magnet","Pokedex":"It is actually three Magnemite linked by magnetism. It generates powerful radio waves that raise temperatures by 3.6 degrees F within a 3,300-foot radius.","WildItemUncommon":"METALCOAT","Evolutions":"MAGNEZONE,Location,49,MAGNEZONE,Location,50,MAGNEZONE,Location,51"},{"Name":"Farfetch'd","InternalName":"FARFETCHD","Type1":"NORMAL","Type2":"FLYING","HiddenAbility":"DEFIANT","Moves":"1,BRAVEBIRD,1,POISONJAB,1,PECK,1,SANDATTACK,1,LEER,1,FURYCUTTER,7,FURYATTACK,9,AERIALACE,13,KNOCKOFF,19,SLASH,21,AIRCUTTER,25,SWORDSDANCE,31,AGILITY,33,NIGHTSLASH,37,ACROBATICS,43,FEINT,45,FALSESWIPE,49,AIRSLASH,55,BRAVEBIRD","Height":"0.8","Weight":"15.0","Habitat":"Grassland","Kind":"Wild Duck","Pokedex":"It is always seen with a stick from a plant. Apparently, there are good sticks and bad sticks. This PokÃ©mon occasionally fights with others over choice sticks.","WildItemUncommon":"STICK","Evolutions":null},{"Name":"Doduo","InternalName":"DODUO","Type1":"NORMAL","Type2":"FLYING","HiddenAbility":"TANGLEDFEET","Moves":"1,PECK,1,GROWL,5,QUICKATTACK,9,RAGE,13,FURYATTACK,17,PURSUIT,21,PLUCK,25,DOUBLEHIT,29,ACUPRESSURE,33,AGILITY,37,DRILLPECK,41,UPROAR,45,ENDEAVOR,49,THRASH","Height":"1.4","Weight":"39.2","Habitat":"Grassland","Kind":"Twin Bird","Pokedex":"Even while eating or sleeping, one of the heads remains always vigilant for any sign of danger. When threatened, it flees at over 60 miles per hour.","WildItemUncommon":"SHARPBEAK","Evolutions":"DODRIO,Level,31"},{"Name":"Dodrio","InternalName":"DODRIO","Type1":"NORMAL","Type2":"FLYING","HiddenAbility":"TANGLEDFEET","Moves":"1,PECK,1,GROWL,1,QUICKATTACK,1,RAGE,5,QUICKATTACK,9,RAGE,13,FURYATTACK,17,PURSUIT,21,PLUCK,25,TRIATTACK,29,ACUPRESSURE,35,AGILITY,41,DRILLPECK,47,UPROAR,53,ENDEAVOR,59,THRASH","Height":"1.8","Weight":"85.2","Habitat":"Grassland","Kind":"Triple Bird","Pokedex":"A peculiar PokÃ©mon species with three heads. It vigorously races across grassy plains even in arid seasons with little rainfall.","WildItemUncommon":"SHARPBEAK","Evolutions":null},{"Name":"Seel","InternalName":"SEEL","Type1":"WATER","HiddenAbility":"ICEBODY","Moves":"1,HEADBUTT,3,GROWL,7,WATERSPORT,11,ICYWIND,13,ENCORE,17,ICESHARD,21,REST,23,AQUARING,27,AURORABEAM,31,AQUAJET,33,BRINE,37,TAKEDOWN,41,DIVE,43,AQUATAIL,47,ICEBEAM,51,SAFEGUARD,53,HAIL","Height":"1.1","Weight":"90.0","Habitat":"Sea","Kind":"Sea Lion","Pokedex":"Seel hunt for prey in frigid, ice-covered seas. When it needs to breathe, it punches a hole through the ice with the sharply protruding section of its head.","Evolutions":"DEWGONG,Level,34"},{"Name":"Dewgong","InternalName":"DEWGONG","Type1":"WATER","Type2":"ICE","HiddenAbility":"ICEBODY","Moves":"1,HEADBUTT,1,GROWL,1,SIGNALBEAM,1,ICYWIND,3,GROWL,7,SIGNALBEAM,11,ICYWIND,13,ENCORE,17,ICESHARD,21,REST,23,AQUARING,27,AURORABEAM,31,AQUAJET,33,BRINE,34,SHEERCOLD,39,TAKEDOWN,45,DIVE,49,AQUATAIL,55,ICEBEAM,61,SAFEGUARD,65,HAIL","Height":"1.7","Weight":"120.0","Habitat":"Sea","Kind":"Sea Lion","Pokedex":"It loves to snooze on bitterly cold ice. The sight of this PokÃ©mon sleeping on a glacier was mistakenly thought to be a mermaid by a mariner long ago.","Evolutions":null},{"Name":"Grimer","InternalName":"GRIMER","Type1":"POISON","HiddenAbility":"POISONTOUCH","Moves":"1,POUND,1,POISONGAS,4,HARDEN,7,MUDSLAP,12,DISABLE,15,SLUDGE,18,MUDBOMB,21,MINIMIZE,26,FLING,29,SLUDGEBOMB,32,SLUDGEWAVE,37,SCREECH,40,GUNKSHOT,43,ACIDARMOR,46,BELCH,48,MEMENTO","Height":"0.9","Weight":"30.0","Habitat":"Urban","Kind":"Sludge","Pokedex":"Born from polluted sludge in the sea, Grimer's favorite food is anything filthy. They feed on wastewater pumped out from factories.","WildItemUncommon":"NUGGET","Evolutions":"MUK,Level,38"},{"Name":"Muk","InternalName":"MUK","Type1":"POISON","HiddenAbility":"POISONTOUCH","Moves":"1,POUND,1,POISONGAS,1,HARDEN,1,MUDSLAP,4,HARDEN,7,MUDSLAP,12,DISABLE,15,SLUDGE,18,MUDBOMB,21,MINIMIZE,26,FLING,29,SLUDGEBOMB,32,SLUDGEWAVE,37,SCREECH,38,VENOMDRENCH,40,GUNKSHOT,46,ACIDARMOR,52,BELCH,57,MEMENTO","Height":"1.2","Weight":"30.0","Habitat":"Urban","Kind":"Sludge","Pokedex":"It prefers warm and humid habitats. In the summertime, the toxic substances in its body intensify, making Muk reek like putrid kitchen garbage.","WildItemUncommon":"NUGGET","Evolutions":null},{"Name":"Shellder","InternalName":"SHELLDER","Type1":"WATER","HiddenAbility":"OVERCOAT","Moves":"1,TACKLE,4,WITHDRAW,8,SUPERSONIC,13,ICICLESPEAR,16,PROTECT,20,LEER,25,CLAMP,28,ICESHARD,32,RAZORSHELL,37,AURORABEAM,40,WHIRLPOOL,44,BRINE,49,IRONDEFENSE,52,ICEBEAM,56,SHELLSMASH,61,HYDROPUMP","Height":"0.3","Weight":"4.0","Habitat":"Sea","Kind":"Bivalve","Pokedex":"At night, it burrows a hole in the seafloor with its broad tongue to make a place to sleep. While asleep, it closes its shell, but leaves its tongue hanging out.","WildItemCommon":"PEARL","WildItemUncommon":"BIGPEARL","Evolutions":"CLOYSTER,Item,WATERSTONE"},{"Name":"Cloyster","InternalName":"CLOYSTER","Type1":"WATER","Type2":"ICE","HiddenAbility":"OVERCOAT","Moves":"1,HYDROPUMP,1,SHELLSMASH,1,TOXICSPIKES,1,WITHDRAW,1,SUPERSONIC,1,PROTECT,1,AURORABEAM,13,SPIKECANNON,28,SPIKES,50,ICICLECRASH","Height":"1.5","Weight":"132.5","Habitat":"Sea","Kind":"Bivalve","Pokedex":"It swims in the sea by swallowing water, then jetting it out toward the rear. The Cloyster shoots spikes from its shell using the same system.","WildItemCommon":"PEARL","WildItemUncommon":"BIGPEARL","Evolutions":null},{"Name":"Gastly","InternalName":"GASTLY","Type1":"GHOST","Type2":"POISON","Moves":"1,HYPNOSIS,1,LICK,5,SPITE,8,MEANLOOK,12,CURSE,15,NIGHTSHADE,19,CONFUSERAY,22,SUCKERPUNCH,26,PAYBACK,29,SHADOWBALL,33,DREAMEATER,36,DARKPULSE,40,DESTINYBOND,43,HEX,47,NIGHTMARE","Height":"1.3","Weight":"0.1","Habitat":"Cave","Kind":"Gas","Pokedex":"When exposed to a strong wind, a Gastly's gaseous body quickly dwindles away. They cluster under the eaves of houses to escape the ravages of wind.","Evolutions":"HAUNTER,Level,25"},{"Name":"Haunter","InternalName":"HAUNTER","Type1":"GHOST","Type2":"POISON","Moves":"1,HYPNOSIS,1,LICK,1,SPITE,5,SPITE,8,MEANLOOK,12,CURSE,15,NIGHTSHADE,19,CONFUSERAY,22,SUCKERPUNCH,25,SHADOWPUNCH,28,PAYBACK,33,SHADOWBALL,39,DREAMEATER,44,DARKPULSE,50,DESTINYBOND,55,HEX,61,NIGHTMARE","Height":"1.6","Weight":"0.1","Habitat":"Cave","Kind":"Gas","Pokedex":"If a Haunter beckons you while it is floating in darkness, don't approach it. This PokÃ©mon will try to lick you with its tongue and steal your life away.","Evolutions":"GENGAR,Trade,"},{"Name":"Gengar","InternalName":"GENGAR","Type1":"GHOST","Type2":"POISON","Moves":"1,HYPNOSIS,1,LICK,1,SPITE,5,SPITE,8,MEANLOOK,12,CURSE,15,NIGHTSHADE,19,CONFUSERAY,22,SUCKERPUNCH,25,SHADOWPUNCH,28,PAYBACK,33,SHADOWBALL,39,DREAMEATER,44,DARKPULSE,50,DESTINYBOND,55,HEX,61,NIGHTMARE","Height":"1.5","Weight":"40.5","Habitat":"Cave","Kind":"Shadow","Pokedex":"Deep in the night, your shadow cast by a streetlight may suddenly overtake you. It is actually a Gengar running past you, pretending to be your shadow.","Evolutions":null},{"Name":"Onix","InternalName":"ONIX","Type1":"ROCK","Type2":"GROUND","HiddenAbility":"WEAKARMOR","Moves":"1,MUDSPORT,1,TACKLE,1,HARDEN,1,BIND,4,CURSE,7,ROCKTHROW,10,ROCKTOMB,13,RAGE,16,STEALTHROCK,19,ROCKPOLISH,20,GYROBALL,22,SMACKDOWN,25,DRAGONBREATH,28,SLAM,31,SCREECH,34,ROCKSLIDE,37,SANDTOMB,40,IRONTAIL,43,DIG,46,STONEEDGE,49,DOUBLEEDGE,52,SANDSTORM","Height":"8.8","Weight":"210.0","Habitat":"Cave","Kind":"Rock Snake","Pokedex":"There is a magnet in its brain that prevents an Onix from losing direction while tunneling. As it grows older, its body becomes steadily rounder and smoother.","Evolutions":"STEELIX,TradeItem,METALCOAT"},{"Name":"Drowzee","InternalName":"DROWZEE","Type1":"PSYCHIC","HiddenAbility":"INNERFOCUS","Moves":"1,POUND,1,HYPNOSIS,5,DISABLE,9,CONFUSION,13,HEADBUTT,17,POISONGAS,21,MEDITATE,25,PSYBEAM,29,HEADBUTT,33,PSYCHUP,37,SYNCHRONOISE,41,ZENHEADBUTT,45,SWAGGER,49,PSYCHIC,53,NASTYPLOT,57,PSYSHOCK,61,FUTURESIGHT","Height":"1.0","Weight":"32.4","Habitat":"Grassland","Kind":"Hypnosis","Pokedex":"If your nose becomes itchy while you are sleeping, it's a sure sign that a Drowzee is standing above your pillow and trying to eat your dream through your nostrils.","Evolutions":"HYPNO,Level,26"},{"Name":"Hypno","InternalName":"HYPNO","Type1":"PSYCHIC","HiddenAbility":"INNERFOCUS","Moves":"1,FUTURESIGHT,1,NASTYPLOT,1,NIGHTMARE,1,SWITCHEROO,1,POUND,1,HYPNOSIS,1,DISABLE,1,CONFUSION,5,DISABLE,9,CONFUSION,13,HEADBUTT,17,POISONGAS,21,MEDITATE,25,PSYBEAM,29,HEADBUTT,33,PSYCHUP,37,SYNCHRONOISE,41,ZENHEADBUTT,45,SWAGGER,49,PSYCHIC,53,NASTYPLOT,57,PSYSHOCK,61,FUTURESIGHT","Height":"1.6","Weight":"75.6","Habitat":"Grassland","Kind":"Hypnosis","Pokedex":"The arcing movement and glitter of the pendulum in a Hypno's hand lull the foe into deep hypnosis. While searching for prey, it polishes the pendulum.","Evolutions":null},{"Name":"Krabby","InternalName":"KRABBY","Type1":"WATER","HiddenAbility":"SHEERFORCE","Moves":"1,MUDSPORT,1,BUBBLE,5,VICEGRIP,9,LEER,11,HARDEN,15,BUBBLEBEAM,19,MUDSHOT,21,METALCLAW,25,STOMP,29,PROTECT,31,GUILLOTINE,35,SLAM,39,BRINE,41,CRABHAMMER,45,FLAIL","Height":"0.4","Weight":"6.5","Habitat":"WatersEdge","Kind":"River Crab","Pokedex":"Krabby live in holes dug into beaches. On sandy shores with little in the way of food, they can be seen squabbling with each other over territory.","Evolutions":"KINGLER,Level,28"},{"Name":"Kingler","InternalName":"KINGLER","Type1":"WATER","HiddenAbility":"SHEERFORCE","Moves":"1,WIDEGUARD,1,MUDSPORT,1,BUBBLE,1,VICEGRIP,1,LEER,5,VICEGRIP,9,LEER,11,HARDEN,15,BUBBLEBEAM,19,MUDSHOT,21,METALCLAW,25,STOMP,32,PROTECT,37,GUILLOTINE,44,SLAM,51,BRINE,56,CRABHAMMER,63,FLAIL","Height":"1.3","Weight":"60.0","Habitat":"WatersEdge","Kind":"Pincer","Pokedex":"It waves its huge, oversized claw in the air to communicate with others. But since the claw is so heavy, this PokÃ©mon quickly tires.","Evolutions":null},{"Name":"Voltorb","InternalName":"VOLTORB","Type1":"ELECTRIC","HiddenAbility":"AFTERMATH","Moves":"1,CHARGE,1,TACKLE,4,SONICBOOM,6,EERIEIMPULSE,9,SPARK,11,ROLLOUT,13,SCREECH,16,CHARGEBEAM,20,SWIFT,22,ELECTROBALL,26,SELFDESTRUCT,29,LIGHTSCREEN,34,MAGNETRISE,37,DISCHARGE,41,EXPLOSION,46,GYROBALL,48,MIRRORCOAT","Height":"0.5","Weight":"10.4","Habitat":"Urban","Kind":"Ball","Pokedex":"It bears an uncanny and unexplained resemblance to a PokÃ© Ball. Because it explodes at the slightest shock, even veteran trainers treat it with caution.","Evolutions":"ELECTRODE,Level,30"},{"Name":"Electrode","InternalName":"ELECTRODE","Type1":"ELECTRIC","HiddenAbility":"AFTERMATH","Moves":"1,MAGNETICFLUX,1,CHARGE,1,TACKLE,1,SONICBOOM,1,SPARK,4,SONICBOOM,6,EERIEIMPULSE,9,SPARK,11,ROLLOUT,13,SCREECH,16,CHARGEBEAM,20,SWIFT,22,ELECTROBALL,26,SELFDESTRUCT,29,LIGHTSCREEN,36,MAGNETRISE,41,DISCHARGE,47,EXPLOSION,54,GYROBALL,58,MIRRORCOAT","Height":"1.2","Weight":"66.6","Habitat":"Urban","Kind":"Ball","Pokedex":"They appear in great numbers at electric power plants. Because they feed on electricity, they cause massive and chaotic blackouts in nearby cities.","Evolutions":null},{"Name":"Exeggcute","InternalName":"EXEGGCUTE","Type1":"GRASS","Type2":"PSYCHIC","HiddenAbility":"HARVEST","Moves":"1,BARRAGE,1,UPROAR,1,HYPNOSIS,7,REFLECT,11,LEECHSEED,17,BULLETSEED,19,STUNSPORE,21,POISONPOWDER,23,SLEEPPOWDER,27,CONFUSION,33,WORRYSEED,37,NATURALGIFT,43,SOLARBEAM,47,EXTRASENSORY,50,BESTOW","Height":"0.4","Weight":"2.5","Habitat":"Forest","Kind":"Egg","Pokedex":"It consists of six eggs that care for each other. The eggs attract each other and spin around. When cracks increasingly appear, it is close to evolution.","Evolutions":"EXEGGUTOR,Item,LEAFSTONE"},{"Name":"Exeggutor","InternalName":"EXEGGUTOR","Type1":"GRASS","Type2":"PSYCHIC","HiddenAbility":"HARVEST","Moves":"1,SEEDBOMB,1,BARRAGE,1,HYPNOSIS,1,CONFUSION,1,STOMP,17,PSYSHOCK,27,EGGBOMB,37,WOODHAMMER,47,LEAFSTORM","Height":"2.0","Weight":"120.0","Habitat":"Forest","Kind":"Coconut","Pokedex":"Originally from the tropics, Exeggutor's heads grow larger from exposure to strong sunlight. It is said that when the heads fall, they group to form an Exeggcute.","Evolutions":null},{"Name":"Cubone","InternalName":"CUBONE","Type1":"GROUND","HiddenAbility":"BATTLEARMOR","Moves":"1,GROWL,3,TAILWHIP,7,BONECLUB,11,HEADBUTT,13,LEER,17,FOCUSENERGY,21,BONEMERANG,23,RAGE,27,FALSESWIPE,31,THRASH,33,FLING,37,BONERUSH,41,ENDEAVOR,43,DOUBLEEDGE,47,RETALIATE","Height":"0.4","Weight":"6.5","Habitat":"Mountain","Kind":"Lonely","Pokedex":"It pines for the mother it will never see again. Seeing a likeness of its mother in the full moon, it cries. The stains on the skull it wears are from its tears.","WildItemUncommon":"THICKCLUB","Evolutions":"MAROWAK,Level,28"},{"Name":"Marowak","InternalName":"MAROWAK","Type1":"GROUND","HiddenAbility":"BATTLEARMOR","Moves":"1,GROWL,1,TAILWHIP,1,BONECLUB,1,HEADBUTT,3,TAILWHIP,7,BONECLUB,11,HEADBUTT,13,LEER,17,FOCUSENERGY,21,BONEMERANG,23,RAGE,27,FALSESWIPE,33,THRASH,37,FLING,43,BONERUSH,49,ENDEAVOR,53,DOUBLEEDGE,59,RETALIATE","Height":"1.0","Weight":"45.0","Habitat":"Mountain","Kind":"Bone Keeper","Pokedex":"A Marowak is the evolved form of a Cubone that has grown tough by overcoming the grief of losing its mother. Its tempered and hardened spirit is not easily broken.","WildItemUncommon":"THICKCLUB","Evolutions":null},{"Name":"Hitmonlee","InternalName":"HITMONLEE","Type1":"FIGHTING","HiddenAbility":"UNBURDEN","Moves":"1,REVERSAL,1,CLOSECOMBAT,1,MEGAKICK,1,REVENGE,1,DOUBLEKICK,5,MEDITATE,9,ROLLINGKICK,13,JUMPKICK,17,BRICKBREAK,21,FOCUSENERGY,25,FEINT,29,HIJUMPKICK,33,MINDREADER,37,FORESIGHT,41,WIDEGUARD,45,BLAZEKICK,49,ENDURE,53,MEGAKICK,57,CLOSECOMBAT,61,REVERSAL","Height":"1.5","Weight":"49.8","Habitat":"Urban","Kind":"Kicking","Pokedex":"Its legs freely stretch and contract. Using these springlike limbs, it bowls over foes with devastating kicks. After battle, it rubs down its tired legs.","Evolutions":null},{"Name":"Hitmonchan","InternalName":"HITMONCHAN","Type1":"FIGHTING","HiddenAbility":"INNERFOCUS","Moves":"1,CLOSECOMBAT,1,FOCUSPUNCH,1,REVENGE,1,COMETPUNCH,6,AGILITY,11,PURSUIT,16,MACHPUNCH,16,BULLETPUNCH,21,FEINT,26,VACUUMWAVE,31,QUICKGUARD,36,THUNDERPUNCH,36,ICEPUNCH,36,FIREPUNCH,41,SKYUPPERCUT,46,MEGAPUNCH,50,DETECT,56,FOCUSPUNCH,66,CLOSECOMBAT","Height":"1.4","Weight":"50.2","Habitat":"Urban","Kind":"Punching","Pokedex":"A Hitmonchan is said to possess the spirit of a boxer who aimed to become the world champion. Having an indomitable spirit means that it will never give up.","Evolutions":null},{"Name":"Lickitung","InternalName":"LICKITUNG","Type1":"NORMAL","HiddenAbility":"CLOUDNINE","Moves":"1,LICK,5,SUPERSONIC,9,DEFENSECURL,13,KNOCKOFF,17,WRAP,21,STOMP,25,DISABLE,29,SLAM,33,ROLLOUT,37,CHIPAWAY,41,MEFIRST,45,REFRESH,49,SCREECH,53,POWERWHIP,57,WRINGOUT","Height":"1.2","Weight":"65.5","Habitat":"Grassland","Kind":"Licking","Pokedex":"Whenever it sees something unfamiliar, it always licks the object because it memorizes things by texture and taste. It is somewhat put off by sour things.","WildItemUncommon":"LAGGINGTAIL","Evolutions":"LICKILICKY,HasMove,ROLLOUT"},{"Name":"Koffing","InternalName":"KOFFING","Type1":"POISON","Moves":"1,POISONGAS,1,TACKLE,4,SMOG,7,SMOKESCREEN,12,ASSURANCE,15,CLEARSMOG,18,SLUDGE,23,SELFDESTRUCT,26,HAZE,29,GYROBALL,34,SLUDGEBOMB,37,EXPLOSION,40,DESTINYBOND,42,BELCH,45,MEMENTO","Height":"0.6","Weight":"1.0","Habitat":"Urban","Kind":"Poison Gas","Pokedex":"Getting up close to a Koffing will give you a chance to observe, through its thin skin, the toxic gases swirling inside. It blows up at the slightest stimulation.","WildItemUncommon":"SMOKEBALL","Evolutions":"WEEZING,Level,35"},{"Name":"Weezing","InternalName":"WEEZING","Type1":"POISON","Moves":"1,POISONGAS,1,TACKLE,1,SMOG,1,SMOKESCREEN,4,SMOG,7,SMOKESCREEN,12,ASSURANCE,15,CLEARSMOG,18,SLUDGE,23,SELFDESTRUCT,26,HAZE,29,DOUBLEHIT,34,SLUDGEBOMB,40,EXPLOSION,46,DESTINYBOND,51,BELCH,57,MEMENTO","Height":"1.2","Weight":"9.5","Habitat":"Urban","Kind":"Poison Gas","Pokedex":"By diluting its toxic gases with a special process, the highest grade of perfume can be extracted. To Weezing, gases emanating from garbage are the ultimate feast.","WildItemUncommon":"SMOKEBALL","Evolutions":null},{"Name":"Rhyhorn","InternalName":"RHYHORN","Type1":"GROUND","Type2":"ROCK","HiddenAbility":"RECKLESS","Moves":"1,HORNATTACK,1,TAILWHIP,5,FURYATTACK,9,SCARYFACE,13,SMACKDOWN,17,STOMP,21,BULLDOZE,25,CHIPAWAY,29,ROCKBLAST,33,DRILLRUN,37,TAKEDOWN,41,STONEEDGE,45,EARTHQUAKE,49,MEGAHORN,53,HORNDRILL","Height":"1.0","Weight":"115.0","Habitat":"RoughTerrain","Kind":"Spikes","Pokedex":"Once it starts running, it doesn't stop. Its tiny brain makes it so stupid that it can't remember why it started running in the first place.","Evolutions":"RHYDON,Level,42"},{"Name":"Rhydon","InternalName":"RHYDON","Type1":"GROUND","Type2":"ROCK","HiddenAbility":"RECKLESS","Moves":"1,HORNDRILL,1,HORNATTACK,1,TAILWHIP,1,FURYATTACK,1,SCARYFACE,5,FURYATTACK,9,SCARYFACE,13,SMACKDOWN,17,STOMP,21,BULLDOZE,25,CHIPAWAY,29,ROCKBLAST,33,DRILLRUN,37,TAKEDOWN,41,STONEEDGE,42,HAMMERARM,48,EARTHQUAKE,55,MEGAHORN,62,HORNDRILL","Height":"1.9","Weight":"120.0","Habitat":"RoughTerrain","Kind":"Drill","Pokedex":"Its horn, which rotates like a drill, destroys tall buildings with one strike. It stands on its hind legs, and its brain is well developed.","Evolutions":"RHYPERIOR,TradeItem,PROTECTOR"},{"Name":"Chansey","InternalName":"CHANSEY","Type1":"NORMAL","HiddenAbility":"HEALER","Moves":"1,DOUBLEEDGE,1,DEFENSECURL,1,POUND,1,GROWL,5,TAILWHIP,9,REFRESH,12,DOUBLESLAP,16,SOFTBOILED,20,BESTOW,23,MINIMIZE,27,TAKEDOWN,31,SING,34,FLING,38,HEALPULSE,42,EGGBOMB,46,LIGHTSCREEN,50,HEALINGWISH,54,DOUBLEEDGE","Height":"1.1","Weight":"34.6","Habitat":"Urban","Kind":"Egg","Pokedex":"Chansey lay nutritionally excellent eggs every day. The eggs are so delicious, they are eagerly devoured by even those who have lost their appetite.","WildItemCommon":"LUCKYPUNCH","WildItemUncommon":"LUCKYEGG","Evolutions":"BLISSEY,Happiness,"},{"Name":"Tangela","InternalName":"TANGELA","Type1":"GRASS","HiddenAbility":"REGENERATOR","Moves":"1,INGRAIN,1,CONSTRICT,4,SLEEPPOWDER,7,VINEWHIP,10,ABSORB,14,POISONPOWDER,17,BIND,20,GROWTH,23,MEGADRAIN,27,KNOCKOFF,30,STUNSPORE,33,NATURALGIFT,36,GIGADRAIN,38,ANCIENTPOWER,41,SLAM,44,TICKLE,46,WRINGOUT,48,GRASSYTERRAIN,50,POWERWHIP","Height":"1.0","Weight":"35.0","Habitat":"Grassland","Kind":"Vine","Pokedex":"Its vines snap off easily and painlessly if they are grabbed, allowing it to make a quick getaway. The lost vines are replaced by new growth the very next day.","Evolutions":"TANGROWTH,HasMove,ANCIENTPOWER"},{"Name":"Kangaskhan","InternalName":"KANGASKHAN","Type1":"NORMAL","HiddenAbility":"INNERFOCUS","Moves":"1,COMETPUNCH,1,LEER,7,FAKEOUT,10,TAILWHIP,13,BITE,19,DOUBLEHIT,22,RAGE,25,MEGAPUNCH,31,CHIPAWAY,34,DIZZYPUNCH,37,CRUNCH,43,ENDURE,46,OUTRAGE,49,SUCKERPUNCH,50,REVERSAL","Height":"2.2","Weight":"80.0","Habitat":"Grassland","Kind":"Parent","Pokedex":"If you come across a young Kangaskhan playing by itself, never try to catch it. The baby's parent is sure to be in the area, and it will become violently enraged.","Evolutions":null},{"Name":"Horsea","InternalName":"HORSEA","Type1":"WATER","HiddenAbility":"DAMP","Moves":"1,BUBBLE,5,SMOKESCREEN,9,LEER,13,WATERGUN,17,TWISTER,21,BUBBLEBEAM,26,FOCUSENERGY,31,BRINE,36,AGILITY,41,DRAGONPULSE,46,DRAGONDANCE,52,HYDROPUMP","Height":"0.4","Weight":"8.0","Habitat":"Sea","Kind":"Dragon","Pokedex":"By cleverly flicking the fins on its back side to side, it moves in any direction while facing forward. It spits ink to escape if it senses danger.","WildItemUncommon":"DRAGONSCALE","Evolutions":"SEADRA,Level,32"},{"Name":"Seadra","InternalName":"SEADRA","Type1":"WATER","HiddenAbility":"DAMP","Moves":"1,HYDROPUMP,1,BUBBLE,1,SMOKESCREEN,1,LEER,1,WATERGUN,5,SMOKESCREEN,9,LEER,13,WATERGUN,17,TWISTER,21,BUBBLEBEAM,26,FOCUSENERGY,31,BRINE,38,AGILITY,45,DRAGONPULSE,52,DRAGONDANCE,60,HYDROPUMP","Height":"1.2","Weight":"25.0","Habitat":"Sea","Kind":"Dragon","Pokedex":"The poisonous barbs all over its body are highly valued as ingredients for making traditional herbal medicine. It shows no mercy to anything approaching its nest.","WildItemUncommon":"DRAGONSCALE","Evolutions":"KINGDRA,TradeItem,DRAGONSCALE"},{"Name":"Goldeen","InternalName":"GOLDEEN","Type1":"WATER","HiddenAbility":"LIGHTNINGROD","Moves":"1,PECK,1,TAILWHIP,1,WATERSPORT,5,SUPERSONIC,8,HORNATTACK,13,FLAIL,16,WATERPULSE,21,AQUARING,24,FURYATTACK,29,AGILITY,32,WATERFALL,37,HORNDRILL,40,SOAK,45,MEGAHORN","Height":"0.6","Weight":"15.0","Habitat":"WatersEdge","Kind":"Goldfish","Pokedex":"In the springtime, schools of Goldeen can be seen swimming up falls and rivers. It metes out staggering damage with its single horn.","Evolutions":"SEAKING,Level,33"},{"Name":"Seaking","InternalName":"SEAKING","Type1":"WATER","HiddenAbility":"LIGHTNINGROD","Moves":"1,MEGAHORN,1,POISONJAB,1,PECK,1,TAILWHIP,1,WATERSPORT,1,SUPERSONIC,5,SUPERSONIC,8,HORNATTACK,13,FLAIL,16,WATERPULSE,21,AQUARING,24,FURYATTACK,29,AGILITY,32,WATERFALL,40,HORNDRILL,46,SOAK,54,MEGAHORN","Height":"1.3","Weight":"39.0","Habitat":"WatersEdge","Kind":"Goldfish","Pokedex":"It punches holes in boulders on stream- beds. This is a clever innovation that prevents its eggs from being attacked or washed away by the current.","Evolutions":null},{"Name":"Staryu","InternalName":"STARYU","Type1":"WATER","HiddenAbility":"ANALYTIC","Moves":"1,TACKLE,1,HARDEN,4,WATERGUN,7,RAPIDSPIN,10,RECOVER,13,PSYWAVE,16,SWIFT,18,BUBBLEBEAM,22,CAMOUFLAGE,24,GYROBALL,28,BRINE,31,MINIMIZE,35,REFLECTTYPE,37,POWERGEM,40,CONFUSERAY,42,PSYCHIC,46,LIGHTSCREEN,49,COSMICPOWER,53,HYDROPUMP","Height":"0.8","Weight":"34.5","Habitat":"Sea","Kind":"Star Shape","Pokedex":"It gathers with others in the night and makes its red core glow on and off with the twinkling stars. It can regenerate limbs if they are severed from its body.","WildItemCommon":"STARDUST","WildItemUncommon":"STARPIECE","Evolutions":"STARMIE,Item,WATERSTONE"},{"Name":"Starmie","InternalName":"STARMIE","Type1":"WATER","Type2":"PSYCHIC","HiddenAbility":"ANALYTIC","Moves":"1,HYDROPUMP,1,WATERGUN,1,RAPIDSPIN,1,RECOVER,1,SWIFT,40,CONFUSERAY","Height":"1.1","Weight":"80.0","Habitat":"Sea","Kind":"Mysterious","Pokedex":"People in ancient times imagined that Starmie were transformed from the reflections of stars that twinkled on gentle waves at night.","WildItemCommon":"STARDUST","WildItemUncommon":"STARPIECE","Evolutions":null},{"Name":"Mr. Mime","InternalName":"MRMIME","Type1":"PSYCHIC","Type2":"FAIRY","HiddenAbility":"TECHNICIAN","Moves":"1,MISTYTERRAIN,1,MAGICALLEAF,1,QUICKGUARD,1,WIDEGUARD,1,POWERSWAP,1,GUARDSWAP,1,BARRIER,1,CONFUSION,4,COPYCAT,8,MEDITATE,11,DOUBLESLAP,15,MIMIC,15,PSYWAVE,18,ENCORE,22,LIGHTSCREEN,22,REFLECT,25,PSYBEAM,29,SUBSTITUTE,32,RECYCLE,36,TRICK,39,PSYCHIC,43,ROLEPLAY,46,BATONPASS,50,SAFEGUARD","Height":"1.3","Weight":"54.5","Habitat":"Urban","Kind":"Barrier","Pokedex":"A Mr. Mime is a master of pantomime. It can convince others that something unseeable actually exists. Once believed, the imaginary object does become real.","WildItemUncommon":"LEPPABERRY","Evolutions":null},{"Name":"Scyther","InternalName":"SCYTHER","Type1":"BUG","Type2":"FLYING","HiddenAbility":"STEADFAST","Moves":"1,VACUUMWAVE,1,QUICKATTACK,1,LEER,5,FOCUSENERGY,9,PURSUIT,13,FALSESWIPE,17,AGILITY,21,WINGATTACK,25,FURYCUTTER,29,SLASH,33,RAZORWIND,37,DOUBLETEAM,41,XSCISSOR,45,NIGHTSLASH,49,DOUBLEHIT,50,AIRSLASH,57,SWORDSDANCE,61,FEINT","Height":"1.5","Weight":"56.0","Habitat":"Grassland","Kind":"Mantis","Pokedex":"Its blindingly fast speed adds to the sharpness of its twin forearm scythes. The scythes can slice through thick logs in one wicked stroke.","Evolutions":"SCIZOR,TradeItem,METALCOAT"},{"Name":"Jynx","InternalName":"JYNX","Type1":"ICE","Type2":"PSYCHIC","HiddenAbility":"DRYSKIN","Moves":"1,DRAININGKISS,1,PERISHSONG,1,POUND,1,LICK,1,LOVELYKISS,1,POWDERSNOW,5,LICK,8,LOVELYKISS,11,POWDERSNOW,15,DOUBLESLAP,18,ICEPUNCH,21,HEARTSTAMP,25,MEANLOOK,28,FAKETEARS,33,WAKEUPSLAP,39,AVALANCHE,44,BODYSLAM,49,WRINGOUT,55,PERISHSONG,60,BLIZZARD","Height":"1.4","Weight":"40.6","Habitat":"Urban","Kind":"Human Shape","Pokedex":"A Jynx sashays rhythmically as if it were dancing. Its motions are so bouncingly alluring, people seeing it are compelled to shake their hips without noticing.","WildItemCommon":"ASPEARBERRY","WildItemUncommon":"ASPEARBERRY","WildItemRare":"ASPEARBERRY","Evolutions":null},{"Name":"Electabuzz","InternalName":"ELECTABUZZ","Type1":"ELECTRIC","HiddenAbility":"VITALSPIRIT","Moves":"1,QUICKATTACK,1,LEER,1,THUNDERSHOCK,5,THUNDERSHOCK,8,LOWKICK,12,SWIFT,15,SHOCKWAVE,19,THUNDERWAVE,22,ELECTROBALL,26,LIGHTSCREEN,29,THUNDERPUNCH,36,DISCHARGE,42,SCREECH,49,THUNDERBOLT,55,THUNDER","Height":"1.1","Weight":"30.0","Habitat":"Grassland","Kind":"Electric","Pokedex":"When a storm approaches, it competes with others to scale heights that are likely to be stricken by lightning. Some towns use Electabuzz in place of lightning rods.","WildItemUncommon":"ELECTIRIZER","Evolutions":"ELECTIVIRE,TradeItem,ELECTIRIZER"},{"Name":"Magmar","InternalName":"MAGMAR","Type1":"FIRE","HiddenAbility":"VITALSPIRIT","Moves":"1,SMOG,1,LEER,1,EMBER,5,EMBER,8,SMOKESCREEN,12,FEINTATTACK,15,FIRESPIN,19,CLEARSMOG,22,FLAMEBURST,26,CONFUSERAY,29,FIREPUNCH,36,LAVAPLUME,42,SUNNYDAY,49,FLAMETHROWER,55,FIREBLAST","Height":"1.3","Weight":"44.5","Habitat":"Mountain","Kind":"Spitfire","Pokedex":"In battle, it blows out intense flames from all over its body to intimidate its foe. These fiery bursts create heat waves that ignite grass and trees in the area.","WildItemUncommon":"MAGMARIZER","Evolutions":"MAGMORTAR,TradeItem,MAGMARIZER"},{"Name":"Pinsir","InternalName":"PINSIR","Type1":"BUG","HiddenAbility":"MOXIE","Moves":"1,VICEGRIP,1,FOCUSENERGY,4,BIND,8,SEISMICTOSS,11,HARDEN,15,REVENGE,18,VITALTHROW,22,DOUBLEHIT,26,BRICKBREAK,29,SUBMISSION,33,XSCISSOR,36,STORMTHROW,40,SWORDSDANCE,43,THRASH,47,SUPERPOWER,50,GUILLOTINE","Height":"1.5","Weight":"55.0","Habitat":"Forest","Kind":"Stag Beetle","Pokedex":"Their pincers are strong enough to shatter thick logs. Because they dislike cold, Pinsir burrow and sleep under the ground on chilly nights.","Evolutions":null},{"Name":"Tauros","InternalName":"TAUROS","Type1":"NORMAL","HiddenAbility":"SHEERFORCE","Moves":"1,TACKLE,3,TAILWHIP,5,RAGE,8,HORNATTACK,11,SCARYFACE,15,PURSUIT,19,REST,24,PAYBACK,29,WORKUP,35,ZENHEADBUTT,41,TAKEDOWN,48,SWAGGER,50,THRASH,63,GIGAIMPACT","Height":"1.4","Weight":"88.4","Habitat":"Grassland","Kind":"Wild Bull","Pokedex":"It is not satisfied unless it is rampaging at all times. If there is no opponent for Tauros to battle, it will charge at thick trees and knock them down to calm itself.","Evolutions":null},{"Name":"Magikarp","InternalName":"MAGIKARP","Type1":"WATER","HiddenAbility":"RATTLED","Moves":"1,SPLASH,15,TACKLE,30,FLAIL","Height":"0.9","Weight":"10.0","Habitat":"WatersEdge","Kind":"Fish","Pokedex":"Its swimming muscles are weak, so it is easily washed away by currents. In places where water pools, you can see many Magikarp deposited there by the flow.","Evolutions":"GYARADOS,Level,20"},{"Name":"Gyarados","InternalName":"GYARADOS","Type1":"WATER","Type2":"FLYING","HiddenAbility":"MOXIE","Moves":"1,THRASH,20,BITE,23,DRAGONRAGE,26,LEER,29,TWISTER,32,ICEFANG,35,AQUATAIL,38,RAINDANCE,41,CRUNCH,44,HYDROPUMP,47,DRAGONDANCE,50,HYPERBEAM","Height":"6.5","Weight":"235.0","Habitat":"WatersEdge","Kind":"Atrocious","Pokedex":"It is an extremely vicious and violent PokÃ©mon. When humans begin to fight, it will appear and burn everything to the ground with intensely hot flames.","Evolutions":null},{"Name":"Lapras","InternalName":"LAPRAS","Type1":"WATER","Type2":"ICE","HiddenAbility":"HYDRATION","Moves":"1,SING,1,GROWL,1,WATERGUN,4,MIST,7,CONFUSERAY,10,ICESHARD,14,WATERPULSE,18,BODYSLAM,22,RAINDANCE,27,PERISHSONG,32,ICEBEAM,37,BRINE,43,SAFEGUARD,47,HYDROPUMP,50,SHEERCOLD","Height":"2.5","Weight":"220.0","Habitat":"Sea","Kind":"Transport","Pokedex":"People have driven Lapras almost to the point of extinction. In the evenings, it is said to sing plaintively as it seeks what few others of its kind still remain.","Evolutions":null},{"Name":"Ditto","InternalName":"DITTO","Type1":"NORMAL","HiddenAbility":"IMPOSTER","Moves":"1,TRANSFORM","Height":"0.3","Weight":"4.0","Habitat":"Urban","Kind":"Transform","Pokedex":"A Ditto rearranges its cell structure to transform itself. However, if it tries to change based on its memory, it will get details wrong.","WildItemCommon":"QUICKPOWDER","WildItemUncommon":"METALPOWDER","Evolutions":null},{"Name":"Eevee","InternalName":"EEVEE","Type1":"NORMAL","HiddenAbility":"ANTICIPATION","Moves":"1,HELPINGHAND,1,GROWL,1,TACKLE,1,TAILWHIP,5,SANDATTACK,9,BABYDOLLEYES,10,SWIFT,13,QUICKATTACK,17,BITE,20,REFRESH,23,COVET,25,TAKEDOWN,29,CHARM,33,BATONPASS,37,DOUBLEEDGE,41,LASTRESORT,45,TRUMPCARD","Height":"0.3","Weight":"6.5","Habitat":"Urban","Kind":"Evolution","Pokedex":"An Eevee has an unstable genetic makeup that suddenly mutates due to its environment. Radiation from various stones causes this PokÃ©mon to evolve.","Evolutions":"VAPOREON,Item,WATERSTONE,JOLTEON,Item,THUNDERSTONE,FLAREON,Item,FIRESTONE,LEAFEON,Location,28,GLACEON,Location,34,ESPEON,HappinessDay,,UMBREON,HappinessNight,"},{"Name":"Vaporeon","InternalName":"VAPOREON","Type1":"WATER","HiddenAbility":"HYDRATION","Moves":"1,HELPINGHAND,1,TACKLE,1,TAILWHIP,5,SANDATTACK,9,WATERGUN,13,QUICKATTACK,17,WATERPULSE,20,AURORABEAM,25,AQUARING,29,ACIDARMOR,33,HAZE,37,MUDDYWATER,41,LASTRESORT,45,HYDROPUMP","Height":"1.0","Weight":"29.0","Habitat":"Urban","Kind":"Bubble Jet","Pokedex":"Vaporeon underwent a spontaneous mutation and grew fins and gills that allow them to live underwater. They have the ability to freely control water.","Evolutions":null},{"Name":"Jolteon","InternalName":"JOLTEON","Type1":"ELECTRIC","HiddenAbility":"QUICKFEET","Moves":"1,HELPINGHAND,1,TACKLE,1,TAILWHIP,5,SANDATTACK,9,THUNDERSHOCK,13,QUICKATTACK,17,DOUBLEKICK,20,THUNDERFANG,25,PINMISSILE,29,AGILITY,33,THUNDERWAVE,37,DISCHARGE,41,LASTRESORT,45,THUNDER","Height":"0.8","Weight":"24.5","Habitat":"Urban","Kind":"Lightning","Pokedex":"Its cells generate weak power that is amplified by its fur's static electricity to drop thunderbolts. The bristling fur is made of electrically charged needles.","Evolutions":null},{"Name":"Flareon","InternalName":"FLAREON","Type1":"FIRE","HiddenAbility":"GUTS","Moves":"1,HELPINGHAND,1,TACKLE,1,TAILWHIP,5,SANDATTACK,9,EMBER,13,QUICKATTACK,17,BITE,20,FIREFANG,25,FIRESPIN,29,SCARYFACE,33,SMOG,37,LAVAPLUME,41,LASTRESORT,45,FLAREBLITZ","Height":"0.9","Weight":"25.0","Habitat":"Urban","Kind":"Flame","Pokedex":"Flareon's fluffy fur releases heat into the air so that its body does not get excessively hot. Its body temperature can rise to a maximum of 1,650 degrees F.","Evolutions":null},{"Name":"Porygon","InternalName":"PORYGON","Type1":"NORMAL","HiddenAbility":"ANALYTIC","Moves":"1,CONVERSION2,1,TACKLE,1,CONVERSION,1,SHARPEN,7,PSYBEAM,12,AGILITY,18,RECOVER,23,MAGNETRISE,29,SIGNALBEAM,34,RECYCLE,40,DISCHARGE,45,LOCKON,50,TRIATTACK,56,MAGICCOAT,62,ZAPCANNON","Height":"0.8","Weight":"36.5","Habitat":"Urban","Kind":"Virtual","Pokedex":"It is capable of reverting itself entirely back to program data in order to enter cyberspace. A Porygon is copy- protected so it cannot be duplicated.","Evolutions":"PORYGON2,TradeItem,UPGRADE"},{"Name":"Omanyte","InternalName":"OMANYTE","Type1":"ROCK","Type2":"WATER","HiddenAbility":"WEAKARMOR","Moves":"1,CONSTRICT,1,WITHDRAW,7,BITE,10,WATERGUN,16,ROLLOUT,19,LEER,25,MUDSHOT,28,BRINE,34,PROTECT,37,ANCIENTPOWER,43,TICKLE,46,ROCKBLAST,50,SHELLSMASH,55,HYDROPUMP","Height":"0.4","Weight":"7.5","Habitat":"Sea","Kind":"Spiral","Pokedex":"One of the ancient and long-since-extinct PokÃ©mon that have been regenerated from fossils by humans. If attacked, it withdraws into its hard shell.","Evolutions":"OMASTAR,Level,40"},{"Name":"Omastar","InternalName":"OMASTAR","Type1":"ROCK","Type2":"WATER","HiddenAbility":"WEAKARMOR","Moves":"1,HYDROPUMP,1,CONSTRICT,1,WITHDRAW,1,BITE,7,BITE,10,WATERGUN,16,ROLLOUT,19,LEER,25,MUDSHOT,28,BRINE,34,PROTECT,37,ANCIENTPOWER,40,SPIKECANNON,48,TICKLE,56,ROCKBLAST,67,SHELLSMASH,75,HYDROPUMP","Height":"1.0","Weight":"35.0","Habitat":"Sea","Kind":"Spiral","Pokedex":"An Omastar uses its tentacles to capture its prey. It is believed to have become extinct because its shell grew too large, making its movements slow and ponderous.","Evolutions":null},{"Name":"Kabuto","InternalName":"KABUTO","Type1":"ROCK","Type2":"WATER","HiddenAbility":"WEAKARMOR","Moves":"1,SCRATCH,1,HARDEN,6,ABSORB,11,LEER,16,MUDSHOT,21,SANDATTACK,26,ENDURE,31,AQUAJET,36,MEGADRAIN,41,METALSOUND,46,ANCIENTPOWER,50,WRINGOUT","Height":"0.5","Weight":"11.5","Habitat":"Sea","Kind":"Shellfish","Pokedex":"It is a PokÃ©mon that has been regenerated from a fossil. However, in rare cases, living examples have been discovered. Kabuto have not changed for 300 million years.","Evolutions":"KABUTOPS,Level,40"},{"Name":"Kabutops","InternalName":"KABUTOPS","Type1":"ROCK","Type2":"WATER","HiddenAbility":"WEAKARMOR","Moves":"1,NIGHTSLASH,1,FEINT,1,SCRATCH,1,HARDEN,1,ABSORB,1,LEER,6,ABSORB,11,LEER,16,MUDSHOT,21,SANDATTACK,26,ENDURE,31,AQUAJET,36,MEGADRAIN,40,SLASH,45,METALSOUND,54,ANCIENTPOWER,63,WRINGOUT,72,NIGHTSLASH","Height":"1.3","Weight":"40.5","Habitat":"Sea","Kind":"Shellfish","Pokedex":"Kabutops once swam underwater to hunt for prey. It was apparently evolving from being a water dweller to living on land as evident from changes in its gills and legs.","Evolutions":null},{"Name":"Aerodactyl","InternalName":"AERODACTYL","Type1":"ROCK","Type2":"FLYING","HiddenAbility":"UNNERVE","Moves":"1,IRONHEAD,1,ICEFANG,1,FIREFANG,1,THUNDERFANG,1,WINGATTACK,1,SUPERSONIC,1,BITE,1,SCARYFACE,9,ROAR,17,AGILITY,25,ANCIENTPOWER,33,CRUNCH,41,TAKEDOWN,49,SKYDROP,57,IRONHEAD,65,HYPERBEAM,73,ROCKSLIDE,81,GIGAIMPACT","Height":"1.8","Weight":"59.0","Habitat":"Mountain","Kind":"Fossil","Pokedex":"Aerodactyl is a PokÃ©mon from the age of dinosaurs. It was regenerated from DNA extracted from amber. It is imagined to have been the king of the skies.","Evolutions":null},{"Name":"Snorlax","InternalName":"SNORLAX","Type1":"NORMAL","HiddenAbility":"GLUTTONY","Moves":"1,TACKLE,4,DEFENSECURL,9,AMNESIA,12,LICK,17,CHIPAWAY,20,YAWN,25,BODYSLAM,28,REST,28,SNORE,33,SLEEPTALK,36,ROLLOUT,41,BLOCK,44,BELLYDRUM,49,CRUNCH,50,HEAVYSLAM,57,GIGAIMPACT","Height":"2.1","Weight":"460.0","Habitat":"Mountain","Kind":"Sleeping","Pokedex":"Snorlax's typical day consists of nothing more than eating and sleeping. It is such a docile PokÃ©mon that there are children who use its big belly as a place to play.","WildItemCommon":"LEFTOVERS","WildItemUncommon":"LEFTOVERS","WildItemRare":"LEFTOVERS","Evolutions":null},{"Name":"Articuno","InternalName":"ARTICUNO","Type1":"ICE","Type2":"FLYING","HiddenAbility":"SNOWCLOAK","Moves":"1,ROOST,1,HURRICANE,1,FREEZEDRY,1,TAILWIND,1,SHEERCOLD,1,GUST,1,POWDERSNOW,8,MIST,15,ICESHARD,22,MINDREADER,29,ANCIENTPOWER,36,AGILITY,43,ICEBEAM,50,REFLECT,57,HAIL,64,TAILWIND,71,BLIZZARD,78,SHEERCOLD,85,ROOST,92,HURRICANE","Height":"1.7","Weight":"55.4","Habitat":"Rare","Kind":"Freeze","Pokedex":"Articuno is a legendary bird PokÃ©mon that can control ice. The flapping of its wings chills the air. As a result, it is said that when this PokÃ©mon flies, snow will fall.","Evolutions":null},{"Name":"Zapdos","InternalName":"ZAPDOS","Type1":"ELECTRIC","Type2":"FLYING","HiddenAbility":"LIGHTNINGROD","Moves":"1,ROOST,1,ZAPCANNON,1,DRILLPECK,1,PECK,1,THUNDERSHOCK,8,THUNDERWAVE,15,DETECT,22,PLUCK,29,ANCIENTPOWER,36,CHARGE,43,AGILITY,50,DISCHARGE,57,RAINDANCE,64,LIGHTSCREEN,71,DRILLPECK,78,THUNDER,85,ROOST,92,ZAPCANNON","Height":"1.6","Weight":"52.6","Habitat":"Rare","Kind":"Electric","Pokedex":"Zapdos is a legendary bird PokÃ©mon that has the ability to control electricity. It usually lives in thunderclouds. It gains power if it is stricken by lightning bolts.","Evolutions":null},{"Name":"Moltres","InternalName":"MOLTRES","Type1":"FIRE","Type2":"FLYING","HiddenAbility":"FLAMEBODY","Moves":"1,ROOST,1,HURRICANE,1,SKYATTACK,1,HEATWAVE,1,WINGATTACK,1,EMBER,8,FIRESPIN,15,AGILITY,22,ENDURE,29,ANCIENTPOWER,36,FLAMETHROWER,43,SAFEGUARD,50,AIRSLASH,57,SUNNYDAY,64,HEATWAVE,71,SOLARBEAM,78,SKYATTACK,85,ROOST,92,HURRICANE","Height":"2.0","Weight":"60.0","Habitat":"Rare","Kind":"Flame","Pokedex":"Moltres is a legendary bird PokÃ©mon that can control fire. If injured, it is said to dip its body in the molten magma of a volcano to burn and heal itself.","Evolutions":null},{"Name":"Dratini","InternalName":"DRATINI","Type1":"DRAGON","HiddenAbility":"MARVELSCALE","Moves":"1,WRAP,1,LEER,5,THUNDERWAVE,11,TWISTER,15,DRAGONRAGE,21,SLAM,25,AGILITY,31,DRAGONTAIL,35,AQUATAIL,41,DRAGONRUSH,45,SAFEGUARD,51,DRAGONDANCE,55,OUTRAGE,61,HYPERBEAM","Height":"1.8","Weight":"3.3","Habitat":"WatersEdge","Kind":"Dragon","Pokedex":"A Dratini continually molts and sloughs off its old skin. It does so because the life energy within its body steadily builds to reach uncontrollable levels.","WildItemUncommon":"DRAGONSCALE","Evolutions":"DRAGONAIR,Level,30"},{"Name":"Dragonair","InternalName":"DRAGONAIR","Type1":"DRAGON","HiddenAbility":"MARVELSCALE","Moves":"1,WRAP,1,LEER,1,THUNDERWAVE,1,TWISTER,5,THUNDERWAVE,11,TWISTER,15,DRAGONRAGE,21,SLAM,25,AGILITY,33,DRAGONTAIL,39,AQUATAIL,47,DRAGONRUSH,53,SAFEGUARD,61,DRAGONDANCE,67,OUTRAGE,75,HYPERBEAM","Height":"4.0","Weight":"16.5","Habitat":"WatersEdge","Kind":"Dragon","Pokedex":"A Dragonair stores an enormous amount of energy inside its body. It is said to alter the weather around it by loosing energy from the crystals on its neck and tail.","WildItemUncommon":"DRAGONSCALE","Evolutions":"DRAGONITE,Level,55"},{"Name":"Dragonite","InternalName":"DRAGONITE","Type1":"DRAGON","Type2":"FLYING","HiddenAbility":"MULTISCALE","Moves":"1,HURRICANE,1,FIREPUNCH,1,THUNDERPUNCH,1,ROOST,1,WRAP,1,LEER,1,THUNDERWAVE,1,TWISTER,5,THUNDERWAVE,11,TWISTER,15,DRAGONRAGE,21,SLAM,25,AGILITY,33,DRAGONTAIL,39,AQUATAIL,47,DRAGONRUSH,53,SAFEGUARD,55,WINGATTACK,61,DRAGONDANCE,67,OUTRAGE,75,HYPERBEAM,81,HURRICANE","Height":"2.2","Weight":"210.0","Habitat":"WatersEdge","Kind":"Dragon","Pokedex":"It can circle the globe in just 16 hours. It is a kindhearted PokÃ©mon that leads lost and foundering ships in a storm to the safety of land.","WildItemUncommon":"DRAGONSCALE","Evolutions":null},{"Name":"Mewtwo","InternalName":"MEWTWO","Type1":"PSYCHIC","HiddenAbility":"UNNERVE","Moves":"1,CONFUSION,1,DISABLE,1,SAFEGUARD,8,SWIFT,15,FUTURESIGHT,22,PSYCHUP,29,MIRACLEEYE,36,PSYCHOCUT,43,POWERSWAP,43,GUARDSWAP,50,RECOVER,57,PSYCHIC,64,BARRIER,70,AURASPHERE,79,AMNESIA,86,MIST,93,MEFIRST,100,PSYSTRIKE","Height":"2.0","Weight":"122.0","Habitat":"Rare","Kind":"Genetic","Pokedex":"A PokÃ©mon that was created by genetic manipulation. However, even though the scientific power of humans made its body, they failed to give it a warm heart.","Evolutions":null},{"Name":"Mew","InternalName":"MEW","Type1":"PSYCHIC","Moves":"1,POUND,1,REFLECTTYPE,1,TRANSFORM,10,MEGAPUNCH,20,METRONOME,30,PSYCHIC,40,BARRIER,50,ANCIENTPOWER,60,AMNESIA,70,MEFIRST,80,BATONPASS,90,NASTYPLOT,100,AURASPHERE","Height":"0.4","Weight":"4.0","Habitat":"Rare","Kind":"New Species","Pokedex":"A Mew is said to possess the genes of all PokÃ©mon. It is capable of making itself invisible at will, so it entirely avoids notice even if it approaches people.","WildItemCommon":"LUMBERRY","WildItemUncommon":"LUMBERRY","WildItemRare":"LUMBERRY","Evolutions":null},{"Name":"Chikorita","InternalName":"CHIKORITA","Type1":"GRASS","HiddenAbility":"LEAFGUARD","Moves":"1,TACKLE,1,GROWL,6,RAZORLEAF,9,POISONPOWDER,12,SYNTHESIS,17,REFLECT,20,MAGICALLEAF,23,NATURALGIFT,28,SWEETSCENT,31,LIGHTSCREEN,34,BODYSLAM,39,SAFEGUARD,42,AROMATHERAPY,45,SOLARBEAM","Height":"0.9","Weight":"6.4","Habitat":"Grassland","Kind":"Leaf","Pokedex":"It waves its leaf around to keep foes at bay. However, a sweet fragrance also wafts from the leaf, creating a friendly atmosphere that becalms the battlers.","Evolutions":"BAYLEEF,Level,16"},{"Name":"Bayleef","InternalName":"BAYLEEF","Type1":"GRASS","HiddenAbility":"LEAFGUARD","Moves":"1,TACKLE,1,GROWL,1,RAZORLEAF,1,POISONPOWDER,6,RAZORLEAF,9,POISONPOWDER,12,SYNTHESIS,18,REFLECT,22,MAGICALLEAF,26,NATURALGIFT,32,SWEETSCENT,36,LIGHTSCREEN,40,BODYSLAM,46,SAFEGUARD,50,AROMATHERAPY,54,SOLARBEAM","Height":"1.2","Weight":"15.8","Habitat":"Grassland","Kind":"Leaf","Pokedex":"A Bayleef's neck is ringed by curled-up leaves. Inside each leaf is a small tree shoot. The fragrance of this shoot makes people peppy.","Evolutions":"MEGANIUM,Level,32"},{"Name":"Meganium","InternalName":"MEGANIUM","Type1":"GRASS","HiddenAbility":"LEAFGUARD","Moves":"1,PETALBLIZZARD,1,TACKLE,1,GROWL,1,RAZORLEAF,1,POISONPOWDER,6,RAZORLEAF,9,POISONPOWDER,12,SYNTHESIS,18,REFLECT,22,MAGICALLEAF,26,NATURALGIFT,32,PETALDANCE,34,SWEETSCENT,40,LIGHTSCREEN,46,BODYSLAM,54,SAFEGUARD,60,AROMATHERAPY,66,SOLARBEAM,70,PETALBLIZZARD","Height":"1.8","Weight":"100.5","Habitat":"Grassland","Kind":"Herb","Pokedex":"The fragrance of a Meganium's flower soothes and calms emotions. In battle, it gives off more of its becalming scent to blunt the foe's fighting spirit.","Evolutions":null},{"Name":"Cyndaquil","InternalName":"CYNDAQUIL","Type1":"FIRE","HiddenAbility":"FLASHFIRE","Moves":"1,TACKLE,1,LEER,6,SMOKESCREEN,10,EMBER,13,QUICKATTACK,19,FLAMEWHEEL,22,DEFENSECURL,28,FLAMECHARGE,31,SWIFT,37,LAVAPLUME,40,FLAMETHROWER,46,INFERNO,49,ROLLOUT,55,DOUBLEEDGE,58,ERUPTION","Height":"0.5","Weight":"7.9","Habitat":"Grassland","Kind":"Fire Mouse","Pokedex":"It flares flames from its back to protect itself. The fire burns vigorously if the PokÃ©mon is angry. When it is tired, it sputters with incomplete combustion.","Evolutions":"QUILAVA,Level,14"},{"Name":"Quilava","InternalName":"QUILAVA","Type1":"FIRE","HiddenAbility":"FLASHFIRE","Moves":"1,TACKLE,1,LEER,1,SMOKESCREEN,6,SMOKESCREEN,10,EMBER,13,QUICKATTACK,20,FLAMEWHEEL,24,DEFENSECURL,31,SWIFT,35,FLAMECHARGE,42,LAVAPLUME,46,FLAMETHROWER,53,INFERNO,57,ROLLOUT,64,DOUBLEEDGE,68,ERUPTION","Height":"0.9","Weight":"19.0","Habitat":"Grassland","Kind":"Volcano","Pokedex":"It intimidates foes with intense gusts of flames and superheated air. Its quick nimbleness lets it dodge attacks even while scorching an enemy.","Evolutions":"TYPHLOSION,Level,36"},{"Name":"Typhlosion","InternalName":"TYPHLOSION","Type1":"FIRE","HiddenAbility":"FLASHFIRE","Moves":"1,ERUPTION,1,DOUBLEEDGE,1,GYROBALL,1,TACKLE,1,LEER,1,SMOKESCREEN,1,EMBER,6,SMOKESCREEN,10,EMBER,13,QUICKATTACK,20,FLAMEWHEEL,24,DEFENSECURL,31,SWIFT,35,FLAMECHARGE,43,LAVAPLUME,48,FLAMETHROWER,56,INFERNO,61,ROLLOUT,69,DOUBLEEDGE,74,ERUPTION","Height":"1.7","Weight":"79.5","Habitat":"Grassland","Kind":"Volcano","Pokedex":"It can hide behind a shimmering heat haze that it creates using its intense flames. Typhlosion create blazing explosive blasts that burn everything to cinders.","Evolutions":null},{"Name":"Totodile","InternalName":"TOTODILE","Type1":"WATER","HiddenAbility":"SHEERFORCE","Moves":"1,SCRATCH,1,LEER,6,WATERGUN,8,RAGE,13,BITE,15,SCARYFACE,20,ICEFANG,22,FLAIL,27,CRUNCH,29,CHIPAWAY,34,SLASH,36,SCREECH,41,THRASH,43,AQUATAIL,48,SUPERPOWER,50,HYDROPUMP","Height":"0.6","Weight":"9.5","Habitat":"WatersEdge","Kind":"Big Jaw","Pokedex":"Despite its small body, Totodile's jaws are very powerful. While it may think it is just playfully nipping, its bite has enough strength to cause serious injury.","Evolutions":"CROCONAW,Level,18"},{"Name":"Croconaw","InternalName":"CROCONAW","Type1":"WATER","HiddenAbility":"SHEERFORCE","Moves":"1,SCRATCH,1,LEER,1,WATERGUN,6,WATERGUN,8,RAGE,13,BITE,15,SCARYFACE,21,ICEFANG,24,FLAIL,30,CRUNCH,33,CHIPAWAY,39,SLASH,42,SCREECH,48,THRASH,51,AQUATAIL,57,SUPERPOWER,60,HYDROPUMP","Height":"1.1","Weight":"25.0","Habitat":"WatersEdge","Kind":"Big Jaw","Pokedex":"Once its jaws clamp down on its foe, it will absolutely not let go. Because the tips of its fangs are forked back like fishhooks, they become irremovably embedded.","Evolutions":"FERALIGATR,Level,30"},{"Name":"Feraligatr","InternalName":"FERALIGATR","Type1":"WATER","HiddenAbility":"SHEERFORCE","Moves":"1,SCRATCH,1,LEER,1,WATERGUN,1,RAGE,6,WATERGUN,8,RAGE,13,BITE,15,SCARYFACE,21,ICEFANG,24,FLAIL,30,AGILITY,32,CRUNCH,37,CHIPAWAY,45,SLASH,50,SCREECH,58,THRASH,63,AQUATAIL,71,SUPERPOWER,76,HYDROPUMP","Height":"2.3","Weight":"88.8","Habitat":"WatersEdge","Kind":"Big Jaw","Pokedex":"It opens its huge mouth to intimidate enemies. In battle, it runs using its thick and powerful hind legs to charge the foe with incredible speed.","Evolutions":null},{"Name":"Sentret","InternalName":"SENTRET","Type1":"NORMAL","HiddenAbility":"FRISK","Moves":"1,SCRATCH,1,FORESIGHT,4,DEFENSECURL,7,QUICKATTACK,13,FURYSWIPES,16,HELPINGHAND,19,FOLLOWME,25,SLAM,28,REST,31,SUCKERPUNCH,36,AMNESIA,39,BATONPASS,42,MEFIRST,47,HYPERVOICE","Height":"0.8","Weight":"6.0","Habitat":"Grassland","Kind":"Scout","Pokedex":"They take turns standing guard when it is time to sleep. The sentry awakens the others if it senses danger. If one becomes separated, it turns sleepless with fear.","WildItemUncommon":"ORANBERRY","Evolutions":"FURRET,Level,15"},{"Name":"Furret","InternalName":"FURRET","Type1":"NORMAL","HiddenAbility":"FRISK","Moves":"1,SCRATCH,1,FORESIGHT,1,DEFENSECURL,1,QUICKATTACK,4,DEFENSECURL,7,QUICKATTACK,13,FURYSWIPES,17,HELPINGHAND,21,FOLLOWME,28,SLAM,32,REST,36,SUCKERPUNCH,42,AMNESIA,46,BATONPASS,50,MEFIRST,56,HYPERVOICE","Height":"1.8","Weight":"32.5","Habitat":"Grassland","Kind":"Long Body","Pokedex":"A Furret has a very slim build. When under attack, it can squirm through narrow spaces and get away. In spite of its short limbs, it is very nimble and fleet.","WildItemCommon":"ORANBERRY","WildItemUncommon":"SITRUSBERRY","Evolutions":null},{"Name":"Hoothoot","InternalName":"HOOTHOOT","Type1":"NORMAL","Type2":"FLYING","HiddenAbility":"TINTEDLENS","Moves":"1,TACKLE,1,GROWL,1,FORESIGHT,5,HYPNOSIS,9,PECK,13,UPROAR,17,REFLECT,21,CONFUSION,25,ECHOEDVOICE,29,TAKEDOWN,33,AIRSLASH,37,ZENHEADBUTT,41,SYNCHRONOISE,45,EXTRASENSORY,49,PSYCHOSHIFT,53,ROOST,57,DREAMEATER","Height":"0.7","Weight":"21.2","Habitat":"Forest","Kind":"Owl","Pokedex":"It has an internal organ that senses the earth's rotation. Using this special organ, a Hoothoot begins hooting at precisely the same time every day.","Evolutions":"NOCTOWL,Level,20"},{"Name":"Noctowl","InternalName":"NOCTOWL","Type1":"NORMAL","Type2":"FLYING","HiddenAbility":"TINTEDLENS","Moves":"1,DREAMEATER,1,SKYATTACK,1,TACKLE,1,GROWL,1,FORESIGHT,1,HYPNOSIS,5,HYPNOSIS,9,PECK,13,UPROAR,17,REFLECT,22,CONFUSION,27,ECHOEDVOICE,32,TAKEDOWN,37,AIRSLASH,42,ZENHEADBUTT,47,SYNCHRONOISE,52,EXTRASENSORY,57,PSYCHOSHIFT,62,ROOST,67,DREAMEATER","Height":"1.6","Weight":"40.8","Habitat":"Forest","Kind":"Owl","Pokedex":"It unfailingly catches prey in darkness. Noctowl owe their success to superior vision that allows them to see in minimal light, and to their supple and silent wings.","Evolutions":null},{"Name":"Ledyba","InternalName":"LEDYBA","Type1":"BUG","Type2":"FLYING","HiddenAbility":"RATTLED","Moves":"1,TACKLE,6,SUPERSONIC,9,COMETPUNCH,14,LIGHTSCREEN,14,REFLECT,14,SAFEGUARD,17,MACHPUNCH,22,BATONPASS,25,SILVERWIND,30,AGILITY,33,SWIFT,38,DOUBLEEDGE,41,BUGBUZZ","Height":"1.0","Weight":"10.8","Habitat":"Forest","Kind":"Five Star","Pokedex":"Ledyba communicate using a fluid that they secrete from where the legs join the body. They are said to convey feelings to others by altering the fluid's scent.","Evolutions":"LEDIAN,Level,18"},{"Name":"Ledian","InternalName":"LEDIAN","Type1":"BUG","Type2":"FLYING","HiddenAbility":"IRONFIST","Moves":"1,TACKLE,1,SUPERSONIC,1,COMETPUNCH,6,SUPERSONIC,9,COMETPUNCH,14,LIGHTSCREEN,14,REFLECT,14,SAFEGUARD,17,MACHPUNCH,24,BATONPASS,29,SILVERWIND,36,AGILITY,41,SWIFT,48,DOUBLEEDGE,53,BUGBUZZ","Height":"1.4","Weight":"35.6","Habitat":"Forest","Kind":"Five Star","Pokedex":"It is said that in lands with clean air, where the stars fill the sky, there live many Ledian. For good reason, they use the light of the stars as energy.","Evolutions":null},{"Name":"Spinarak","InternalName":"SPINARAK","Type1":"BUG","Type2":"POISON","HiddenAbility":"SNIPER","Moves":"1,POISONSTING,1,STRINGSHOT,5,SCARYFACE,8,CONSTRICT,12,LEECHLIFE,15,NIGHTSHADE,19,SHADOWSNEAK,22,FURYSWIPES,26,SUCKERPUNCH,29,SPIDERWEB,33,AGILITY,36,PINMISSILE,40,PSYCHIC,43,POISONJAB,47,CROSSPOISON,50,STICKYWEB","Height":"0.5","Weight":"8.5","Habitat":"Forest","Kind":"String Spit","Pokedex":"The web it spins can be considered its second nervous system. It is said that a Spinarak determines its prey by the tiny vibrations it feels through the web.","Evolutions":"ARIADOS,Level,22"},{"Name":"Ariados","InternalName":"ARIADOS","Type1":"BUG","Type2":"POISON","HiddenAbility":"SNIPER","Moves":"1,VENOMDRENCH,1,FELLSTINGER,1,BUGBITE,1,POISONSTING,1,STRINGSHOT,1,SCARYFACE,1,CONSTRICT,5,SCARYFACE,8,CONSTRICT,12,LEECHLIFE,15,NIGHTSHADE,19,SHADOWSNEAK,23,FURYSWIPES,28,SUCKERPUNCH,32,SPIDERWEB,37,AGILITY,41,PINMISSILE,46,PSYCHIC,50,POISONJAB,55,CROSSPOISON,58,STICKYWEB","Height":"1.1","Weight":"33.5","Habitat":"Forest","Kind":"Long Leg","Pokedex":"Its feet are tipped with tiny hooked claws that enable it to scuttle on ceilings and vertical walls. It constricts its foe with thin and strong silk webbing.","Evolutions":null},{"Name":"Crobat","InternalName":"CROBAT","Type1":"POISON","Type2":"FLYING","HiddenAbility":"INFILTRATOR","Moves":"1,CROSSPOISON,1,SCREECH,1,LEECHLIFE,1,SUPERSONIC,1,ASTONISH,1,BITE,5,SUPERSONIC,7,ASTONISH,11,BITE,13,WINGATTACK,17,CONFUSERAY,19,AIRCUTTER,24,SWIFT,27,POISONFANG,32,MEANLOOK,35,ACROBATICS,40,HAZE,43,VENOSHOCK,48,AIRSLASH,51,QUICKGUARD","Height":"1.8","Weight":"75.0","Habitat":"Cave","Kind":"Bat","Pokedex":"Over the course of evolution, its hind legs turned into wings. By alternately resting its front and rear wings, it can fly all day without having to stop.","Evolutions":null},{"Name":"Chinchou","InternalName":"CHINCHOU","Type1":"WATER","Type2":"ELECTRIC","HiddenAbility":"WATERABSORB","Moves":"1,BUBBLE,1,SUPERSONIC,6,THUNDERWAVE,9,ELECTROBALL,12,WATERGUN,17,CONFUSERAY,20,BUBBLEBEAM,23,SPARK,28,SIGNALBEAM,31,FLAIL,34,DISCHARGE,39,TAKEDOWN,42,AQUARING,45,HYDROPUMP,47,IONDELUGE,50,CHARGE","Height":"0.5","Weight":"12.0","Habitat":"Sea","Kind":"Angler","Pokedex":"When it senses danger, it discharges positive and negative electricity from its two antennae. It lives in depths beyond sunlight's reach.","WildItemUncommon":"DEEPSEASCALE","Evolutions":"LANTURN,Level,27"},{"Name":"Lanturn","InternalName":"LANTURN","Type1":"WATER","Type2":"ELECTRIC","HiddenAbility":"WATERABSORB","Moves":"1,EERIEIMPULSE,1,BUBBLE,1,SUPERSONIC,1,THUNDERWAVE,1,ELECTROBALL,6,THUNDERWAVE,9,ELECTROBALL,12,WATERGUN,17,CONFUSERAY,20,BUBBLEBEAM,23,SPARK,27,STOCKPILE,27,SWALLOW,27,SPITUP,29,SIGNALBEAM,33,FLAIL,37,DISCHARGE,43,TAKEDOWN,47,AQUARING,51,HYDROPUMP,54,IONDELUGE,58,CHARGE","Height":"1.2","Weight":"22.5","Habitat":"Sea","Kind":"Light","Pokedex":"The light-emitting orbs on its back are very bright. They are formed from a part of its dorsal fin. This PokÃ©mon illuminates the inky darkness of deep seas.","WildItemUncommon":"DEEPSEASCALE","Evolutions":null},{"Name":"Pichu","InternalName":"PICHU","Type1":"ELECTRIC","HiddenAbility":"LIGHTNINGROD","Moves":"1,THUNDERSHOCK,1,CHARM,5,TAILWHIP,10,SWEETKISS,13,NASTYPLOT,18,THUNDERWAVE","Height":"0.3","Weight":"2.0","Habitat":"Forest","Kind":"Tiny Mouse","Pokedex":"It is still inept at retaining electricity. When it is startled, it discharges power accidentally. It gets better at holding power as it grows older.","FormNames":",Spiky-Eared","WildItemCommon":"ORANBERRY","Evolutions":"PIKACHU,Happiness,"},{"Name":"Cleffa","InternalName":"CLEFFA","Type1":"FAIRY","HiddenAbility":"FRIENDGUARD","Moves":"1,POUND,1,CHARM,4,ENCORE,7,SING,10,SWEETKISS,13,COPYCAT,16,MAGICALLEAF","Height":"0.3","Weight":"3.0","Habitat":"Mountain","Kind":"Star Shape","Pokedex":"On nights with many shooting stars, Cleffa can be seen dancing in a ring. They dance until daybreak, when they quench their thirst with the morning dew.","WildItemCommon":"LEPPABERRY","WildItemUncommon":"MOONSTONE","WildItemRare":"COMETSHARD","Evolutions":"CLEFAIRY,Happiness,"},{"Name":"Igglybuff","InternalName":"IGGLYBUFF","Type1":"NORMAL","Type2":"FAIRY","HiddenAbility":"FRIENDGUARD","Moves":"1,SING,1,CHARM,3,DEFENSECURL,5,POUND,9,SWEETKISS,11,COPYCAT","Height":"0.3","Weight":"1.0","Habitat":"Grassland","Kind":"Balloon","Pokedex":"Its soft and pliable body is very bouncy. When it sings continuously with all its might, its body steadily turns a deepening pink color.","Evolutions":"JIGGLYPUFF,Happiness,"},{"Name":"Togepi","InternalName":"TOGEPI","Type1":"FAIRY","HiddenAbility":"SUPERLUCK","Moves":"1,GROWL,1,CHARM,5,METRONOME,9,SWEETKISS,13,YAWN,17,ENCORE,21,FOLLOWME,25,BESTOW,29,WISH,33,ANCIENTPOWER,37,SAFEGUARD,41,BATONPASS,45,DOUBLEEDGE,49,LASTRESORT,53,AFTERYOU","Height":"0.3","Weight":"1.5","Habitat":"Forest","Kind":"Spike Ball","Pokedex":"As its energy, it uses the feelings of compassion and pleasure exuded by people and PokÃ©mon. It stores up happy feelings in its shell, then shares them out.","Evolutions":"TOGETIC,Happiness,"},{"Name":"Togetic","InternalName":"TOGETIC","Type1":"FAIRY","Type2":"FLYING","HiddenAbility":"SUPERLUCK","Moves":"1,MAGICALLEAF,1,GROWL,1,CHARM,1,METRONOME,1,SWEETKISS,5,METRONOME,9,SWEETKISS,13,YAWN,14,FAIRYWIND,17,ENCORE,21,FOLLOWME,25,BESTOW,29,WISH,33,ANCIENTPOWER,37,SAFEGUARD,41,BATONPASS,45,DOUBLEEDGE,49,LASTRESORT,53,AFTERYOU","Height":"0.6","Weight":"3.2","Habitat":"Forest","Kind":"Happiness","Pokedex":"It is said to be a PokÃ©mon that brings good fortune. When it spots someone who is pure of heart, a Togetic appears and shares its happiness with that person.","Evolutions":"TOGEKISS,Item,SHINYSTONE"},{"Name":"Natu","InternalName":"NATU","Type1":"PSYCHIC","Type2":"FLYING","HiddenAbility":"MAGICBOUNCE","Moves":"1,PECK,1,LEER,6,NIGHTSHADE,9,TELEPORT,12,LUCKYCHANT,17,STOREDPOWER,20,OMINOUSWIND,23,CONFUSERAY,28,WISH,33,PSYCHIC,36,MIRACLEEYE,39,PSYCHOSHIFT,44,FUTURESIGHT,47,POWERSWAP,47,GUARDSWAP,50,MEFIRST","Height":"0.2","Weight":"2.0","Habitat":"Forest","Kind":"Tiny Bird","Pokedex":"It runs up short trees that grow on the savanna to peck at new shoots. A Natu's eyes look as if they are always observing something.","Evolutions":"XATU,Level,25"},{"Name":"Xatu","InternalName":"XATU","Type1":"PSYCHIC","Type2":"FLYING","HiddenAbility":"MAGICBOUNCE","Moves":"1,TAILWIND,1,PECK,1,LEER,1,NIGHTSHADE,1,TELEPORT,6,NIGHTSHADE,9,TELEPORT,12,LUCKYCHANT,17,STOREDPOWER,20,OMINOUSWIND,23,CONFUSERAY,25,AIRSLASH,29,WISH,35,PSYCHIC,39,MIRACLEEYE,43,PSYCHOSHIFT,49,FUTURESIGHT,53,POWERSWAP,53,GUARDSWAP,57,MEFIRST","Height":"1.5","Weight":"15.0","Habitat":"Forest","Kind":"Mystic","Pokedex":"It has the enigmatic power of foreseeing the future. Some people in different lands have long believed that Xatu are emissaries from another world.","Evolutions":null},{"Name":"Mareep","InternalName":"MAREEP","Type1":"ELECTRIC","HiddenAbility":"PLUS","Moves":"1,TACKLE,1,GROWL,4,THUNDERWAVE,8,THUNDERSHOCK,11,COTTONSPORE,15,CHARGE,18,TAKEDOWN,22,ELECTROBALL,25,CONFUSERAY,29,POWERGEM,32,DISCHARGE,36,COTTONGUARD,39,SIGNALBEAM,43,LIGHTSCREEN,46,THUNDER","Height":"0.6","Weight":"7.8","Habitat":"Grassland","Kind":"Wool","Pokedex":"Its fluffy wool rubs together and builds a static charge. The more energy is charged, the more brightly the lightbulb at the tip of its tail glows.","Evolutions":"FLAAFFY,Level,15"},{"Name":"Flaaffy","InternalName":"FLAAFFY","Type1":"ELECTRIC","HiddenAbility":"PLUS","Moves":"1,TACKLE,1,GROWL,1,THUNDERWAVE,1,THUNDERSHOCK,4,THUNDERWAVE,8,THUNDERSHOCK,11,COTTONSPORE,16,CHARGE,20,TAKEDOWN,25,ELECTROBALL,29,CONFUSERAY,34,POWERGEM,38,DISCHARGE,43,COTTONGUARD,47,SIGNALBEAM,52,LIGHTSCREEN,56,THUNDER","Height":"0.8","Weight":"13.3","Habitat":"Grassland","Kind":"Wool","Pokedex":"Its fleece quality changes to generate strong static electricity with a small amount of wool. The bare, slick parts of its hide are shielded against electricity.","Evolutions":"AMPHAROS,Level,30"},{"Name":"Ampharos","InternalName":"AMPHAROS","Type1":"ELECTRIC","HiddenAbility":"PLUS","Moves":"1,ZAPCANNON,1,MAGNETICFLUX,1,IONDELUGE,1,DRAGONPULSE,1,FIREPUNCH,1,TACKLE,1,GROWL,1,THUNDERWAVE,1,THUNDERSHOCK,4,THUNDERWAVE,8,THUNDERSHOCK,11,COTTONSPORE,16,CHARGE,20,TAKEDOWN,25,ELECTROBALL,29,CONFUSERAY,30,THUNDERPUNCH,35,POWERGEM,40,DISCHARGE,46,COTTONGUARD,51,SIGNALBEAM,57,LIGHTSCREEN,62,THUNDER,65,DRAGONPULSE","Height":"1.4","Weight":"61.5","Habitat":"Grassland","Kind":"Light","Pokedex":"It gives off so much light that it can be seen even from space. People in the old days used its light to send signals back and forth with others far away.","Evolutions":null},{"Name":"Bellossom","InternalName":"BELLOSSOM","Type1":"GRASS","HiddenAbility":"HEALER","Moves":"1,LEAFSTORM,1,LEAFBLADE,1,MEGADRAIN,1,SWEETSCENT,1,STUNSPORE,1,SUNNYDAY,24,MAGICALLEAF,49,PETALBLIZZARD,64,LEAFSTORM","Height":"0.4","Weight":"5.8","Habitat":"Grassland","Kind":"Flower","Pokedex":"Its flower petals deepen in color through exposure to sunlight. When cloudy weather persists, it does a dance that is thought to be a ritual for summoning the sun.","Evolutions":null},{"Name":"Marill","InternalName":"MARILL","Type1":"WATER","Type2":"FAIRY","HiddenAbility":"SAPSIPPER","Moves":"1,TACKLE,1,WATERGUN,2,TAILWHIP,5,WATERSPORT,7,BUBBLE,10,DEFENSECURL,10,ROLLOUT,13,BUBBLEBEAM,16,HELPINGHAND,20,AQUATAIL,23,PLAYROUGH,28,AQUARING,31,RAINDANCE,37,DOUBLEEDGE,40,SUPERPOWER,47,HYDROPUMP","Height":"0.4","Weight":"8.5","Habitat":"WatersEdge","Kind":"Aqua Mouse","Pokedex":"Its body is covered with water-repellent fur. Because of the fur, it can swim through water at high speed without being slowed by the water's resistance.","Evolutions":"AZUMARILL,Level,18"},{"Name":"Azumarill","InternalName":"AZUMARILL","Type1":"WATER","Type2":"FAIRY","HiddenAbility":"SAPSIPPER","Moves":"1,TACKLE,1,WATERGUN,1,TAILWHIP,1,WATERSPORT,2,TAILWHIP,5,WATERSPORT,7,BUBBLE,10,DEFENSECURL,10,ROLLOUT,13,BUBBLEBEAM,16,HELPINGHAND,21,AQUATAIL,25,PLAYROUGH,31,AQUARING,35,RAINDANCE,42,DOUBLEEDGE,46,SUPERPOWER,55,HYDROPUMP","Height":"0.8","Weight":"28.5","Habitat":"WatersEdge","Kind":"Aqua Rabbit","Pokedex":"It lives in water virtually all day long. Its body color and pattern act as camouflage that makes it tough for enemies to spot in water.","Evolutions":null},{"Name":"Sudowoodo","InternalName":"SUDOWOODO","Type1":"ROCK","HiddenAbility":"RATTLED","Moves":"1,WOODHAMMER,1,COPYCAT,1,FLAIL,1,LOWKICK,1,ROCKTHROW,5,FLAIL,8,LOWKICK,12,ROCKTHROW,15,MIMIC,15,SLAM,19,FEINTATTACK,22,ROCKTOMB,26,BLOCK,29,ROCKSLIDE,36,SUCKERPUNCH,40,DOUBLEEDGE,43,STONEEDGE,47,HAMMERARM","Height":"1.2","Weight":"38.0","Habitat":"Forest","Kind":"Imitation","Pokedex":"It mimics a tree to avoid being attacked by enemies. But since its forelegs remain green throughout the year, it is easily identified as a fake in the winter.","Evolutions":null},{"Name":"Politoed","InternalName":"POLITOED","Type1":"WATER","HiddenAbility":"DRIZZLE","Moves":"1,BUBBLEBEAM,1,HYPNOSIS,1,DOUBLESLAP,1,PERISHSONG,27,SWAGGER,37,BOUNCE,48,HYPERVOICE","Height":"1.1","Weight":"33.9","Habitat":"WatersEdge","Kind":"Frog","Pokedex":"The curled hair on its head proves its status as a king. It is said that the longer and curlier the hair, the more respect it earns from its peers.","WildItemUncommon":"KINGSROCK","Evolutions":null},{"Name":"Hoppip","InternalName":"HOPPIP","Type1":"GRASS","Type2":"FLYING","HiddenAbility":"INFILTRATOR","Moves":"1,SPLASH,4,SYNTHESIS,6,TAILWHIP,8,TACKLE,10,FAIRYWIND,12,POISONPOWDER,14,STUNSPORE,16,SLEEPPOWDER,19,BULLETSEED,22,LEECHSEED,25,MEGADRAIN,28,ACROBATICS,31,RAGEPOWDER,34,COTTONSPORE,37,UTURN,40,WORRYSEED,43,GIGADRAIN,46,BOUNCE,49,MEMENTO","Height":"0.4","Weight":"0.5","Habitat":"Grassland","Kind":"Cottonweed","Pokedex":"This PokÃ©mon drifts and floats with the wind. If it senses the approach of strong winds, a Hoppip links leaves with others to prepare against being blown away.","Evolutions":"SKIPLOOM,Level,18"},{"Name":"Skiploom","InternalName":"SKIPLOOM","Type1":"GRASS","Type2":"FLYING","HiddenAbility":"INFILTRATOR","Moves":"1,SPLASH,1,SYNTHESIS,1,TAILWHIP,1,TACKLE,4,SYNTHESIS,6,TAILWHIP,8,TACKLE,10,FAIRYWIND,12,POISONPOWDER,14,STUNSPORE,16,SLEEPPOWDER,20,BULLETSEED,24,LEECHSEED,28,MEGADRAIN,32,ACROBATICS,36,RAGEPOWDER,40,COTTONSPORE,44,UTURN,48,WORRYSEED,52,GIGADRAIN,56,BOUNCE,60,MEMENTO","Height":"0.6","Weight":"1.0","Habitat":"Grassland","Kind":"Cottonweed","Pokedex":"It blossoms when the temperature rises above 64 degrees F. Because its flower's blooming changes with the temperature, it is sometimes used as a thermometer.","Evolutions":"JUMPLUFF,Level,27"},{"Name":"Jumpluff","InternalName":"JUMPLUFF","Type1":"GRASS","Type2":"FLYING","HiddenAbility":"INFILTRATOR","Moves":"1,SPLASH,1,SYNTHESIS,1,TAILWHIP,1,TACKLE,4,SYNTHESIS,6,TAILWHIP,8,TACKLE,10,FAIRYWIND,12,POISONPOWDER,14,STUNSPORE,16,SLEEPPOWDER,20,BULLETSEED,24,LEECHSEED,29,MEGADRAIN,34,ACROBATICS,39,RAGEPOWDER,44,COTTONSPORE,49,UTURN,54,WORRYSEED,59,GIGADRAIN,64,BOUNCE,69,MEMENTO","Height":"0.8","Weight":"3.0","Habitat":"Grassland","Kind":"Cottonweed","Pokedex":"Jumpluff ride warm southern winds to cross the sea and fly to foreign lands. This PokÃ©mon lands when it encounters cold air while it is floating.","Evolutions":null},{"Name":"Aipom","InternalName":"AIPOM","Type1":"NORMAL","HiddenAbility":"SKILLLINK","Moves":"1,SCRATCH,1,TAILWHIP,4,SANDATTACK,8,ASTONISH,11,BATONPASS,15,TICKLE,18,FURYSWIPES,22,SWIFT,25,SCREECH,29,AGILITY,32,DOUBLEHIT,36,FLING,39,NASTYPLOT,43,LASTRESORT","Height":"0.8","Weight":"11.5","Habitat":"Forest","Kind":"Long Tail","Pokedex":"Its tail ends with a dexterous, handlike appendage. However, because it uses the tail so much, Aipom's real hands have become rather clumsy.","Evolutions":"AMBIPOM,HasMove,DOUBLEHIT"},{"Name":"Sunkern","InternalName":"SUNKERN","Type1":"GRASS","HiddenAbility":"EARLYBIRD","Moves":"1,ABSORB,1,GROWTH,4,INGRAIN,7,GRASSWHISTLE,10,MEGADRAIN,13,LEECHSEED,16,RAZORLEAF,19,WORRYSEED,22,GIGADRAIN,25,ENDEAVOR,28,SYNTHESIS,31,NATURALGIFT,34,SOLARBEAM,37,DOUBLEEDGE,40,SUNNYDAY,43,SEEDBOMB","Height":"0.3","Weight":"1.8","Habitat":"Grassland","Kind":"Seed","Pokedex":"Sunkern try to minimize movement to conserve the nutrients they have stored in their bodies for evolution. They will not eat, subsisting only on morning dew.","WildItemUncommon":"COBABERRY","Evolutions":"SUNFLORA,Item,SUNSTONE"},{"Name":"Sunflora","InternalName":"SUNFLORA","Type1":"GRASS","HiddenAbility":"EARLYBIRD","Moves":"1,FLOWERSHIELD,1,ABSORB,1,POUND,1,GROWTH,4,INGRAIN,7,GRASSWHISTLE,10,MEGADRAIN,13,LEECHSEED,16,RAZORLEAF,19,WORRYSEED,22,GIGADRAIN,25,BULLETSEED,28,PETALDANCE,31,NATURALGIFT,34,SOLARBEAM,37,DOUBLEEDGE,40,SUNNYDAY,43,LEAFSTORM,50,PETALBLIZZARD","Height":"0.8","Weight":"8.5","Habitat":"Grassland","Kind":"Sun","Pokedex":"Sunflora convert solar energy into nutrition. They are highly active in the warm daytime but suddenly stop moving as soon as the sun sets.","Evolutions":null},{"Name":"Yanma","InternalName":"YANMA","Type1":"BUG","Type2":"FLYING","HiddenAbility":"FRISK","Moves":"1,TACKLE,1,FORESIGHT,6,QUICKATTACK,11,DOUBLETEAM,14,SONICBOOM,17,DETECT,22,SUPERSONIC,27,UPROAR,30,PURSUIT,33,ANCIENTPOWER,38,HYPNOSIS,43,WINGATTACK,46,SCREECH,49,UTURN,54,AIRSLASH,57,BUGBUZZ","Height":"1.2","Weight":"38.0","Habitat":"Forest","Kind":"Clear Wing","Pokedex":"It can see 360 degrees without moving its eyes. It is a great flier capable of making sudden stops and turning midair to quickly chase down targeted prey.","WildItemUncommon":"WIDELENS","Evolutions":"YANMEGA,HasMove,ANCIENTPOWER"},{"Name":"Wooper","InternalName":"WOOPER","Type1":"WATER","Type2":"GROUND","HiddenAbility":"UNAWARE","Moves":"1,WATERGUN,1,TAILWHIP,5,MUDSPORT,9,MUDSHOT,15,SLAM,19,MUDBOMB,23,AMNESIA,29,YAWN,33,EARTHQUAKE,37,RAINDANCE,43,MIST,43,HAZE,47,MUDDYWATER","Height":"0.4","Weight":"8.5","Habitat":"WatersEdge","Kind":"Water Fish","Pokedex":"Wooper usually live in water but come out onto land seeking food occasionally. On land, they coat their bodies with a gooey, toxic film.","Evolutions":"QUAGSIRE,Level,20"},{"Name":"Quagsire","InternalName":"QUAGSIRE","Type1":"WATER","Type2":"GROUND","HiddenAbility":"UNAWARE","Moves":"1,WATERGUN,1,TAILWHIP,1,MUDSPORT,5,MUDSPORT,9,MUDSHOT,15,SLAM,19,MUDBOMB,24,AMNESIA,31,YAWN,36,EARTHQUAKE,41,RAINDANCE,48,MIST,48,HAZE,53,MUDDYWATER","Height":"1.4","Weight":"75.0","Habitat":"WatersEdge","Kind":"Water Fish","Pokedex":"A Quagsire hunts by leaving its mouth wide open in water and waiting for its prey to blunder in. Because it doesn't move, it does not get very hungry.","Evolutions":null},{"Name":"Espeon","InternalName":"ESPEON","Type1":"PSYCHIC","HiddenAbility":"MAGICBOUNCE","Moves":"1,HELPINGHAND,1,TACKLE,1,TAILWHIP,5,SANDATTACK,9,CONFUSION,13,QUICKATTACK,17,SWIFT,20,PSYBEAM,25,FUTURESIGHT,29,PSYCHUP,33,MORNINGSUN,37,PSYCHIC,41,LASTRESORT,45,POWERSWAP","Height":"0.9","Weight":"26.5","Habitat":"Urban","Kind":"Sun","Pokedex":"An Espeon is extremely loyal to any trainer it considers to be worthy. It is said to have developed precognitive powers to protect its trainer from harm.","Evolutions":null},{"Name":"Umbreon","InternalName":"UMBREON","Type1":"DARK","HiddenAbility":"INNERFOCUS","Moves":"1,HELPINGHAND,1,TACKLE,1,TAILWHIP,5,SANDATTACK,9,PURSUIT,13,QUICKATTACK,17,CONFUSERAY,20,FEINTATTACK,25,ASSURANCE,29,SCREECH,33,MOONLIGHT,37,MEANLOOK,41,LASTRESORT,45,GUARDSWAP","Height":"1.0","Weight":"27.0","Habitat":"Urban","Kind":"Moonlight","Pokedex":"Umbreon evolved from exposure to the moon's energy pulses. It lurks in darkness and waits for its foes to move. The rings on its body glow when it leaps to attack.","Evolutions":null},{"Name":"Murkrow","InternalName":"MURKROW","Type1":"DARK","Type2":"FLYING","HiddenAbility":"PRANKSTER","Moves":"1,PECK,1,ASTONISH,5,PURSUIT,11,HAZE,15,WINGATTACK,21,NIGHTSHADE,25,ASSURANCE,31,TAUNT,35,FEINTATTACK,41,MEANLOOK,45,FOULPLAY,50,TAILWIND,55,SUCKERPUNCH,61,TORMENT,65,QUASH","Height":"0.5","Weight":"2.1","Habitat":"Forest","Kind":"Darkness","Pokedex":"Murkrow were feared as the alleged bearers of ill fortune. It shows strong interest in anything that sparkles. It will even try to steal rings from women.","Evolutions":"HONCHKROW,Item,DUSKSTONE"},{"Name":"Slowking","InternalName":"SLOWKING","Type1":"WATER","Type2":"PSYCHIC","HiddenAbility":"REGENERATOR","Moves":"1,HEALPULSE,1,POWERGEM,1,HIDDENPOWER,1,CURSE,1,YAWN,1,TACKLE,5,GROWL,9,WATERGUN,14,CONFUSION,19,DISABLE,23,HEADBUTT,28,WATERPULSE,32,ZENHEADBUTT,36,NASTYPLOT,41,SWAGGER,45,PSYCHIC,49,TRUMPCARD,54,PSYCHUP,58,HEALPULSE","Height":"2.0","Weight":"79.5","Habitat":"WatersEdge","Kind":"Royal","Pokedex":"It undertakes research every day to solve the mysteries of the world. However, it apparently forgets everything if the Shellder on its head comes off.","WildItemUncommon":"KINGSROCK","Evolutions":null},{"Name":"Misdreavus","InternalName":"MISDREAVUS","Type1":"GHOST","Moves":"1,GROWL,1,PSYWAVE,5,SPITE,10,ASTONISH,14,CONFUSERAY,19,MEANLOOK,23,HEX,28,PSYBEAM,32,PAINSPLIT,37,PAYBACK,41,SHADOWBALL,46,PERISHSONG,50,GRUDGE,55,POWERGEM","Height":"0.7","Weight":"1.0","Habitat":"Cave","Kind":"Screech","Pokedex":"A Misdreavus frightens people with a creepy, sobbing cry. It apparently uses its red spheres to absorb the fear of foes as its nutrition.","Evolutions":"MISMAGIUS,Item,DUSKSTONE"},{"Name":"Unown","InternalName":"UNOWN","Type1":"PSYCHIC","Moves":"1,HIDDENPOWER","Height":"0.5","Weight":"5.0","Habitat":"Rare","Kind":"Symbol","Pokedex":"This PokÃ©mon is shaped like ancient text characters. Although research is ongoing, it is a mystery as to which came first, the ancient writings or the various Unown.","FormNames":"Anger,Bear,Chase,Direct,Engage,Find,Give,Help,Increase,Join,Keep,Laugh,Make,Nuzzle,Observe,Perform,Quicken,Reassure,Search,Tell,Undo,Vanish,Want,XXXXX,Yield,Zoom,?????,!!!!!","Evolutions":null},{"Name":"Wobbuffet","InternalName":"WOBBUFFET","Type1":"PSYCHIC","HiddenAbility":"TELEPATHY","Moves":"1,MIRRORCOAT,1,SAFEGUARD,1,DESTINYBOND","Height":"1.3","Weight":"28.5","Habitat":"Cave","Kind":"Patient","Pokedex":"Usually docile, a Wobbuffet strikes back ferociously if its black tail is attacked. It makes its lair in caves where it waits for nightfall.","Evolutions":null},{"Name":"Girafarig","InternalName":"GIRAFARIG","Type1":"NORMAL","Type2":"PSYCHIC","HiddenAbility":"SAPSIPPER","Moves":"1,POWERSWAP,1,GUARDSWAP,1,ASTONISH,1,TACKLE,1,GROWL,1,CONFUSION,5,ODORSLEUTH,10,ASSURANCE,14,STOMP,19,PSYBEAM,23,AGILITY,28,DOUBLEHIT,32,ZENHEADBUTT,37,CRUNCH,41,BATONPASS,46,NASTYPLOT,50,PSYCHIC","Height":"1.5","Weight":"41.5","Habitat":"Grassland","Kind":"Long Neck","Pokedex":"A Girafarig is an herbivore--it eats grass and tree shoots. While it is eating, its tail makes chewing and swallowing motions as if it were also eating.","WildItemUncommon":"PERSIMBERRY","Evolutions":null},{"Name":"Pineco","InternalName":"PINECO","Type1":"BUG","HiddenAbility":"OVERCOAT","Moves":"1,TACKLE,1,PROTECT,6,SELFDESTRUCT,9,BUGBITE,12,TAKEDOWN,17,RAPIDSPIN,20,BIDE,23,NATURALGIFT,28,SPIKES,31,PAYBACK,34,EXPLOSION,39,IRONDEFENSE,42,GYROBALL,45,DOUBLEEDGE","Height":"0.6","Weight":"7.2","Habitat":"Forest","Kind":"Bagworm","Pokedex":"A Pineco hangs from a tree branch and waits for prey. While eating, if it is disturbed by someone shaking its tree, it falls on the ground and suddenly explodes.","Evolutions":"FORRETRESS,Level,31"},{"Name":"Forretress","InternalName":"FORRETRESS","Type1":"BUG","Type2":"STEEL","HiddenAbility":"OVERCOAT","Moves":"1,HEAVYSLAM,1,ZAPCANNON,1,MAGNETRISE,1,TOXICSPIKES,1,TACKLE,1,PROTECT,1,SELFDESTRUCT,1,BUGBITE,12,TAKEDOWN,17,RAPIDSPIN,20,BIDE,23,NATURALGIFT,28,SPIKES,31,MIRRORSHOT,32,AUTOTOMIZE,36,PAYBACK,42,EXPLOSION,46,IRONDEFENSE,50,GYROBALL,56,DOUBLEEDGE,60,MAGNETRISE,64,ZAPCANNON,70,HEAVYSLAM","Height":"1.2","Weight":"125.8","Habitat":"Forest","Kind":"Bagworm","Pokedex":"It keeps itself inside its steel shell. The shell is opened when it is catching prey, but it is so quick that the shell's inside cannot be seen.","Evolutions":null},{"Name":"Dunsparce","InternalName":"DUNSPARCE","Type1":"NORMAL","HiddenAbility":"RATTLED","Moves":"1,RAGE,1,DEFENSECURL,4,ROLLOUT,7,SPITE,10,PURSUIT,13,SCREECH,16,YAWN,19,ANCIENTPOWER,22,TAKEDOWN,25,ROOST,28,GLARE,31,DIG,34,DOUBLEEDGE,37,COIL,40,ENDURE,43,DRILLRUN,46,ENDEAVOR,49,FLAIL","Height":"1.5","Weight":"14.0","Habitat":"Cave","Kind":"Land Snake","Pokedex":"Its drill-tipped tail is used to burrow into the ground backwards. This PokÃ©mon is known to make its nest in complex shapes deep under the ground.","Evolutions":null},{"Name":"Gligar","InternalName":"GLIGAR","Type1":"GROUND","Type2":"FLYING","HiddenAbility":"IMMUNITY","Moves":"1,POISONSTING,4,SANDATTACK,7,HARDEN,10,KNOCKOFF,13,QUICKATTACK,16,FURYCUTTER,19,FEINTATTACK,22,ACROBATICS,27,SLASH,30,UTURN,35,SCREECH,40,XSCISSOR,45,SKYUPPERCUT,50,SWORDSDANCE,55,GUILLOTINE","Height":"1.1","Weight":"64.8","Habitat":"Mountain","Kind":"FlyScorpion","Pokedex":"It glides without making a single sound. It grasps the face of its foe using its hind and large front claws, then stabs with its poison barb.","Evolutions":"GLISCOR,NightHoldItem,RAZORFANG"},{"Name":"Steelix","InternalName":"STEELIX","Type1":"STEEL","Type2":"GROUND","HiddenAbility":"SHEERFORCE","Moves":"1,IRONTAIL,1,CRUNCH,1,ROCKSLIDE,1,SCREECH","Height":"9.2","Weight":"400.0","Habitat":"Cave","Kind":"Iron Snake","Pokedex":"Steelix live even further underground than Onix. This PokÃ©mon is known to dig toward the earth's core, reaching a depth of over six-tenths of a mile underground.","WildItemUncommon":"METALCOAT","Evolutions":null},{"Name":"Snubbull","InternalName":"SNUBBULL","Type1":"FAIRY","HiddenAbility":"RATTLED","Moves":"1,ICEFANG,1,FIREFANG,1,THUNDERFANG,1,TACKLE,1,SCARYFACE,1,TAILWHIP,1,CHARM,7,BITE,13,LICK,19,HEADBUTT,25,ROAR,31,RAGE,37,PLAYROUGH,43,PAYBACK,49,CRUNCH","Height":"0.6","Weight":"7.8","Habitat":"Urban","Kind":"Fairy","Pokedex":"By baring its fangs and making a scary face, it sends smaller PokÃ©mon scurrying in terror. The Snubbull does seem a little sad at making its foes flee.","Evolutions":"GRANBULL,Level,23"},{"Name":"Granbull","InternalName":"GRANBULL","Type1":"FAIRY","HiddenAbility":"RATTLED","Moves":"1,OUTRAGE,1,ICEFANG,1,FIREFANG,1,THUNDERFANG,1,TACKLE,1,SCARYFACE,1,TAILWHIP,1,CHARM,7,BITE,13,LICK,19,HEADBUTT,27,ROAR,35,RAGE,43,PLAYROUGH,51,PAYBACK,59,CRUNCH,67,OUTRAGE","Height":"1.4","Weight":"48.7","Habitat":"Urban","Kind":"Fairy","Pokedex":"It has a particularly well-developed lower jaw. The huge fangs are heavy, causing it to tilt its head. Unless it is startled, it will not try to bite.","Evolutions":null},{"Name":"Qwilfish","InternalName":"QWILFISH","Type1":"WATER","Type2":"POISON","HiddenAbility":"INTIMIDATE","Moves":"1,FELLSTINGER,1,HYDROPUMP,1,DESTINYBOND,1,WATERGUN,1,SPIKES,1,TACKLE,1,POISONSTING,9,HARDEN,9,MINIMIZE,13,BUBBLE,17,ROLLOUT,21,TOXICSPIKES,25,STOCKPILE,25,SPITUP,29,REVENGE,33,BRINE,37,PINMISSILE,41,TAKEDOWN,45,AQUATAIL,49,POISONJAB,53,DESTINYBOND,57,HYDROPUMP,60,FELLSTINGER","Height":"0.5","Weight":"3.9","Habitat":"Sea","Kind":"Balloon","Pokedex":"A Qwilfish uses the pressure of water it swallows to shoot toxic quills all at once from all over its body. It finds swimming to be somewhat challenging.","WildItemUncommon":"POISONBARB","Evolutions":null},{"Name":"Scizor","InternalName":"SCIZOR","Type1":"BUG","Type2":"STEEL","HiddenAbility":"LIGHTMETAL","Moves":"1,FEINT,1,BULLETPUNCH,1,QUICKATTACK,1,LEER,5,FOCUSENERGY,9,PURSUIT,13,FALSESWIPE,17,AGILITY,21,METALCLAW,25,FURYCUTTER,29,SLASH,33,RAZORWIND,37,IRONDEFENSE,41,XSCISSOR,45,NIGHTSLASH,49,DOUBLEHIT,50,IRONHEAD,57,SWORDSDANCE,61,FEINT","Height":"1.8","Weight":"118.0","Habitat":"Grassland","Kind":"Pincer","Pokedex":"A Scizor has a body with the hardness of steel. It is not easily fazed by ordinary sorts of attacks. It flaps its wings to regulate its body temperature.","Evolutions":null},{"Name":"Shuckle","InternalName":"SHUCKLE","Type1":"BUG","Type2":"ROCK","HiddenAbility":"CONTRARY","Moves":"1,STICKYWEB,1,WITHDRAW,1,CONSTRICT,1,BIDE,1,ROLLOUT,5,ENCORE,9,WRAP,12,STRUGGLEBUG,16,SAFEGUARD,20,REST,23,ROCKTHROW,27,GASTROACID,31,POWERTRICK,34,SHELLSMASH,38,ROCKSLIDE,42,BUGBITE,45,POWERSPLIT,45,GUARDSPLIT,49,STONEEDGE,53,STICKYWEB","Height":"0.6","Weight":"20.5","Habitat":"Mountain","Kind":"Mold","Pokedex":"A Shuckle hides under rocks, keeping its body concealed inside its shell while eating stored berries. The berries mix with its body fluids to become a juice.","WildItemCommon":"BERRYJUICE","WildItemUncommon":"BERRYJUICE","WildItemRare":"BERRYJUICE","Evolutions":null},{"Name":"Heracross","InternalName":"HERACROSS","Type1":"BUG","Type2":"FIGHTING","HiddenAbility":"MOXIE","Moves":"1,ARMTHRUST,1,BULLETSEED,1,NIGHTSLASH,1,TACKLE,1,LEER,1,HORNATTACK,1,ENDURE,7,FEINT,10,AERIALACE,16,CHIPAWAY,25,FURYATTACK,28,BRICKBREAK,31,PINMISSILE,34,TAKEDOWN,37,MEGAHORN,43,CLOSECOMBAT,46,REVERSAL","Height":"1.5","Weight":"54.0","Habitat":"Forest","Kind":"Single Horn","Pokedex":"They gather in forests seeking the sweet sap of trees. It is completely clad in a steel-hard shell. It is proud of its horn, which it uses to fling foes.","Evolutions":null},{"Name":"Sneasel","InternalName":"SNEASEL","Type1":"DARK","Type2":"ICE","HiddenAbility":"PICKPOCKET","Moves":"1,SCRATCH,1,LEER,1,TAUNT,8,QUICKATTACK,10,FEINTATTACK,14,ICYWIND,16,FURYSWIPES,20,AGILITY,22,METALCLAW,25,HONECLAWS,28,BEATUP,32,SCREECH,35,SLASH,40,SNATCH,44,PUNISHMENT,47,ICESHARD","Height":"0.9","Weight":"28.0","Habitat":"Forest","Kind":"Sharp Claw","Pokedex":"A Sneasel scales trees by punching its hooked claws into the bark. It seeks out unguarded nests and steals eggs for food while the parents are away.","WildItemCommon":"GRIPCLAW","WildItemUncommon":"QUICKCLAW","Evolutions":"WEAVILE,NightHoldItem,RAZORCLAW"},{"Name":"Teddiursa","InternalName":"TEDDIURSA","Type1":"NORMAL","HiddenAbility":"HONEYGATHER","Moves":"1,FLING,1,COVET,1,SCRATCH,1,BABYDOLLEYES,1,LICK,1,FAKETEARS,8,FURYSWIPES,15,FEINTATTACK,22,SWEETSCENT,25,PLAYNICE,29,SLASH,36,CHARM,43,REST,43,SNORE,50,THRASH,57,FLING","Height":"0.6","Weight":"8.8","Habitat":"Mountain","Kind":"Little Bear","Pokedex":"It licks its palms that are sweetened by being soaked in honey. A Teddiursa makes its own honey by blending fruits and pollen collected by Beedrill.","Evolutions":"URSARING,Level,30"},{"Name":"Ursaring","InternalName":"URSARING","Type1":"NORMAL","HiddenAbility":"UNNERVE","Moves":"1,HAMMERARM,1,COVET,1,SCRATCH,1,LEER,1,LICK,1,FAKETEARS,8,FURYSWIPES,15,FEINTATTACK,22,SWEETSCENT,25,PLAYNICE,29,SLASH,38,SCARYFACE,47,REST,49,SNORE,58,THRASH,67,HAMMERARM","Height":"1.8","Weight":"125.8","Habitat":"Mountain","Kind":"Hibernator","Pokedex":"In forests, it is said that there are many streams and towering trees where an Ursaring gathers food. It walks through its forest collecting food every day.","Evolutions":null},{"Name":"Slugma","InternalName":"SLUGMA","Type1":"FIRE","HiddenAbility":"WEAKARMOR","Moves":"1,YAWN,1,SMOG,6,EMBER,8,ROCKTHROW,13,HARDEN,15,INCINERATE,20,CLEARSMOG,22,ANCIENTPOWER,27,FLAMEBURST,29,ROCKSLIDE,34,LAVAPLUME,36,AMNESIA,41,BODYSLAM,43,RECOVER,48,FLAMETHROWER,50,EARTHPOWER","Height":"0.7","Weight":"35.0","Habitat":"Mountain","Kind":"Lava","Pokedex":"It is a species of PokÃ©mon that lives in volcanic areas. If its body cools, its skin hardens and immobilizes it. To avoid that, it sleeps near magma.","Evolutions":"MAGCARGO,Level,38"},{"Name":"Magcargo","InternalName":"MAGCARGO","Type1":"FIRE","Type2":"ROCK","HiddenAbility":"WEAKARMOR","Moves":"1,EARTHPOWER,1,YAWN,1,SMOG,1,EMBER,1,ROCKTHROW,6,EMBER,8,ROCKTHROW,13,HARDEN,15,INCINERATE,20,CLEARSMOG,22,ANCIENTPOWER,27,FLAMEBURST,29,ROCKSLIDE,34,LAVAPLUME,36,AMNESIA,38,SHELLSMASH,43,BODYSLAM,47,RECOVER,54,FLAMETHROWER,58,EARTHPOWER","Height":"0.8","Weight":"55.0","Habitat":"Mountain","Kind":"Lava","Pokedex":"The shell on its back is made of hardened magma. Tens of thousands of years spent living in volcanic craters have turned Magcargo's bodies into magma.","Evolutions":null},{"Name":"Swinub","InternalName":"SWINUB","Type1":"ICE","Type2":"GROUND","HiddenAbility":"THICKFAT","Moves":"1,TACKLE,1,ODORSLEUTH,5,MUDSPORT,8,POWDERSNOW,11,MUDSLAP,14,ENDURE,18,MUDBOMB,21,ICYWIND,24,ICESHARD,28,TAKEDOWN,35,MIST,37,EARTHQUAKE,40,FLAIL,44,BLIZZARD,48,AMNESIA","Height":"0.4","Weight":"6.5","Habitat":"Cave","Kind":"Pig","Pokedex":"It roots for food by rubbing its snout against the ground. Its favorite food is a mushroom that grows under dried grass. It occasionally roots out hot springs.","Evolutions":"PILOSWINE,Level,33"},{"Name":"Piloswine","InternalName":"PILOSWINE","Type1":"ICE","Type2":"GROUND","HiddenAbility":"THICKFAT","Moves":"1,ANCIENTPOWER,1,PECK,1,ODORSLEUTH,1,MUDSPORT,1,POWDERSNOW,5,MUDSPORT,8,POWDERSNOW,11,MUDSLAP,14,ENDURE,18,MUDBOMB,21,ICYWIND,24,ICEFANG,28,TAKEDOWN,33,FURYATTACK,37,MIST,41,THRASH,46,EARTHQUAKE,52,BLIZZARD,58,AMNESIA","Height":"1.1","Weight":"55.8","Habitat":"Cave","Kind":"Swine","Pokedex":"A Piloswine is covered by a thick coat of long hair for enduring freezing cold. It uses its tusks to dig up food that has been buried under ice.","Evolutions":"MAMOSWINE,HasMove,ANCIENTPOWER"},{"Name":"Corsola","InternalName":"CORSOLA","Type1":"WATER","Type2":"ROCK","HiddenAbility":"REGENERATOR","Moves":"1,TACKLE,1,HARDEN,4,BUBBLE,8,RECOVER,10,BUBBLEBEAM,13,REFRESH,17,ANCIENTPOWER,20,SPIKECANNON,23,LUCKYCHANT,27,BRINE,29,IRONDEFENSE,31,ROCKBLAST,35,ENDURE,38,AQUARING,41,POWERGEM,45,MIRRORCOAT,47,EARTHPOWER,50,FLAIL","Height":"0.6","Weight":"5.0","Habitat":"Sea","Kind":"Coral","Pokedex":"Corsola live in warm southern seas. If the sea becomes polluted, the beautiful coral stalks become discolored and crumble away in tatters.","WildItemUncommon":"HARDSTONE","Evolutions":null},{"Name":"Remoraid","InternalName":"REMORAID","Type1":"WATER","HiddenAbility":"MOODY","Moves":"1,WATERGUN,6,LOCKON,10,PSYBEAM,14,AURORABEAM,18,BUBBLEBEAM,22,FOCUSENERGY,26,WATERPULSE,30,SIGNALBEAM,34,ICEBEAM,38,BULLETSEED,42,HYDROPUMP,46,HYPERBEAM,50,SOAK","Height":"0.6","Weight":"12.0","Habitat":"Sea","Kind":"Jet","Pokedex":"A Remoraid uses its abdominal muscles to forcefully expel swallowed water, then shoot down flying prey. When evolution approaches, it travels down rivers.","Evolutions":"OCTILLERY,Level,25"},{"Name":"Octillery","InternalName":"OCTILLERY","Type1":"WATER","HiddenAbility":"MOODY","Moves":"1,GUNKSHOT,1,ROCKBLAST,1,WATERGUN,1,CONSTRICT,1,PSYBEAM,1,AURORABEAM,6,CONSTRICT,10,PSYBEAM,14,AURORABEAM,18,BUBBLEBEAM,22,FOCUSENERGY,25,OCTAZOOKA,28,WRINGOUT,34,SIGNALBEAM,40,ICEBEAM,46,BULLETSEED,52,HYDROPUMP,58,HYPERBEAM,64,SOAK","Height":"0.9","Weight":"28.5","Habitat":"Sea","Kind":"Jet","Pokedex":"It ensnares its foe with its suction- cupped tentacles before delivering the finishing blow. If the foe turns out to be too strong, it spews ink to escape.","Evolutions":null},{"Name":"Delibird","InternalName":"DELIBIRD","Type1":"ICE","Type2":"FLYING","HiddenAbility":"INSOMNIA","Moves":"1,PRESENT","Height":"0.9","Weight":"16.0","Habitat":"Mountain","Kind":"Delivery","Pokedex":"It carries food bundled up in its tail. There was a famous explorer who managed to scale Mt. Everest thanks to a Delibird sharing its food.","Evolutions":null},{"Name":"Mantine","InternalName":"MANTINE","Type1":"WATER","Type2":"FLYING","HiddenAbility":"WATERVEIL","Moves":"1,PSYBEAM,1,BULLETSEED,1,SIGNALBEAM,1,TACKLE,1,BUBBLE,1,SUPERSONIC,1,BUBBLEBEAM,3,SUPERSONIC,7,BUBBLEBEAM,11,CONFUSERAY,14,WINGATTACK,16,HEADBUTT,19,WATERPULSE,23,WIDEGUARD,27,TAKEDOWN,32,AGILITY,36,AIRSLASH,39,AQUARING,46,BOUNCE,49,HYDROPUMP","Height":"2.1","Weight":"220.0","Habitat":"Sea","Kind":"Kite","Pokedex":"On sunny days, schools of Mantine can be seen elegantly leaping over the waves. It is not bothered by the Remoraid that hitches rides.","Evolutions":null},{"Name":"Skarmory","InternalName":"SKARMORY","Type1":"STEEL","Type2":"FLYING","HiddenAbility":"WEAKARMOR","Moves":"1,LEER,1,PECK,6,SANDATTACK,9,METALCLAW,12,AIRCUTTER,17,FURYATTACK,20,FEINT,23,SWIFT,28,SPIKES,31,AGILITY,34,STEELWING,39,SLASH,42,METALSOUND,45,AIRSLASH,50,AUTOTOMIZE,53,NIGHTSLASH","Height":"1.7","Weight":"50.5","Habitat":"RoughTerrain","Kind":"Armor Bird","Pokedex":"A PokÃ©mon that has a body and wings of steel. People in the past used feathers fallen from Skarmory to make swords and knives.","Evolutions":null},{"Name":"Houndour","InternalName":"HOUNDOUR","Type1":"DARK","Type2":"FIRE","HiddenAbility":"UNNERVE","Moves":"1,LEER,1,EMBER,4,HOWL,8,SMOG,13,ROAR,16,BITE,20,ODORSLEUTH,25,BEATUP,28,FIREFANG,32,FEINTATTACK,37,EMBARGO,40,FOULPLAY,44,FLAMETHROWER,49,CRUNCH,52,NASTYPLOT,56,INFERNO","Height":"0.6","Weight":"10.8","Habitat":"RoughTerrain","Kind":"Dark","Pokedex":"Houndour communicate with each other using a variety of cries to corner their prey. This PokÃ©mon's remarkable teamwork is simply unparalleled.","Evolutions":"HOUNDOOM,Level,24"},{"Name":"Houndoom","InternalName":"HOUNDOOM","Type1":"DARK","Type2":"FIRE","HiddenAbility":"UNNERVE","Moves":"1,INFERNO,1,NASTYPLOT,1,THUNDERFANG,1,LEER,1,EMBER,1,HOWL,1,SMOG,4,HOWL,8,SMOG,13,ROAR,16,BITE,20,ODORSLEUTH,26,BEATUP,30,FIREFANG,35,FEINTATTACK,41,EMBARGO,45,FOULPLAY,50,FLAMETHROWER,56,CRUNCH,60,NASTYPLOT,65,INFERNO","Height":"1.4","Weight":"35.0","Habitat":"RoughTerrain","Kind":"Dark","Pokedex":"In a Houndoom pack, the one with its horns raked sharply back serves a leadership role. They choose their leader by fighting among themselves.","Evolutions":null},{"Name":"Kingdra","InternalName":"KINGDRA","Type1":"WATER","Type2":"DRAGON","HiddenAbility":"DAMP","Moves":"1,HYDROPUMP,1,YAWN,1,BUBBLE,1,SMOKESCREEN,1,LEER,1,WATERGUN,5,SMOKESCREEN,9,LEER,13,WATERGUN,17,TWISTER,21,BUBBLEBEAM,26,FOCUSENERGY,31,BRINE,38,AGILITY,45,DRAGONPULSE,52,DRAGONDANCE,60,HYDROPUMP","Height":"1.8","Weight":"152.0","Habitat":"Sea","Kind":"Dragon","Pokedex":"It sleeps quietly, deep on the seafloor. When it comes up to the surface, it creates a huge whirlpool that can swallow even ships.","WildItemUncommon":"DRAGONSCALE","Evolutions":null},{"Name":"Phanpy","InternalName":"PHANPY","Type1":"GROUND","HiddenAbility":"SANDVEIL","Moves":"1,ODORSLEUTH,1,TACKLE,1,GROWL,1,DEFENSECURL,6,FLAIL,10,ROLLOUT,15,NATURALGIFT,19,ENDURE,24,SLAM,28,TAKEDOWN,33,CHARM,37,LASTRESORT,42,DOUBLEEDGE","Height":"0.5","Weight":"33.5","Habitat":"RoughTerrain","Kind":"Long Nose","Pokedex":"Phanpy's big ears serve as broad fans. When it becomes hot, it flaps the ears busily to cool down. Even the young are very strong.","WildItemUncommon":"PASSHOBERRY","Evolutions":"DONPHAN,Level,25"},{"Name":"Donphan","InternalName":"DONPHAN","Type1":"GROUND","HiddenAbility":"SANDVEIL","Moves":"1,FIREFANG,1,THUNDERFANG,1,HORNATTACK,1,BULLDOZE,1,GROWL,1,DEFENSECURL,6,RAPIDSPIN,10,ROLLOUT,15,ASSURANCE,19,KNOCKOFF,24,SLAM,25,FURYATTACK,30,MAGNITUDE,37,SCARYFACE,43,EARTHQUAKE,50,GIGAIMPACT","Height":"1.1","Weight":"120.0","Habitat":"RoughTerrain","Kind":"Armor","Pokedex":"A Donphan is so strong it can easily haul a dump truck. Its hide has toughened to a rock-hard state. An ordinary sort of attack won't even leave a scratch.","WildItemUncommon":"PASSHOBERRY","Evolutions":null},{"Name":"Porygon2","InternalName":"PORYGON2","Type1":"NORMAL","HiddenAbility":"ANALYTIC","Moves":"1,ZAPCANNON,1,MAGICCOAT,1,CONVERSION2,1,TACKLE,1,CONVERSION,1,DEFENSECURL,7,PSYBEAM,12,AGILITY,18,RECOVER,23,MAGNETRISE,29,SIGNALBEAM,34,RECYCLE,40,DISCHARGE,45,LOCKON,50,TRIATTACK,56,MAGICCOAT,62,ZAPCANNON,67,HYPERBEAM","Height":"0.6","Weight":"32.5","Habitat":"Urban","Kind":"Virtual","Pokedex":"It was created by humans using the power of science. It has been given artificial intelligence that enables it to learn new gestures and emotions on its own.","Evolutions":"PORYGONZ,TradeItem,DUBIOUSDISC"},{"Name":"Stantler","InternalName":"STANTLER","Type1":"NORMAL","HiddenAbility":"SAPSIPPER","Moves":"1,MEFIRST,1,TACKLE,3,LEER,7,ASTONISH,10,HYPNOSIS,13,STOMP,16,SANDATTACK,21,TAKEDOWN,23,CONFUSERAY,27,CALMMIND,33,ROLEPLAY,38,ZENHEADBUTT,43,JUMPKICK,49,IMPRISON,50,CAPTIVATE,55,MEFIRST","Height":"1.4","Weight":"71.2","Habitat":"Forest","Kind":"Big Horn","Pokedex":"Stantler's magnificent antlers were once traded at high prices as works of art. As a result, this PokÃ©mon was hunted close to extinction.","Evolutions":null},{"Name":"Smeargle","InternalName":"SMEARGLE","Type1":"NORMAL","HiddenAbility":"MOODY","Moves":"1,SKETCH,11,SKETCH,21,SKETCH,31,SKETCH,41,SKETCH,51,SKETCH,61,SKETCH,71,SKETCH,81,SKETCH,91,SKETCH","Height":"1.2","Weight":"58.0","Habitat":"Urban","Kind":"Painter","Pokedex":"A Smeargle marks its territory using a fluid that leaks out from the tip of its tail. About 5,000 different marks left by this PokÃ©mon have been found.","Evolutions":null},{"Name":"Tyrogue","InternalName":"TYROGUE","Type1":"FIGHTING","HiddenAbility":"VITALSPIRIT","Moves":"1,TACKLE,1,HELPINGHAND,1,FAKEOUT,1,FORESIGHT","Height":"0.7","Weight":"21.0","Habitat":"Urban","Kind":"Scuffle","Pokedex":"Tyrogue become stressed out if they do not get to train every day. When raising this PokÃ©mon, the trainer must establish a regular training schedule.","Evolutions":"HITMONLEE,AttackGreater,20,HITMONCHAN,DefenseGreater,20,HITMONTOP,AtkDefEqual,20"},{"Name":"Hitmontop","InternalName":"HITMONTOP","Type1":"FIGHTING","HiddenAbility":"STEADFAST","Moves":"1,ENDEAVOR,1,CLOSECOMBAT,1,REVENGE,1,ROLLINGKICK,6,FOCUSENERGY,10,PURSUIT,15,QUICKATTACK,19,TRIPLEKICK,24,RAPIDSPIN,33,FEINT,37,AGILITY,42,GYROBALL,46,WIDEGUARD,46,QUICKGUARD,50,DETECT,55,CLOSECOMBAT,60,ENDEAVOR","Height":"1.4","Weight":"48.0","Habitat":"Urban","Kind":"Handstand","Pokedex":"Its technique of kicking while spinning is a remarkable mix of both offense and defense. Hitmontop travel faster spinning than they do walking.","Evolutions":null},{"Name":"Smoochum","InternalName":"SMOOCHUM","Type1":"ICE","Type2":"PSYCHIC","HiddenAbility":"HYDRATION","Moves":"1,POUND,5,LICK,8,SWEETKISS,11,POWDERSNOW,15,CONFUSION,18,SING,21,HEARTSTAMP,25,MEANLOOK,28,FAKETEARS,31,LUCKYCHANT,35,AVALANCHE,38,PSYCHIC,41,COPYCAT,45,PERISHSONG,48,BLIZZARD","Height":"0.4","Weight":"6.0","Habitat":"Urban","Kind":"Kiss","Pokedex":"It actively runs about, but also falls often. Whenever it falls, it will check its reflection on a lake's surface to make sure its face hasn't become dirty.","WildItemCommon":"ASPEARBERRY","WildItemUncommon":"ASPEARBERRY","WildItemRare":"ASPEARBERRY","Evolutions":"JYNX,Level,30"},{"Name":"Elekid","InternalName":"ELEKID","Type1":"ELECTRIC","HiddenAbility":"VITALSPIRIT","Moves":"1,QUICKATTACK,1,LEER,5,THUNDERSHOCK,8,LOWKICK,12,SWIFT,15,SHOCKWAVE,19,THUNDERWAVE,22,ELECTROBALL,26,LIGHTSCREEN,29,THUNDERPUNCH,33,DISCHARGE,36,SCREECH,40,THUNDERBOLT,43,THUNDER","Height":"0.6","Weight":"23.5","Habitat":"Grassland","Kind":"Electric","Pokedex":"If it touches metal and discharges the electricity it has stored in its body, an Elekid begins swinging its arms in circles to recharge itself.","WildItemUncommon":"ELECTIRIZER","Evolutions":"ELECTABUZZ,Level,30"},{"Name":"Magby","InternalName":"MAGBY","Type1":"FIRE","HiddenAbility":"VITALSPIRIT","Moves":"1,SMOG,1,LEER,5,EMBER,8,SMOKESCREEN,12,FEINTATTACK,15,FIRESPIN,19,CLEARSMOG,22,FLAMEBURST,26,CONFUSERAY,29,FIREPUNCH,33,LAVAPLUME,36,SUNNYDAY,40,FLAMETHROWER,43,FIREBLAST","Height":"0.7","Weight":"21.4","Habitat":"Mountain","Kind":"Live Coal","Pokedex":"If a Magby is spouting yellow flames from its mouth, it is in good health. When it is fatigued, black smoke will be mixed in with the flames.","WildItemUncommon":"MAGMARIZER","Evolutions":"MAGMAR,Level,30"},{"Name":"Miltank","InternalName":"MILTANK","Type1":"NORMAL","HiddenAbility":"SAPSIPPER","Moves":"1,TACKLE,3,GROWL,5,DEFENSECURL,8,STOMP,11,MILKDRINK,15,BIDE,19,ROLLOUT,24,BODYSLAM,29,ZENHEADBUTT,35,CAPTIVATE,41,GYROBALL,48,HEALBELL,50,WAKEUPSLAP","Height":"1.2","Weight":"75.5","Habitat":"Grassland","Kind":"Milk Cow","Pokedex":"It gives over five gallons of milk daily. Its sweet milk is enjoyed by children and grown-ups alike. People who can't drink milk turn it into yogurt and eat it instead.","WildItemCommon":"MOOMOOMILK","WildItemUncommon":"MOOMOOMILK","WildItemRare":"MOOMOOMILK","Evolutions":null},{"Name":"Blissey","InternalName":"BLISSEY","Type1":"NORMAL","HiddenAbility":"HEALER","Moves":"1,DOUBLEEDGE,1,DEFENSECURL,1,POUND,1,GROWL,5,TAILWHIP,9,REFRESH,12,DOUBLESLAP,16,SOFTBOILED,20,BESTOW,23,MINIMIZE,27,TAKEDOWN,31,SING,34,FLING,38,HEALPULSE,42,EGGBOMB,46,LIGHTSCREEN,50,HEALINGWISH,54,DOUBLEEDGE","Height":"1.5","Weight":"46.8","Habitat":"Urban","Kind":"Happiness","Pokedex":"If it senses sadness with its fluffy fur, a Blissey will rush over to the sad person, however far away, to share an egg of happiness that brings a smile to any face.","WildItemCommon":"OVALSTONE","WildItemUncommon":"LUCKYEGG","Evolutions":null},{"Name":"Raikou","InternalName":"RAIKOU","Type1":"ELECTRIC","HiddenAbility":"VOLTABSORB","Moves":"1,EXTRASENSORY,1,DISCHARGE,1,BITE,1,LEER,8,THUNDERSHOCK,15,ROAR,22,QUICKATTACK,29,SPARK,36,REFLECT,43,CRUNCH,50,THUNDERFANG,57,DISCHARGE,64,EXTRASENSORY,71,RAINDANCE,78,CALMMIND,85,THUNDER","Height":"1.9","Weight":"178.0","Habitat":"Grassland","Kind":"Thunder","Pokedex":"Raikou embodies the speed of lightning. Its roars send shock waves shuddering through the air and ground as if lightning bolts were crashing down.","Evolutions":null},{"Name":"Entei","InternalName":"ENTEI","Type1":"FIRE","HiddenAbility":"FLASHFIRE","Moves":"1,SACREDFIRE,1,ERUPTION,1,EXTRASENSORY,1,LAVAPLUME,1,BITE,1,LEER,8,EMBER,15,ROAR,22,FIRESPIN,29,STOMP,36,FLAMETHROWER,43,SWAGGER,50,FIREFANG,57,LAVAPLUME,64,EXTRASENSORY,71,FIREBLAST,78,CALMMIND,85,ERUPTION","Height":"2.1","Weight":"198.0","Habitat":"Grassland","Kind":"Volcano","Pokedex":"Entei embodies the passion of magma. It is thought to have been born in the eruption of a volcano. It blasts fire that consumes all that it touches.","Evolutions":null},{"Name":"Suicune","InternalName":"SUICUNE","Type1":"WATER","HiddenAbility":"WATERABSORB","Moves":"1,HYDROPUMP,1,EXTRASENSORY,1,TAILWIND,1,BITE,1,LEER,8,BUBBLEBEAM,15,RAINDANCE,22,GUST,29,AURORABEAM,36,MIST,43,MIRRORCOAT,50,ICEFANG,57,TAILWIND,64,EXTRASENSORY,71,HYDROPUMP,78,CALMMIND,85,BLIZZARD","Height":"2.0","Weight":"187.0","Habitat":"Grassland","Kind":"Aurora","Pokedex":"Suicune embodies the compassion of a pure spring of water. It runs across the land with gliding elegance. It has the power to purify dirty water.","Evolutions":null},{"Name":"Larvitar","InternalName":"LARVITAR","Type1":"ROCK","Type2":"GROUND","HiddenAbility":"SANDVEIL","Moves":"1,BITE,1,LEER,5,SANDSTORM,10,SCREECH,14,CHIPAWAY,19,ROCKSLIDE,23,SCARYFACE,28,THRASH,32,DARKPULSE,37,PAYBACK,41,CRUNCH,46,EARTHQUAKE,50,STONEEDGE,55,HYPERBEAM","Height":"0.6","Weight":"72.0","Habitat":"Mountain","Kind":"Rock Skin","Pokedex":"A Larvitar is born deep under the ground. It must eat its way through the soil above and reach the surface for it to see its parents' faces.","Evolutions":"PUPITAR,Level,30"},{"Name":"Pupitar","InternalName":"PUPITAR","Type1":"ROCK","Type2":"GROUND","Moves":"1,BITE,1,LEER,1,SANDSTORM,1,SCREECH,5,SANDSTORM,10,SCREECH,14,CHIPAWAY,19,ROCKSLIDE,23,SCARYFACE,28,THRASH,34,DARKPULSE,41,PAYBACK,47,CRUNCH,54,EARTHQUAKE,60,STONEEDGE,67,HYPERBEAM","Height":"1.2","Weight":"152.0","Habitat":"Mountain","Kind":"Hard Shell","Pokedex":"A Pupitar creates a gas inside its body that it ejects under compression to propel itself like a jet. Its body can withstand a collision with solid steel.","Evolutions":"TYRANITAR,Level,55"},{"Name":"Tyranitar","InternalName":"TYRANITAR","Type1":"ROCK","Type2":"DARK","HiddenAbility":"UNNERVE","Moves":"1,THUNDERFANG,1,ICEFANG,1,FIREFANG,1,BITE,1,LEER,1,SANDSTORM,1,SCREECH,5,SANDSTORM,10,SCREECH,14,CHIPAWAY,19,ROCKSLIDE,23,SCARYFACE,28,THRASH,34,DARKPULSE,41,PAYBACK,47,CRUNCH,54,EARTHQUAKE,63,STONEEDGE,73,HYPERBEAM,82,GIGAIMPACT","Height":"2.0","Weight":"202.0","Habitat":"Mountain","Kind":"Armor","Pokedex":"A Tyranitar is so overwhelmingly powerful, it can bring down a whole mountain to make its nest. It roams in mountains seeking new opponents to fight.","Evolutions":null},{"Name":"Lugia","InternalName":"LUGIA","Type1":"PSYCHIC","Type2":"FLYING","HiddenAbility":"MULTISCALE","Moves":"1,WHIRLWIND,1,WEATHERBALL,9,GUST,15,DRAGONRUSH,23,EXTRASENSORY,29,RAINDANCE,37,HYDROPUMP,43,AEROBLAST,50,PUNISHMENT,57,ANCIENTPOWER,65,SAFEGUARD,71,RECOVER,79,FUTURESIGHT,85,NATURALGIFT,93,CALMMIND,99,SKYATTACK","Height":"5.2","Weight":"216.0","Habitat":"Rare","Kind":"Diving","Pokedex":"Lugia is so powerful even a light fluttering of its wings can blow apart houses. As a result, it chooses to live out of sight deep under the sea.","Evolutions":null},{"Name":"Ho-Oh","InternalName":"HOOH","Type1":"FIRE","Type2":"FLYING","HiddenAbility":"REGENERATOR","Moves":"1,WHIRLWIND,1,WEATHERBALL,9,GUST,15,BRAVEBIRD,23,EXTRASENSORY,29,SUNNYDAY,37,FIREBLAST,43,SACREDFIRE,50,PUNISHMENT,57,ANCIENTPOWER,65,SAFEGUARD,71,RECOVER,79,FUTURESIGHT,85,NATURALGIFT,93,CALMMIND,99,SKYATTACK","Height":"3.8","Weight":"199.0","Habitat":"Rare","Kind":"Rainbow","Pokedex":"Its feathers--which glow in seven colors depending on the angle at which they are struck by light--are thought to bring joy. It is said to live at the foot of a rainbow.","WildItemCommon":"SACREDASH","WildItemUncommon":"SACREDASH","WildItemRare":"SACREDASH","Evolutions":null},{"Name":"Celebi","InternalName":"CELEBI","Type1":"PSYCHIC","Type2":"GRASS","Moves":"1,LEECHSEED,1,CONFUSION,1,RECOVER,1,HEALBELL,10,SAFEGUARD,19,MAGICALLEAF,28,ANCIENTPOWER,37,BATONPASS,46,NATURALGIFT,55,HEALBLOCK,64,FUTURESIGHT,73,HEALINGWISH,82,LEAFSTORM,91,PERISHSONG","Height":"0.6","Weight":"5.0","Habitat":"Forest","Kind":"Time Travel","Pokedex":"This PokÃ©mon came from the future by crossing over time. It is thought that so long as Celebi appears, a bright and shining future awaits us.","WildItemCommon":"LUMBERRY","WildItemUncommon":"LUMBERRY","WildItemRare":"LUMBERRY","Evolutions":null},{"Name":"Treecko","InternalName":"TREECKO","Type1":"GRASS","HiddenAbility":"UNBURDEN","Moves":"1,POUND,1,LEER,5,ABSORB,9,QUICKATTACK,13,MEGADRAIN,17,PURSUIT,21,GIGADRAIN,25,AGILITY,29,SLAM,33,DETECT,37,ENERGYBALL,41,QUICKGUARD,45,ENDEAVOR,49,SCREECH","Height":"0.5","Weight":"5.0","Habitat":"Forest","Kind":"Wood Gecko","Pokedex":"It makes its nest in a giant tree in the forest. It ferociously guards against anything nearing its territory. It is said to be the protector of the forest's trees.","Evolutions":"GROVYLE,Level,16"},{"Name":"Grovyle","InternalName":"GROVYLE","Type1":"GRASS","HiddenAbility":"UNBURDEN","Moves":"1,LEAFBLADE,1,AERIALACE,1,SLAM,1,AGILITY","Height":"0.9","Weight":"21.6","Habitat":"Forest","Kind":"Wood Gecko","Pokedex":"Leaves grow out of this PokÃ©mon's body. They help obscure a Grovyle from the eyes of its enemies while it is in a thickly overgrown forest.","Evolutions":"SCEPTILE,Level,36"},{"Name":"Sceptile","InternalName":"SCEPTILE","Type1":"GRASS","HiddenAbility":"UNBURDEN","Moves":"1,LEAFBLADE,1,AERIALACE,1,SLAM,1,AGILITY","Height":"1.7","Weight":"52.2","Habitat":"Forest","Kind":"Forest","Pokedex":"In the jungle, its power is without equal. This PokÃ©mon carefully grows trees and plants. It regulates its body temperature by basking in sunlight.","Evolutions":null},{"Name":"Torchic","InternalName":"TORCHIC","Type1":"FIRE","HiddenAbility":"SPEEDBOOST","Moves":"1,SCRATCH,1,GROWL,5,EMBER,10,SANDATTACK,14,PECK,19,FIRESPIN,23,QUICKATTACK,28,FLAMEBURST,32,FOCUSENERGY,37,SLASH,41,MIRRORMOVE,46,FLAMETHROWER","Height":"0.4","Weight":"2.5","Habitat":"Grassland","Kind":"Chick","Pokedex":"If attacked, it strikes back by spitting balls of fire it forms in its stomach. A Torchic dislikes darkness because it can't see its surroundings.","Evolutions":"COMBUSKEN,Level,16"},{"Name":"Combusken","InternalName":"COMBUSKEN","Type1":"FIRE","Type2":"FIGHTING","HiddenAbility":"SPEEDBOOST","Moves":"1,FLAMETHROWER,1,DOUBLEKICK,1,SLASH,1,BULKUP","Height":"0.9","Weight":"19.5","Habitat":"Grassland","Kind":"Young Fowl","Pokedex":"It lashes out with 10 kicks per second. Its strong fighting instinct compels it to keep up its offensive until the opponent gives up.","Evolutions":"BLAZIKEN,Level,36"},{"Name":"Blaziken","InternalName":"BLAZIKEN","Type1":"FIRE","Type2":"FIGHTING","HiddenAbility":"SPEEDBOOST","Moves":"1,FLAMETHROWER,1,DOUBLEKICK,1,SLASH,1,BULKUP","Height":"1.9","Weight":"52.0","Habitat":"Grassland","Kind":"Blaze","Pokedex":"It learns martial arts that use punches and kicks. Every several years, its old feathers burn off, and new, supple feathers grow back in their place.","Evolutions":null},{"Name":"Mudkip","InternalName":"MUDKIP","Type1":"WATER","HiddenAbility":"DAMP","Moves":"1,TACKLE,1,GROWL,4,WATERGUN,9,MUDSLAP,12,FORESIGHT,17,BIDE,20,MUDSPORT,25,ROCKTHROW,28,PROTECT,33,WHIRLPOOL,36,TAKEDOWN,41,HYDROPUMP,44,ENDEAVOR","Height":"0.4","Weight":"7.6","Habitat":"WatersEdge","Kind":"Mud Fish","Pokedex":"On land, it can powerfully lift large boulders by planting its four feet and heaving. It sleeps by burying itself in soil at the water's edge.","Evolutions":"MARSHTOMP,Level,16"},{"Name":"Marshtomp","InternalName":"MARSHTOMP","Type1":"WATER","Type2":"GROUND","HiddenAbility":"DAMP","Moves":"1,WATERFALL,1,MUDBOMB,1,ROCKSLIDE,1,PROTECT","Height":"0.7","Weight":"28.0","Habitat":"WatersEdge","Kind":"Mud Fish","Pokedex":"Its toughened hind legs enable it to stand upright. Because it weakens if its skin dries out, it replenishes fluids by playing in mud.","Evolutions":"SWAMPERT,Level,36"},{"Name":"Swampert","InternalName":"SWAMPERT","Type1":"WATER","Type2":"GROUND","HiddenAbility":"DAMP","Moves":"1,WATERFALL,1,MUDBOMB,1,ROCKSLIDE,1,PROTECT","Height":"1.5","Weight":"81.9","Habitat":"WatersEdge","Kind":"Mud Fish","Pokedex":"If it senses the approach of a storm and a tidal wave, it protects its seaside nest by piling up boulders. It swims as fast as a jet ski.","Evolutions":null},{"Name":"Poochyena","InternalName":"POOCHYENA","Type1":"DARK","HiddenAbility":"RATTLED","Moves":"1,TACKLE,4,HOWL,7,SANDATTACK,10,BITE,13,ODORSLEUTH,16,ROAR,19,SWAGGER,22,ASSURANCE,25,SCARYFACE,28,EMBARGO,30,TAUNT,34,TAKEDOWN,37,CRUNCH,40,SUCKERPUNCH","Height":"0.5","Weight":"13.6","Habitat":"Grassland","Kind":"Bite","Pokedex":"It savagely threatens foes with bared fangs. It chases after fleeing targets tenaciously. It turns tail and runs, however, if the foe strikes back.","WildItemUncommon":"PECHABERRY","Evolutions":"MIGHTYENA,Level,18"},{"Name":"Mightyena","InternalName":"MIGHTYENA","Type1":"DARK","HiddenAbility":"MOXIE","Moves":"1,CRUNCH,1,THIEF,1,TACKLE,1,HOWL,1,SANDATTACK,1,BITE,4,HOWL,7,SANDATTACK,10,BITE,13,ODORSLEUTH,16,ROAR,18,SNARL,20,SWAGGER,24,ASSURANCE,28,SCARYFACE,32,EMBARGO,36,TAUNT,40,TAKEDOWN,44,CRUNCH,48,SUCKERPUNCH","Height":"1.0","Weight":"37.0","Habitat":"Grassland","Kind":"Bite","Pokedex":"In the wild, Mightyena live in a pack. They never defy their leader's orders. They defeat foes with perfectly coordinated teamwork.","WildItemUncommon":"PECHABERRY","Evolutions":null},{"Name":"Zigzagoon","InternalName":"ZIGZAGOON","Type1":"NORMAL","HiddenAbility":"QUICKFEET","Moves":"1,TACKLE,1,GROWL,5,TAILWHIP,7,SANDATTACK,11,HEADBUTT,12,BABYDOLLEYES,13,ODORSLEUTH,17,MUDSPORT,19,PINMISSILE,23,COVET,25,BESTOW,29,FLAIL,31,TAKEDOWN,35,REST,37,BELLYDRUM,41,FLING","Height":"0.4","Weight":"17.5","Habitat":"Grassland","Kind":"TinyRaccoon","Pokedex":"Rubbing its nose against the ground, it always wanders about back and forth in search of something. It is distinguished by the zigzag footprints it leaves.","WildItemUncommon":"ORANBERRY","Evolutions":"LINOONE,Level,20"},{"Name":"Linoone","InternalName":"LINOONE","Type1":"NORMAL","HiddenAbility":"QUICKFEET","Moves":"1,PLAYROUGH,1,ROTOTILLER,1,SWITCHEROO,1,TACKLE,1,GROWL,1,TAILWHIP,1,SANDATTACK,5,TAILWHIP,7,SANDATTACK,11,HEADBUTT,13,ODORSLEUTH,17,MUDSPORT,19,FURYSWIPES,24,COVET","Height":"0.5","Weight":"32.5","Habitat":"Grassland","Kind":"Rushing","Pokedex":"It is exceedingly fast if it only has to run in a straight line. When it spots pond- dwelling prey underwater, it quickly leaps in and catches it with its sharp claws.","WildItemCommon":"ORANBERRY","WildItemUncommon":"SITRUSBERRY","Evolutions":null},{"Name":"Wurmple","InternalName":"WURMPLE","Type1":"BUG","HiddenAbility":"RUNAWAY","Moves":"1,TACKLE,1,STRINGSHOT,5,POISONSTING,15,BUGBITE","Height":"0.3","Weight":"3.6","Habitat":"Forest","Kind":"Worm","Pokedex":"It sticks to tree branches and eats leaves. The thread it spits from its mouth, which becomes gooey when it touches air, slows the movement of its foes.","Evolutions":"SILCOON,Silcoon,7,CASCOON,Cascoon,7"},{"Name":"Silcoon","InternalName":"SILCOON","Type1":"BUG","Moves":"1,HARDEN,7,HARDEN","Height":"0.6","Weight":"10.0","Habitat":"Forest","Kind":"Cocoon","Pokedex":"It prepares for evolution using the energy it stored while it was a Wurmple. It keeps watch over the surroundings with its two eyes.","Evolutions":"BEAUTIFLY,Level,10"},{"Name":"Beautifly","InternalName":"BEAUTIFLY","Type1":"BUG","Type2":"FLYING","HiddenAbility":"RIVALRY","Moves":"1,GUST,10,GUST,12,ABSORB,15,STUNSPORE,17,MORNINGSUN,20,AIRCUTTER,22,MEGADRAIN,25,SILVERWIND,27,ATTRACT,30,WHIRLWIND,32,GIGADRAIN,35,BUGBUZZ,37,RAGE,40,QUIVERDANCE","Height":"1.0","Weight":"28.4","Habitat":"Forest","Kind":"Butterfly","Pokedex":"Its colorfully patterned wings are its most prominent feature. It flies through flower-covered fields collecting pollen. It attacks ferociously when angered.","WildItemUncommon":"SHEDSHELL","Evolutions":null},{"Name":"Cascoon","InternalName":"CASCOON","Type1":"BUG","Moves":"1,HARDEN,7,HARDEN","Height":"0.7","Weight":"11.5","Habitat":"Forest","Kind":"Cocoon","Pokedex":"To avoid detection by its enemies, it hides motionlessly beneath large leaves and in the gaps of branches. It also attaches dead leaves to its body for camouflage.","Evolutions":"DUSTOX,Level,10"},{"Name":"Dustox","InternalName":"DUSTOX","Type1":"BUG","Type2":"POISON","HiddenAbility":"COMPOUNDEYES","Moves":"1,GUST,10,GUST,12,CONFUSION,15,POISONPOWDER,17,MOONLIGHT,20,VENOSHOCK,22,PSYBEAM,25,SILVERWIND,27,LIGHTSCREEN,30,WHIRLWIND,32,TOXIC,35,BUGBUZZ,37,PROTECT,40,QUIVERDANCE","Height":"1.2","Weight":"31.6","Habitat":"Forest","Kind":"Poison Moth","Pokedex":"It is a nocturnal PokÃ©mon that flies from fields and mountains to the attraction of streetlights at night. It looses highly toxic powder from its wings.","WildItemUncommon":"SHEDSHELL","Evolutions":null},{"Name":"Lotad","InternalName":"LOTAD","Type1":"WATER","Type2":"GRASS","HiddenAbility":"OWNTEMPO","Moves":"1,ASTONISH,3,GROWL,6,ABSORB,9,BUBBLE,12,NATURALGIFT,15,MIST,18,MEGADRAIN,21,BUBBLEBEAM,24,NATUREPOWER,27,RAINDANCE,30,GIGADRAIN,33,ZENHEADBUTT,36,ENERGYBALL","Height":"0.5","Weight":"2.6","Habitat":"WatersEdge","Kind":"Water Weed","Pokedex":"This PokÃ©mon lives in ponds with clean water. It is known to ferry small PokÃ©mon across ponds by carrying them on the broad leaf on its head.","Evolutions":"LOMBRE,Level,14"},{"Name":"Lombre","InternalName":"LOMBRE","Type1":"WATER","Type2":"GRASS","HiddenAbility":"OWNTEMPO","Moves":"1,ASTONISH,3,GROWL,6,ABSORB,9,BUBBLE,12,FURYSWIPES,16,FAKEOUT,20,WATERSPORT,24,BUBBLEBEAM,28,NATUREPOWER,32,UPROAR,36,KNOCKOFF,40,ZENHEADBUTT,44,HYDROPUMP","Height":"1.2","Weight":"32.5","Habitat":"WatersEdge","Kind":"Jolly","Pokedex":"In the evening, it takes great delight in popping out of rivers and startling people. It feeds on aquatic moss that grows on rocks in the riverbed.","Evolutions":"LUDICOLO,Item,WATERSTONE"},{"Name":"Ludicolo","InternalName":"LUDICOLO","Type1":"WATER","Type2":"GRASS","HiddenAbility":"OWNTEMPO","Moves":"1,ASTONISH,1,GROWL,1,MEGADRAIN,1,NATUREPOWER","Height":"1.5","Weight":"55.0","Habitat":"WatersEdge","Kind":"Carefree","Pokedex":"When it hears festive music, all the cells in its body become stimulated, and it begins moving in rhythm. It does not quail even when it faces a tough opponent.","Evolutions":null},{"Name":"Seedot","InternalName":"SEEDOT","Type1":"GRASS","HiddenAbility":"PICKPOCKET","Moves":"1,BIDE,3,HARDEN,9,GROWTH,15,NATUREPOWER,21,SYNTHESIS,27,SUNNYDAY,33,EXPLOSION","Height":"0.5","Weight":"4.0","Habitat":"Forest","Kind":"Acorn","Pokedex":"It hangs off branches and absorbs nutrients. When it finishes eating, its body becomes so heavy that it drops to the ground with a thump.","Evolutions":"NUZLEAF,Level,14"},{"Name":"Nuzleaf","InternalName":"NUZLEAF","Type1":"GRASS","Type2":"DARK","HiddenAbility":"PICKPOCKET","Moves":"1,POUND,3,HARDEN,6,GROWTH,9,NATUREPOWER,12,FAKEOUT,14,RAZORLEAF,16,TORMENT,20,RAZORWIND,24,FEINTATTACK,28,LEAFBLADE,32,SWAGGER,36,EXTRASENSORY","Height":"1.0","Weight":"28.0","Habitat":"Forest","Kind":"Wily","Pokedex":"A forest-dwelling PokÃ©mon that is skilled at climbing trees. Its long and pointed nose is its weak point. It loses power if the nose is gripped.","Evolutions":"SHIFTRY,Item,LEAFSTONE"},{"Name":"Shiftry","InternalName":"SHIFTRY","Type1":"GRASS","Type2":"DARK","HiddenAbility":"PICKPOCKET","Moves":"1,RAZORLEAF,1,FEINTATTACK,1,WHIRLWIND,1,NASTYPLOT,20,LEAFTORNADO,32,HURRICANE,44,LEAFSTORM","Height":"1.3","Weight":"59.6","Habitat":"Forest","Kind":"Wicked","Pokedex":"It is said to arrive on chilly, wintry winds. Feared from long ago as the guardian of forests, this PokÃ©mon lives in a deep forest where people do not venture.","Evolutions":null},{"Name":"Taillow","InternalName":"TAILLOW","Type1":"NORMAL","Type2":"FLYING","HiddenAbility":"SCRAPPY","Moves":"1,PECK,1,GROWL,5,FOCUSENERGY,9,QUICKATTACK,13,WINGATTACK,17,DOUBLETEAM,21,AERIALACE,25,QUICKGUARD,29,AGILITY,33,AIRSLASH,37,ENDEAVOR,41,BRAVEBIRD","Height":"0.3","Weight":"2.3","Habitat":"Grassland","Kind":"TinySwallow","Pokedex":"Although it is small, it is very courageous. It will take on a larger Skarmory on an equal footing. However, its will weakens if it becomes hungry.","WildItemUncommon":"CHARTIBERRY","Evolutions":"SWELLOW,Level,22"},{"Name":"Swellow","InternalName":"SWELLOW","Type1":"NORMAL","Type2":"FLYING","HiddenAbility":"SCRAPPY","Moves":"1,BRAVEBIRD,1,AIRSLASH,1,PLUCK,1,PECK,1,GROWL,1,FOCUSENERGY,1,QUICKATTACK,5,FOCUSENERGY,9,QUICKATTACK,13,WINGATTACK,17,FOCUSENERGY,21,AERIALACE","Height":"0.7","Weight":"19.8","Habitat":"Grassland","Kind":"Swallow","Pokedex":"A Swellow dives upon prey from far above. It never misses its targets. It takes to the skies in search of lands with a warm climate.","WildItemUncommon":"CHARTIBERRY","Evolutions":null},{"Name":"Wingull","InternalName":"WINGULL","Type1":"WATER","Type2":"FLYING","HiddenAbility":"RAINDISH","Moves":"1,GROWL,1,WATERGUN,5,SUPERSONIC,8,WINGATTACK,12,MIST,15,WATERPULSE,19,QUICKATTACK,22,AIRCUTTER,26,PURSUIT,29,AERIALACE,33,ROOST,36,AGILITY,40,AIRSLASH,43,HURRICANE","Height":"0.6","Weight":"9.5","Habitat":"Sea","Kind":"Seagull","Pokedex":"It makes its nest on a sheer cliff at the edge of the sea. It has trouble keeping its wings flapping in flight. Instead, it soars on updrafts.","Evolutions":"PELIPPER,Level,25"},{"Name":"Pelipper","InternalName":"PELIPPER","Type1":"WATER","Type2":"FLYING","HiddenAbility":"RAINDISH","Moves":"1,HYDROPUMP,1,TAILWIND,1,SOAK,1,GROWL,1,WATERGUN,1,WATERSPORT,1,WINGATTACK,5,WINGATTACK,8,WINGATTACK,12,WINGATTACK,15,WINGATTACK,19,PAYBACK,22,ROOST,25,WATERGUN","Height":"1.2","Weight":"28.0","Habitat":"Sea","Kind":"Water Bird","Pokedex":"It skims the tops of waves as it flies. When it spots prey, it uses its large beak to scoop up the victim with water. It protects its eggs in its beak.","Evolutions":null},{"Name":"Ralts","InternalName":"RALTS","Type1":"PSYCHIC","Type2":"FAIRY","HiddenAbility":"TELEPATHY","Moves":"1,GROWL,4,CONFUSION,6,DOUBLETEAM,9,TELEPORT,11,DISARMINGVOICE,14,LUCKYCHANT,17,MAGICALLEAF,19,HEALPULSE,22,DRAININGKISS,24,CALMMIND,27,PSYCHIC,29,IMPRISON,32,FUTURESIGHT,34,CHARM,37,HYPNOSIS,39,DREAMEATER,42,STOREDPOWER","Height":"0.4","Weight":"6.6","Habitat":"Urban","Kind":"Feeling","Pokedex":"A Ralts has the power to sense the emotions of people and PokÃ©mon with the horns on its head. It takes cover if it senses any hostility.","Evolutions":"KIRLIA,Level,20"},{"Name":"Kirlia","InternalName":"KIRLIA","Type1":"PSYCHIC","Type2":"FAIRY","HiddenAbility":"TELEPATHY","Moves":"1,GROWL,1,CONFUSION,1,DOUBLETEAM,1,TELEPORT,4,CONFUSION,6,DOUBLETEAM,9,TELEPORT,11,DISARMINGVOICE,14,LUCKYCHANT,17,MAGICALLEAF,19,HEALPULSE,23,DRAININGKISS,26,CALMMIND,30,PSYCHIC,33,IMPRISON,37,FUTURESIGHT,40,CHARM,44,HYPNOSIS,47,DREAMEATER,51,STOREDPOWER","Height":"0.8","Weight":"20.2","Habitat":"Urban","Kind":"Emotion","Pokedex":"A Kirlia has the psychic power to create a rip in the dimensions and see into the future. It is said to dance with pleasure on sunny mornings.","Evolutions":"GARDEVOIR,Level,30,GALLADE,ItemMale,DAWNSTONE"},{"Name":"Gardevoir","InternalName":"GARDEVOIR","Type1":"PSYCHIC","Type2":"FAIRY","HiddenAbility":"TELEPATHY","Moves":"1,MOONBLAST,1,STOREDPOWER,1,MISTYTERRAIN,1,HEALINGWISH,1,GROWL,1,CONFUSION,1,DOUBLETEAM,1,TELEPORT,4,CONFUSION,6,DOUBLETEAM,9,TELEPORT,11,DISARMINGVOICE,14,WISH,17,MAGICALLEAF,19,HEALPULSE,23,DRAININGKISS,26,CALMMIND,31,PSYCHIC,35,IMPRISON,40,FUTURESIGHT,44,CAPTIVATE,49,HYPNOSIS,53,DREAMEATER,58,STOREDPOWER,62,MOONBLAST","Height":"1.6","Weight":"48.4","Habitat":"Urban","Kind":"Embrace","Pokedex":"It apparently does not feel the pull of gravity because it supports itself with psychic power. It will give its life to protect its trainer.","Evolutions":null},{"Name":"Surskit","InternalName":"SURSKIT","Type1":"BUG","Type2":"WATER","HiddenAbility":"RAINDISH","Moves":"1,BUBBLE,6,QUICKATTACK,9,SWEETSCENT,14,WATERSPORT,17,BUBBLEBEAM,22,AGILITY,25,MIST,25,HAZE,30,AQUAJET,35,BATONPASS,38,STICKYWEB","Height":"0.5","Weight":"1.7","Habitat":"WatersEdge","Kind":"Pond Skater","Pokedex":"They gather on puddles after evening downpours, gliding across the surface of water as if sliding. It secretes honey with a sweet aroma from its head.","Evolutions":"MASQUERAIN,Level,22"},{"Name":"Masquerain","InternalName":"MASQUERAIN","Type1":"BUG","Type2":"FLYING","HiddenAbility":"UNNERVE","Moves":"1,QUIVERDANCE,1,WHIRLWIND,1,BUGBUZZ,1,OMINOUSWIND,1,BUBBLE,1,QUICKATTACK,1,SWEETSCENT,1,WATERSPORT,6,QUICKATTACK,9,SWEETSCENT,14,WATERSPORT,17,GUST,22,SCARYFACE,22,AIRCUTTER,26,STUNSPORE,32,SILVERWIND,38,AIRSLASH,42,BUGBUZZ,48,WHIRLWIND,52,QUIVERDANCE","Height":"0.8","Weight":"3.6","Habitat":"WatersEdge","Kind":"Eyeball","Pokedex":"It intimidates foes with the large eyelike patterns on its antennae. Because it can't fly if its wings get wet, it shelters itself from rain under large trees and eaves.","WildItemUncommon":"SILVERPOWDER","Evolutions":null},{"Name":"Shroomish","InternalName":"SHROOMISH","Type1":"GRASS","HiddenAbility":"QUICKFEET","Moves":"1,ABSORB,1,TACKLE,5,STUNSPORE,8,LEECHSEED,12,MEGADRAIN,15,HEADBUTT,19,MEGADRAIN,22,WORRYSEED,26,TACKLE","Height":"0.4","Weight":"4.5","Habitat":"Forest","Kind":"Mushroom","Pokedex":"It loves to eat damp, composted soil in forests. If you enter a forest after a long rain, you can see many Shroomish feasting on composted soil.","WildItemUncommon":"KEBIABERRY","Evolutions":"BRELOOM,Level,23"},{"Name":"Breloom","InternalName":"BRELOOM","Type1":"GRASS","Type2":"FIGHTING","HiddenAbility":"TECHNICIAN","Moves":"1,ABSORB,1,TACKLE,1,STUNSPORE,1,LEECHSEED,5,STUNSPORE,8,LEECHSEED,12,MEGADRAIN,15,HEADBUTT,19,FEINT,23,MACHPUNCH,28,FORCEPALM,33,MINDREADER,39,SKYUPPERCUT,44,SEEDBOMB,50,DYNAMICPUNCH","Height":"1.2","Weight":"39.2","Habitat":"Forest","Kind":"Mushroom","Pokedex":"It scatters spores from holes in the cap on its head. It loves warm and humid climates. It feeds on trees and plants in fields and forests.","WildItemUncommon":"KEBIABERRY","Evolutions":null},{"Name":"Slakoth","InternalName":"SLAKOTH","Type1":"NORMAL","Moves":"1,SCRATCH,1,YAWN,6,ENCORE,9,SLACKOFF,14,FEINTATTACK,17,AMNESIA,22,COVET,25,CHIPAWAY","Height":"0.8","Weight":"24.0","Habitat":"Forest","Kind":"Slacker","Pokedex":"It sleeps virtually all day and night long. It doesn't change its nest its entire life, but it sometimes travels great distances by swimming in rivers.","Evolutions":"VIGOROTH,Level,18"},{"Name":"Vigoroth","InternalName":"VIGOROTH","Type1":"NORMAL","Moves":"1,REVERSAL,1,SCRATCH,1,FOCUSENERGY,1,ENCORE,1,UPROAR,6,ENCORE,9,UPROAR,14,FURYSWIPES,17,ENDURE,23,SLASH,27,CHIPAWAY,37,FOCUSPUNCH,43,REVERSAL","Height":"1.4","Weight":"46.5","Habitat":"Forest","Kind":"Wild Monkey","Pokedex":"It can't keep still because its blood boils with energy. It runs through the fields and mountains all day to calm itself. If it doesn't, it can't sleep at night.","Evolutions":"SLAKING,Level,36"},{"Name":"Slaking","InternalName":"SLAKING","Type1":"NORMAL","Moves":"1,HAMMERARM,1,PUNISHMENT,1,FLING,1,SCRATCH,1,YAWN,1,ENCORE,1,SLACKOFF,6,ENCORE,9,SLACKOFF,14,FEINTATTACK,17,AMNESIA,23,COVET,27,CHIPAWAY,36,SWAGGER,39,FLAIL,47,FLING,53,PUNISHMENT,61,HAMMERARM","Height":"2.0","Weight":"130.5","Habitat":"Forest","Kind":"Lazy","Pokedex":"Hordes of Slaking gather around trees when fruits come into season. They wait around patiently for ripened fruits to fall out of the trees.","Evolutions":null},{"Name":"Nincada","InternalName":"NINCADA","Type1":"BUG","Type2":"GROUND","HiddenAbility":"RUNAWAY","Moves":"1,SCRATCH,1,HARDEN,5,LEECHLIFE,9,SANDATTACK,13,FURYSWIPES,17,MUDSLAP,21,METALCLAW,25,MINDREADER","Height":"0.5","Weight":"5.5","Habitat":"Forest","Kind":"Trainee","Pokedex":"It makes its nest at the roots of a mighty tree. Using its whiskerlike antennae, it probes its surroundings in the pitch-black darkness of soil.","Evolutions":"NINJASK,Ninjask,20,SHEDINJA,Shedinja,20"},{"Name":"Ninjask","InternalName":"NINJASK","Type1":"BUG","Type2":"FLYING","HiddenAbility":"INFILTRATOR","Moves":"1,BUGBITE,1,SCRATCH,1,HARDEN,1,LEECHLIFE,1,SANDATTACK,5,LEECHLIFE,9,SANDATTACK,13,FURYSWIPES,17,AGILITY,20,DOUBLETEAM,20,FURYCUTTER,20,SCREECH,23,SLASH,29,MINDREADER,35,BATONPASS,41,SWORDSDANCE,47,XSCISSOR","Height":"0.8","Weight":"12.0","Habitat":"Forest","Kind":"Ninja","Pokedex":"Because it darts about vigorously at high speed, it is very difficult to see. Hearing its distinctive cries for too long induces a headache.","Evolutions":null},{"Name":"Shedinja","InternalName":"SHEDINJA","Type1":"BUG","Type2":"GHOST","Moves":"1,SCRATCH,1,HARDEN,5,LEECHLIFE,9,SANDATTACK,13,FURYSWIPES,17,SPITE,21,SHADOWSNEAK,25,MINDREADER,29,CONFUSERAY,33,SHADOWBALL,37,GRUDGE,41,HEALBLOCK,45,PHANTOMFORCE","Height":"0.8","Weight":"1.2","Habitat":"Forest","Kind":"Shed","Pokedex":"A peculiar PokÃ©mon that floats in air even though its wings remain completely still. The inside of its body is hollow and utterly dark.","Evolutions":null},{"Name":"Whismur","InternalName":"WHISMUR","Type1":"NORMAL","HiddenAbility":"RATTLED","Moves":"1,POUND,4,ECHOEDVOICE,8,ASTONISH,11,HOWL,15,SCREECH,18,SUPERSONIC,22,STOMP,25,UPROAR,29,ROAR,32,REST,36,SLEEPTALK,39,HYPERVOICE,43,SYNCHRONOISE","Height":"0.6","Weight":"16.3","Habitat":"Cave","Kind":"Whisper","Pokedex":"Its cries equal a jet plane in volume. It inhales through its ear canals. Because of this system, it can cry continually without having to catch its breath.","WildItemUncommon":"CHESTOBERRY","Evolutions":"LOUDRED,Level,20"},{"Name":"Loudred","InternalName":"LOUDRED","Type1":"NORMAL","HiddenAbility":"SCRAPPY","Moves":"1,POUND,1,ECHOEDVOICE,1,ASTONISH,1,HOWL,4,ECHOEDVOICE,9,ASTONISH,11,HOWL,15,SCREECH,18,ASTONISH,20,BITE,23,STOMP,27,UPROAR","Height":"1.0","Weight":"40.5","Habitat":"Cave","Kind":"Big Voice","Pokedex":"It positions the round speakers on its head to assail foes with ultrasonic waves at massive volume. It builds power by stomping the ground.","WildItemUncommon":"CHESTOBERRY","Evolutions":"EXPLOUD,Level,40"},{"Name":"Exploud","InternalName":"EXPLOUD","Type1":"NORMAL","HiddenAbility":"SCRAPPY","Moves":"1,BOOMBURST,1,ICEFANG,1,FIREFANG,1,THUNDERFANG,1,POUND,1,ECHOEDVOICE,1,ASTONISH,1,HOWL,4,ECHOEDVOICE,9,ASTONISH,11,HOWL,15,SCREECH,18,SUPERSONIC,20,BITE,23,STOMP,27,UPROAR,32,ROAR,36,REST,40,CRUNCH,42,SLEEPTALK,47,HYPERVOICE,53,SYNCHRONOISE,58,BOOMBURST,64,HYPERBEAM","Height":"1.5","Weight":"84.0","Habitat":"Cave","Kind":"Loud Noise","Pokedex":"It has sound-generating organs all over its body. It communicates with others by adjusting the tone and volume of the cries it emits.","WildItemUncommon":"CHESTOBERRY","Evolutions":null},{"Name":"Makuhita","InternalName":"MAKUHITA","Type1":"FIGHTING","HiddenAbility":"SHEERFORCE","Moves":"1,TACKLE,1,FOCUSENERGY,4,SANDATTACK,7,ARMTHRUST,10,FAKEOUT,13,FORCEPALM,16,WHIRLWIND,19,KNOCKOFF,22,VITALTHROW,25,BELLYDRUM,28,SMELLINGSALT,31,SEISMICTOSS,34,WAKEUPSLAP,37,ENDURE,40,CLOSECOMBAT,43,REVERSAL,46,HEAVYSLAM","Height":"1.0","Weight":"86.4","Habitat":"Mountain","Kind":"Guts","Pokedex":"It loves to toughen up its body above all else. If you hear quaking rumbles in a cave, it is the sound of Makuhita undertaking strenuous training.","Evolutions":"HARIYAMA,Level,24"},{"Name":"Hariyama","InternalName":"HARIYAMA","Type1":"FIGHTING","HiddenAbility":"SHEERFORCE","Moves":"1,BRINE,1,TACKLE,1,FOCUSENERGY,1,SANDATTACK,1,ARMTHRUST,4,SANDATTACK,7,ARMTHRUST,10,FAKEOUT,13,FORCEPALM,16,WHIRLWIND,19,KNOCKOFF,22,VITALTHROW,26,BELLYDRUM,30,SMELLINGSALT,34,SEISMICTOSS,38,WAKEUPSLAP,42,ENDURE,46,CLOSECOMBAT,50,REVERSAL,54,HEAVYSLAM","Height":"2.3","Weight":"253.8","Habitat":"Mountain","Kind":"Arm Thrust","Pokedex":"It has the habit of challenging others without hesitation to tests of strength. It's been known to stand on train tracks and stop trains using forearm thrusts.","WildItemUncommon":"KINGSROCK","Evolutions":null},{"Name":"Azurill","InternalName":"AZURILL","Type1":"NORMAL","Type2":"FAIRY","HiddenAbility":"SAPSIPPER","Moves":"1,SPLASH,1,WATERGUN,2,TAILWHIP,5,WATERSPORT,7,BUBBLE,10,CHARM,13,BUBBLEBEAM,16,HELPINGHAND,20,SLAM,23,BOUNCE","Height":"0.2","Weight":"2.0","Habitat":"WatersEdge","Kind":"Polka Dot","Pokedex":"Its tail, which is packed with nutrition, is very bouncy like a rubber ball. On sunny days they gather at the edge of water and splash about for fun.","Evolutions":"MARILL,Happiness,"},{"Name":"Nosepass","InternalName":"NOSEPASS","Type1":"ROCK","HiddenAbility":"SANDFORCE","Moves":"1,TACKLE,4,HARDEN,7,BLOCK,10,ROCKTHROW,13,THUNDERWAVE,16,REST,19,ROCKTHROW,22,ROCKSLIDE,25,POWERGEM","Height":"1.0","Weight":"97.0","Habitat":"Cave","Kind":"Compass","Pokedex":"Its body emits a powerful magnetism. It feeds on prey that is pulled in by the force. Its magnetism is stronger in cold seasons.","WildItemUncommon":"HARDSTONE","Evolutions":"PROBOPASS,Location,49,PROBOPASS,Location,50,PROBOPASS,Location,51"},{"Name":"Skitty","InternalName":"SKITTY","Type1":"NORMAL","HiddenAbility":"WONDERSKIN","Moves":"1,FAKEOUT,1,GROWL,1,TAILWHIP,1,TACKLE,4,FORESIGHT,7,SING,10,ATTRACT,13,DISARMINGVOICE,16,DOUBLESLAP,19,COPYCAT,22,FEINTATTACK,25,CHARM,28,WAKEUPSLAP","Height":"0.6","Weight":"11.0","Habitat":"Forest","Kind":"Kitten","Pokedex":"A Skitty's adorably cute behavior makes it highly popular. In battle, it makes its tail puff out. It threatens foes with a sharp growl.","WildItemUncommon":"LEPPABERRY","Evolutions":"DELCATTY,Item,MOONSTONE"},{"Name":"Delcatty","InternalName":"DELCATTY","Type1":"NORMAL","HiddenAbility":"WONDERSKIN","Moves":"1,FAKEOUT,1,SING,1,ATTRACT,1,DOUBLESLAP","Height":"1.1","Weight":"32.6","Habitat":"Forest","Kind":"Prim","Pokedex":"Rather than keeping a permanent lair, it habitually seeks comfortable spots and sleeps there. It is nocturnal and becomes active at dusk.","WildItemUncommon":"LEPPABERRY","Evolutions":null},{"Name":"Sableye","InternalName":"SABLEYE","Type1":"DARK","Type2":"GHOST","HiddenAbility":"PRANKSTER","Moves":"1,LEER,1,SCRATCH,4,FORESIGHT,6,NIGHTSHADE,9,ASTONISH,11,FURYSWIPES,14,DETECT,16,SHADOWSNEAK,19,FEINTATTACK,21,FAKEOUT,24,PUNISHMENT,26,KNOCKOFF,29,SHADOWCLAW,31,CONFUSERAY,34,ZENHEADBUTT,36,POWERGEM,39,SHADOWBALL,41,FOULPLAY,44,QUASH,46,MEANLOOK","Height":"0.5","Weight":"11.0","Habitat":"Cave","Kind":"Darkness","Pokedex":"It digs branching holes in caves using its sharp claws in search of food--raw gems. A Sableye lurks in darkness and is seen only rarely.","Evolutions":null},{"Name":"Mawile","InternalName":"MAWILE","Type1":"STEEL","Type2":"FAIRY","HiddenAbility":"SHEERFORCE","Moves":"1,PLAYROUGH,1,IRONHEAD,1,TAUNT,1,GROWL,1,FAIRYWIND,1,ASTONISH,5,FAKETEARS,9,BITE,13,SWEETSCENT,17,VICEGRIP,21,FEINTATTACK,25,BATONPASS,29,CRUNCH,33,IRONDEFENSE,37,SUCKERPUNCH,41,STOCKPILE,41,SWALLOW,41,SPITUP,45,IRONHEAD,49,PLAYROUGH","Height":"0.6","Weight":"11.5","Habitat":"Cave","Kind":"Deceiver","Pokedex":"Its giant jaws are actually steel horns that transformed. It fools foes into complacency with its adorable gestures, then chomps them with its huge jaws.","WildItemUncommon":"OCCABERRY","Evolutions":null},{"Name":"Aron","InternalName":"ARON","Type1":"STEEL","Type2":"ROCK","HiddenAbility":"HEAVYMETAL","Moves":"1,TACKLE,1,HARDEN,4,MUDSLAP,7,HEADBUTT,10,METALCLAW,13,ROCKTOMB,16,PROTECT,19,ROAR,22,IRONHEAD,25,ROCKSLIDE,28,TAKEDOWN,31,METALSOUND,34,IRONTAIL,37,IRONDEFENSE,40,DOUBLEEDGE,43,AUTOTOMIZE,46,HEAVYSLAM,49,METALBURST","Height":"0.4","Weight":"60.0","Habitat":"Mountain","Kind":"Iron Armor","Pokedex":"A PokÃ©mon that is clad in steel armor. A new suit of armor is made when it evolves. The old, discarded armor is salvaged as metal for making iron products.","WildItemUncommon":"HARDSTONE","Evolutions":"LAIRON,Level,32"},{"Name":"Lairon","InternalName":"LAIRON","Type1":"STEEL","Type2":"ROCK","HiddenAbility":"HEAVYMETAL","Moves":"1,TACKLE,1,HARDEN,1,MUDSLAP,1,HEADBUTT,4,MUDSLAP,7,HEADBUTT,10,METALCLAW,13,ROCKTOMB,16,PROTECT,19,ROAR,22,IRONHEAD,25,ROCKSLIDE,28,TAKEDOWN,31,METALSOUND,35,IRONTAIL,39,IRONDEFENSE,43,DOUBLEEDGE,47,AUTOTOMIZE,51,HEAVYSLAM,55,METALBURST","Height":"0.9","Weight":"120.0","Habitat":"Mountain","Kind":"Iron Armor","Pokedex":"When two Lairon meet in the wild, they fight for territory by bashing into each other with their steel bodies. The sound of their collision carries for miles.","WildItemUncommon":"HARDSTONE","Evolutions":"AGGRON,Level,42"},{"Name":"Aggron","InternalName":"AGGRON","Type1":"STEEL","Type2":"ROCK","HiddenAbility":"HEAVYMETAL","Moves":"1,TACKLE,1,HARDEN,1,MUDSLAP,1,HEADBUTT,4,MUDSLAP,7,HEADBUTT,10,METALCLAW,13,ROCKTOMB,16,PROTECT,19,ROAR,22,IRONHEAD,25,ROCKSLIDE,28,TAKEDOWN,31,METALSOUND,35,IRONTAIL,39,IRONDEFENSE,45,DOUBLEEDGE,51,AUTOTOMIZE,57,HEAVYSLAM,63,METALBURST","Height":"2.1","Weight":"360.0","Habitat":"Mountain","Kind":"Iron Armor","Pokedex":"Its iron horns grow longer a little at a time. They are used to determine the Aggron's age. The gouges in its armor are worn with pride as mementos from battles.","WildItemUncommon":"HARDSTONE","Evolutions":null},{"Name":"Meditite","InternalName":"MEDITITE","Type1":"FIGHTING","Type2":"PSYCHIC","HiddenAbility":"TELEPATHY","Moves":"1,BIDE,4,MEDITATE,7,CONFUSION,9,DETECT,12,ENDURE,15,FEINT,17,FORCEPALM,20,HIDDENPOWER,23,CALMMIND,25,MINDREADER","Height":"0.6","Weight":"11.2","Habitat":"Mountain","Kind":"Meditate","Pokedex":"It continually meditates for hours every day. As a result of rigorous and dedicated yoga training, it has tempered its spiritual power so much it can fly.","Evolutions":"MEDICHAM,Level,37"},{"Name":"Medicham","InternalName":"MEDICHAM","Type1":"FIGHTING","Type2":"PSYCHIC","HiddenAbility":"TELEPATHY","Moves":"1,ZENHEADBUTT,1,FIREPUNCH,1,THUNDERPUNCH,1,ICEPUNCH,1,BIDE,1,MEDITATE,1,CONFUSION,1,DETECT,4,MEDITATE,7,CONFUSION,9,DETECT,12,ENDURE,15,FEINT,17,FORCEPALM,20,HIDDENPOWER,23,CALMMIND,25,MINDREADER,28,HIJUMPKICK,31,PSYCHUP,33,ACUPRESSURE,36,POWERTRICK,42,REVERSAL,47,RECOVER","Height":"1.3","Weight":"31.5","Habitat":"Mountain","Kind":"Meditate","Pokedex":"Through crushingly harsh yoga training, it gained the power to foretell its foe's actions. It battles with elegant, dance- like movement.","Evolutions":null},{"Name":"Electrike","InternalName":"ELECTRIKE","Type1":"ELECTRIC","HiddenAbility":"MINUS","Moves":"1,TACKLE,1,THUNDERWAVE,4,LEER,7,HOWL,10,QUICKATTACK,13,SPARK,16,ODORSLEUTH,19,THUNDERFANG,24,BITE,29,DISCHARGE,34,ROAR,39,WILDCHARGE,44,CHARGE,49,THUNDER","Height":"0.6","Weight":"15.2","Habitat":"Grassland","Kind":"Lightning","Pokedex":"It generates electricity using friction from the atmosphere. In seasons with especially arid air, its entire body blazes with violent showers of sparks.","Evolutions":"MANECTRIC,Level,26"},{"Name":"Manectric","InternalName":"MANECTRIC","Type1":"ELECTRIC","HiddenAbility":"MINUS","Moves":"1,ELECTRICTERRAIN,1,FIREFANG,1,TACKLE,1,THUNDERWAVE,1,LEER,1,HOWL,4,LEER,7,HOWL,10,QUICKATTACK,13,SPARK,16,ODORSLEUTH,19,THUNDERFANG,24,BITE,30,DISCHARGE,36,ROAR,42,WILDCHARGE,48,CHARGE,54,THUNDER,60,ELECTRICTERRAIN","Height":"1.5","Weight":"40.2","Habitat":"Grassland","Kind":"Discharge","Pokedex":"Because lightning falls in their vicinities, Manectric were thought to have been born from lightning. In battle, they create thunderclouds.","Evolutions":null},{"Name":"Plusle","InternalName":"PLUSLE","Type1":"ELECTRIC","Moves":"1,NUZZLE,1,PLAYNICE,1,GROWL,1,THUNDERWAVE,1,QUICKATTACK,4,HELPINGHAND,7,SPARK,10,ENCORE,13,BESTOW,16,SWIFT,19,ELECTROBALL,22,COPYCAT,25,CHARM,28,CHARGE,31,DISCHARGE,34,BATONPASS,37,AGILITY,40,LASTRESORT,43,THUNDER,46,NASTYPLOT,49,ENTRAINMENT","Height":"0.4","Weight":"4.2","Habitat":"Grassland","Kind":"Cheering","Pokedex":"It has the trait of cheering on its fellow PokÃ©mon. By shorting out the electricity it releases from its paws, it creates pom-poms for cheering.","Evolutions":null},{"Name":"Minun","InternalName":"MINUN","Type1":"ELECTRIC","Moves":"1,NUZZLE,1,PLAYNICE,1,GROWL,1,THUNDERWAVE,1,QUICKATTACK,4,HELPINGHAND,7,SPARK,10,ENCORE,13,SWITCHEROO,16,SWIFT,19,ELECTROBALL,22,COPYCAT,25,FAKETEARS,28,CHARGE,31,DISCHARGE,34,BATONPASS,37,AGILITY,40,TRUMPCARD,43,THUNDER,46,NASTYPLOT,49,ENTRAINMENT","Height":"0.4","Weight":"4.2","Habitat":"Grassland","Kind":"Cheering","Pokedex":"At a meeting of PokÃ©mon academics, it was announced that simultaneous exposure to electricity from a Plusle and Minun will promote circulation and boost vitality.","Evolutions":null},{"Name":"Volbeat","InternalName":"VOLBEAT","Type1":"BUG","HiddenAbility":"PRANKSTER","Moves":"1,FLASH,1,TACKLE,5,DOUBLETEAM,8,CONFUSERAY,12,QUICKATTACK,15,STRUGGLEBUG,19,MOONLIGHT,22,TAILGLOW,26,QUICKATTACK","Height":"0.7","Weight":"17.7","Habitat":"Forest","Kind":"Firefly","Pokedex":"With their taillights lit, Volbeat fly in a swarm, drawing geometric designs in the night sky. They move their nests if their pond water becomes dirty.","Evolutions":null},{"Name":"Illumise","InternalName":"ILLUMISE","Type1":"BUG","HiddenAbility":"PRANKSTER","Moves":"1,PLAYNICE,1,TACKLE,5,SWEETSCENT,9,CHARM,12,QUICKATTACK,15,STRUGGLEBUG,19,MOONLIGHT,22,WISH,26,ENCORE,29,FLATTER,33,ZENHEADBUTT,36,HELPINGHAND,40,BUGBUZZ,43,PLAYROUGH,47,COVET","Height":"0.6","Weight":"17.7","Habitat":"Forest","Kind":"Firefly","Pokedex":"A nocturnal PokÃ©mon that becomes active upon nightfall. It leads a Volbeat swarm to draw patterns in the night sky. Over 200 different patterns have been confirmed.","Evolutions":null},{"Name":"Roselia","InternalName":"ROSELIA","Type1":"GRASS","Type2":"POISON","HiddenAbility":"LEAFGUARD","Moves":"1,ABSORB,4,GROWTH,7,POISONSTING,10,STUNSPORE,13,MEGADRAIN,16,LEECHSEED,19,MAGICALLEAF,22,GRASSWHISTLE,25,GIGADRAIN,28,TOXICSPIKES,31,SWEETSCENT,34,INGRAIN,37,PETALBLIZZARD,40,TOXIC,43,AROMATHERAPY,46,SYNTHESIS,50,PETALDANCE","Height":"0.3","Weight":"2.0","Habitat":"Grassland","Kind":"Thorn","Pokedex":"A Roselia that drinks nutritionally rich springwater blooms with lovely flowers. The fragrance of its flowers has the effect of making its foes careless.","WildItemUncommon":"POISONBARB","Evolutions":"ROSERADE,Item,SHINYSTONE"},{"Name":"Gulpin","InternalName":"GULPIN","Type1":"POISON","HiddenAbility":"GLUTTONY","Moves":"1,POUND,5,YAWN,8,POISONGAS,10,SLUDGE,12,AMNESIA,17,ACIDSPRAY,20,ENCORE,25,TOXIC,28,STOCKPILE,28,SPITUP,28,SWALLOW,33,SLUDGEBOMB,36,GASTROACID,41,BELCH,44,WRINGOUT,49,GUNKSHOT","Height":"0.4","Weight":"10.3","Habitat":"Grassland","Kind":"Stomach","Pokedex":"This PokÃ©mon's stomach fluid can even digest scrap iron. In one gulp, it can swallow something that is as large as itself.","WildItemUncommon":"BIGPEARL","Evolutions":"SWALOT,Level,26"},{"Name":"Swalot","InternalName":"SWALOT","Type1":"POISON","HiddenAbility":"GLUTTONY","Moves":"1,GUNKSHOT,1,WRINGOUT,1,POUND,1,YAWN,1,POISONGAS,1,SLUDGE,5,YAWN,8,POISONGAS,10,SLUDGE,12,AMNESIA,17,ACIDSPRAY,20,ENCORE,25,TOXIC,26,BODYSLAM,30,STOCKPILE,30,SPITUP,30,SWALLOW,37,SLUDGEBOMB,42,GASTROACID,49,BELCH,54,WRINGOUT,61,GUNKSHOT","Height":"1.7","Weight":"80.0","Habitat":"Grassland","Kind":"Poison Bag","Pokedex":"Its powerful stomach acid is capable of digesting almost anything. The one thing in the whole world a Swalot can't digest is its own stomach.","WildItemUncommon":"BIGPEARL","Evolutions":null},{"Name":"Carvanha","InternalName":"CARVANHA","Type1":"WATER","Type2":"DARK","HiddenAbility":"SPEEDBOOST","Moves":"1,LEER,1,BITE,4,RAGE,8,FOCUSENERGY,11,AQUAJET,15,ASSURANCE,18,SCREECH,22,SWAGGER,25,ICEFANG,29,SCARYFACE,32,POISONFANG,36,CRUNCH,39,AGILITY,43,TAKEDOWN","Height":"0.8","Weight":"20.8","Habitat":"Sea","Kind":"Savage","Pokedex":"Carvanha attack ships in swarms, making them sink. Although it is said to be a very vicious PokÃ©mon, it timidly flees as soon as it finds itself alone.","WildItemUncommon":"DEEPSEATOOTH","Evolutions":"SHARPEDO,Level,30"},{"Name":"Sharpedo","InternalName":"SHARPEDO","Type1":"WATER","Type2":"DARK","HiddenAbility":"SPEEDBOOST","Moves":"1,NIGHTSLASH,1,FEINT,1,LEER,1,BITE,1,RAGE,1,FOCUSENERGY,4,RAGE,8,FOCUSENERGY,11,AQUAJET,15,ASSURANCE,18,SCREECH,22,SWAGGER,25,ICEFANG,29,SCARYFACE,30,SLASH,34,POISONFANG,40,CRUNCH,45,AGILITY,51,SKULLBASH,56,TAUNT,62,NIGHTSLASH","Height":"1.8","Weight":"88.8","Habitat":"Sea","Kind":"Brutal","Pokedex":"The vicious and sly gangster of the sea. Its skin is specially textured to minimize drag in water. Its speed tops out at over 75 miles per hour.","WildItemUncommon":"DEEPSEATOOTH","Evolutions":null},{"Name":"Wailmer","InternalName":"WAILMER","Type1":"WATER","HiddenAbility":"PRESSURE","Moves":"1,SPLASH,4,GROWL,7,WATERGUN,10,ROLLOUT,13,WHIRLPOOL,16,ASTONISH,19,WATERPULSE,22,MIST,25,BRINE,29,REST,33,DIVE,37,AMNESIA,41,WATERSPOUT,45,BOUNCE,49,HYDROPUMP,53,HEAVYSLAM","Height":"2.0","Weight":"130.0","Habitat":"Sea","Kind":"Ball Whale","Pokedex":"While this PokÃ©mon usually lives in the sea, it can survive on land, although not too long. It loses vitality if its body becomes dried out.","Evolutions":"WAILORD,Level,40"},{"Name":"Wailord","InternalName":"WAILORD","Type1":"WATER","HiddenAbility":"PRESSURE","Moves":"1,HEAVYSLAM,1,SPLASH,1,GROWL,1,WATERGUN,1,ROLLOUT,4,GROWL,7,WATERGUN,10,ROLLOUT,13,WHIRLPOOL,16,ASTONISH,19,WATERPULSE,22,MIST,25,REST,29,BRINE,33,WATERSPOUT,37,AMNESIA,44,DIVE,51,BOUNCE,58,HYDROPUMP,65,HEAVYSLAM","Height":"14.5","Weight":"398.0","Habitat":"Sea","Kind":"Float Whale","Pokedex":"It breathes through nostrils that it raises above the sea. By inhaling to its maximum capacity, a Wailord can dive close to 10,000 feet beneath the waves.","Evolutions":null},{"Name":"Numel","InternalName":"NUMEL","Type1":"FIRE","Type2":"GROUND","HiddenAbility":"OWNTEMPO","Moves":"1,GROWL,1,TACKLE,5,EMBER,8,FOCUSENERGY,12,MAGNITUDE,15,FLAMEBURST,19,AMNESIA,22,LAVAPLUME,26,EARTHPOWER,29,CURSE,31,TAKEDOWN,36,YAWN,40,EARTHQUAKE,43,FLAMETHROWER,47,DOUBLEEDGE","Height":"0.7","Weight":"24.0","Habitat":"Mountain","Kind":"Numb","Pokedex":"A Numel stores boiling magma in the hump on its back. It is a hardy PokÃ©mon that can transport a 220-pound load. It has served humans at work since long ago.","WildItemCommon":"RAWSTBERRY","WildItemUncommon":"RAWSTBERRY","WildItemRare":"RAWSTBERRY","Evolutions":"CAMERUPT,Level,33"},{"Name":"Camerupt","InternalName":"CAMERUPT","Type1":"FIRE","Type2":"GROUND","HiddenAbility":"ANGERPOINT","Moves":"1,FISSURE,1,ERUPTION,1,GROWL,1,TACKLE,1,EMBER,1,FOCUSENERGY,5,EMBER,8,FOCUSENERGY,12,MAGNITUDE,15,FLAMEBURST,19,AMNESIA,22,LAVAPLUME,26,EARTHPOWER,29,CURSE,31,TAKEDOWN,33,ROCKSLIDE,39,YAWN,46,EARTHQUAKE,52,ERUPTION,59,FISSURE","Height":"1.9","Weight":"220.0","Habitat":"Mountain","Kind":"Eruption","Pokedex":"A PokÃ©mon that lives in the crater of a volcano. Every 10 years, the volcanoes on its back erupt violently. Research is under way on the cause of eruption.","WildItemCommon":"RAWSTBERRY","WildItemUncommon":"RAWSTBERRY","WildItemRare":"RAWSTBERRY","Evolutions":null},{"Name":"Torkoal","InternalName":"TORKOAL","Type1":"FIRE","HiddenAbility":"SHELLARMOR","Moves":"1,EMBER,4,SMOG,7,WITHDRAW,10,RAPIDSPIN,13,FIRESPIN,15,SMOKESCREEN,18,FLAMEWHEEL,22,CURSE,25,LAVAPLUME,27,BODYSLAM,30,PROTECT,34,FLAMETHROWER,38,IRONDEFENSE,40,AMNESIA,42,FLAIL,45,HEATWAVE,47,SHELLSMASH,50,INFERNO","Height":"0.5","Weight":"80.4","Habitat":"Mountain","Kind":"Coal","Pokedex":"It battles using energy it gets from burning coal. When loosing smoke from its nostrils, it lets off a sound that is similar to a locomotive's horn.","Evolutions":null},{"Name":"Spoink","InternalName":"SPOINK","Type1":"PSYCHIC","HiddenAbility":"GLUTTONY","Moves":"1,SPLASH,7,PSYWAVE,10,ODORSLEUTH,14,PSYBEAM,15,PSYCHUP,18,CONFUSERAY,21,MAGICCOAT,26,ZENHEADBUTT,29,POWERGEM,29,REST,33,SNORE,38,PSYSHOCK,40,PAYBACK,44,PSYCHIC,50,BOUNCE","Height":"0.7","Weight":"30.6","Habitat":"Mountain","Kind":"Bounce","Pokedex":"A PokÃ©mon that manipulates psychic power at will. It doesn't stop bouncing even when it is asleep. It loves eating mushrooms that grow underground.","WildItemUncommon":"TANGABERRY","Evolutions":"GRUMPIG,Level,32"},{"Name":"Grumpig","InternalName":"GRUMPIG","Type1":"PSYCHIC","HiddenAbility":"GLUTTONY","Moves":"1,SPLASH,1,PSYWAVE,1,ODORSLEUTH,1,PSYBEAM,7,PSYWAVE,10,ODORSLEUTH,14,PSYBEAM,15,PSYCHUP,18,CONFUSERAY,21,MAGICCOAT,26,ZENHEADBUTT,29,POWERGEM,32,TEETERDANCE,35,REST,35,SNORE,42,PSYSHOCK,46,PAYBACK,52,PSYCHIC,60,BOUNCE","Height":"0.9","Weight":"71.5","Habitat":"Mountain","Kind":"Manipulate","Pokedex":"It stores power in the black pearls on its forehead. When it uses psychic power, it performs an odd dance step. Its style of dancing became hugely popular overseas.","WildItemUncommon":"TANGABERRY","Evolutions":null},{"Name":"Spinda","InternalName":"SPINDA","Type1":"NORMAL","HiddenAbility":"CONTRARY","Moves":"1,TACKLE,5,COPYCAT,10,FEINTATTACK,14,PSYBEAM,19,HYPNOSIS,23,DIZZYPUNCH,28,SUCKERPUNCH,32,TEETERDANCE,37,UPROAR,41,PSYCHUP,46,DOUBLEEDGE,50,FLAIL,55,THRASH","Height":"1.1","Weight":"5.0","Habitat":"Mountain","Kind":"Spot Panda","Pokedex":"It is distinguished by a pattern of spots that is always different. Its unsteady, tottering walk has the effect of fouling its foe's aim.","WildItemUncommon":"CHESTOBERRY","Evolutions":null},{"Name":"Trapinch","InternalName":"TRAPINCH","Type1":"GROUND","HiddenAbility":"SHEERFORCE","Moves":"1,SANDATTACK,1,BITE,1,FEINTATTACK,1,BIDE,5,MUDSLAP,8,BULLDOZE,12,SANDTOMB,15,ROCKSLIDE,19,DIG,22,CRUNCH,26,EARTHPOWER,29,FEINT,33,EARTHQUAKE,36,SANDSTORM,40,SUPERPOWER,43,HYPERBEAM,47,FISSURE","Height":"0.7","Weight":"15.0","Habitat":"RoughTerrain","Kind":"Ant Pit","Pokedex":"Its big jaws crunch through boulders. Because its head is so big, it has a hard time getting back upright if it tips over onto its back.","WildItemUncommon":"SOFTSAND","Evolutions":"VIBRAVA,Level,35"},{"Name":"Vibrava","InternalName":"VIBRAVA","Type1":"GROUND","Type2":"DRAGON","Moves":"1,SANDATTACK,1,SONICBOOM,1,FEINTATTACK,1,BIDE,5,MUDSLAP,8,BULLDOZE,12,SANDTOMB,15,ROCKSLIDE,19,SUPERSONIC,22,SCREECH,26,EARTHPOWER,29,BUGBUZZ,33,EARTHQUAKE,35,DRAGONBREATH,36,SANDSTORM,40,UPROAR,43,HYPERBEAM,47,BOOMBURST","Height":"1.1","Weight":"15.3","Habitat":"RoughTerrain","Kind":"Vibration","Pokedex":"It looses ultrasonic waves by rubbing its wings together. Since a Vibrava's wings are still in the process of growing, it can only fly short distances.","Evolutions":"FLYGON,Level,45"},{"Name":"Flygon","InternalName":"FLYGON","Type1":"GROUND","Type2":"DRAGON","Moves":"1,SANDATTACK,1,SONICBOOM,1,FEINTATTACK,1,BIDE,5,MUDSLAP,8,BULLDOZE,12,SANDTOMB,15,ROCKSLIDE,19,SUPERSONIC,22,SCREECH,26,EARTHPOWER,29,DRAGONTAIL,33,EARTHQUAKE,35,DRAGONBREATH,36,SANDSTORM,40,UPROAR,43,HYPERBEAM,45,DRAGONCLAW,47,DRAGONRUSH","Height":"2.0","Weight":"82.0","Habitat":"RoughTerrain","Kind":"Mystic","Pokedex":"The flapping of its wings sounds like singing. To prevent detection by enemies, it hides itself by flapping up a cloud of desert sand.","Evolutions":null},{"Name":"Cacnea","InternalName":"CACNEA","Type1":"GRASS","HiddenAbility":"WATERABSORB","Moves":"1,POISONSTING,1,LEER,4,ABSORB,7,GROWTH,10,LEECHSEED,13,SANDATTACK,16,NEEDLEARM,19,FEINTATTACK,22,INGRAIN,26,PAYBACK,30,SPIKES,34,SUCKERPUNCH,38,PINMISSILE,42,ENERGYBALL,46,COTTONSPORE,50,SANDSTORM,54,DESTINYBOND","Height":"0.4","Weight":"51.3","Habitat":"RoughTerrain","Kind":"Cactus","Pokedex":"Cacnea live in deserts with virtually no rainfall. It battles by swinging its thick, spiked arms. Once a year, a yellow flower blooms.","WildItemUncommon":"STICKYBARB","Evolutions":"CACTURNE,Level,32"},{"Name":"Cacturne","InternalName":"CACTURNE","Type1":"GRASS","Type2":"DARK","HiddenAbility":"WATERABSORB","Moves":"1,DESTINYBOND,1,REVENGE,1,POISONSTING,1,LEER,1,ABSORB,1,GROWTH,4,ABSORB,7,GROWTH,10,LEECHSEED,13,SANDATTACK,16,NEEDLEARM,19,FEINTATTACK,22,INGRAIN,26,PAYBACK,30,SPIKES,32,SPIKYSHIELD,35,SUCKERPUNCH,38,PINMISSILE,44,ENERGYBALL,49,COTTONSPORE,54,SANDSTORM,59,DESTINYBOND","Height":"1.3","Weight":"77.4","Habitat":"RoughTerrain","Kind":"Scarecrow","Pokedex":"After spending thousands of years in harsh deserts, its blood transformed into the same substances as sand. It is nocturnal, so it hunts at night.","WildItemUncommon":"STICKYBARB","Evolutions":null},{"Name":"Swablu","InternalName":"SWABLU","Type1":"NORMAL","Type2":"FLYING","HiddenAbility":"CLOUDNINE","Moves":"1,PECK,1,GROWL,3,ASTONISH,5,SING,7,FURYATTACK,9,SAFEGUARD,11,DISARMINGVOICE,14,MIST,17,ROUND,20,NATURALGIFT,23,TAKEDOWN,26,REFRESH,30,MIRRORMOVE,34,COTTONGUARD,38,DRAGONPULSE,42,PERISHSONG,46,MOONBLAST","Height":"0.4","Weight":"1.2","Habitat":"Forest","Kind":"Cotton Bird","Pokedex":"A PokÃ©mon that has wings like cottony clouds. After enduring winter, in which little food is available, Swablu flocks move closer to towns in the spring.","Evolutions":"ALTARIA,Level,35"},{"Name":"Altaria","InternalName":"ALTARIA","Type1":"DRAGON","Type2":"FLYING","HiddenAbility":"CLOUDNINE","Moves":"1,SKYATTACK,1,PLUCK,1,PECK,1,GROWL,1,ASTONISH,1,SING,3,ASTONISH,5,SING,7,FURYATTACK,9,SAFEGUARD,11,DISARMINGVOICE,14,MIST,17,ROUND,20,NATURALGIFT,23,TAKEDOWN,26,REFRESH,30,DRAGONDANCE,34,COTTONGUARD,35,DRAGONBREATH,40,DRAGONPULSE,46,PERISHSONG,52,MOONBLAST,59,SKYATTACK","Height":"1.1","Weight":"20.6","Habitat":"Forest","Kind":"Humming","Pokedex":"It hums in a beautiful soprano voice. It flies among white clouds in the blue sky. It launches intensely hot fireballs from its mouth.","Evolutions":null},{"Name":"Zangoose","InternalName":"ZANGOOSE","Type1":"NORMAL","HiddenAbility":"TOXICBOOST","Moves":"1,SCRATCH,1,LEER,5,QUICKATTACK,8,FURYCUTTER,12,PURSUIT,15,HONECLAWS,19,SLASH,22,REVENGE,26,CRUSHCLAW,29,FALSESWIPE,33,EMBARGO,36,DETECT,40,XSCISSOR,43,TAUNT,47,SWORDSDANCE,50,CLOSECOMBAT","Height":"1.3","Weight":"40.3","Habitat":"Grassland","Kind":"Cat Ferret","Pokedex":"When it battles, it stands on its hind legs and attacks with its sharply clawed forelegs. Its fur bristles if it encounters any Seviper.","WildItemUncommon":"QUICKCLAW","Evolutions":null},{"Name":"Seviper","InternalName":"SEVIPER","Type1":"POISON","HiddenAbility":"INFILTRATOR","Moves":"1,WRAP,1,SWAGGER,4,BITE,7,LICK,10,POISONTAIL,13,SCREECH,16,BITE,19,WRAP,22,NIGHTSLASH,25,VENOMDRENCH,28,NIGHTSLASH,31,GASTROACID,34,POISONJAB,37,HAZE,40,CRUNCH,43,BELCH,46,COIL,49,WRINGOUT","Height":"2.7","Weight":"52.5","Habitat":"Grassland","Kind":"Fang Snake","Pokedex":"Seviper and Zangoose are eternal rivals. It counters a Zangoose's dazzling agility with its swordlike tail, which also oozes a horrible poison.","Evolutions":null},{"Name":"Lunatone","InternalName":"LUNATONE","Type1":"ROCK","Type2":"PSYCHIC","Moves":"1,MOONBLAST,1,TACKLE,1,HARDEN,1,CONFUSION,1,ROCKTHROW,5,HYPNOSIS,9,ROCKPOLISH,13,PSYWAVE,17,EMBARGO,21,ROCKSLIDE,25,COSMICPOWER,29,PSYCHIC,33,HEALBLOCK,37,STONEEDGE,41,FUTURESIGHT,45,EXPLOSION,49,MAGICROOM","Height":"1.0","Weight":"168.0","Habitat":"Cave","Kind":"Meteorite","Pokedex":"It becomes very active on the night of a full moon. This PokÃ©mon was first discovered 40 years ago at the site of a meteor strike.","WildItemUncommon":"MOONSTONE","WildItemRare":"COMETSHARD","Evolutions":null},{"Name":"Solrock","InternalName":"SOLROCK","Type1":"ROCK","Type2":"PSYCHIC","Moves":"1,TACKLE,1,HARDEN,1,CONFUSION,1,ROCKTHROW,5,FIRESPIN,9,ROCKPOLISH,13,PSYWAVE,17,EMBARGO,21,ROCKSLIDE,25,COSMICPOWER,29,PSYCHIC,33,HEALBLOCK,37,STONEEDGE,41,SOLARBEAM,45,EXPLOSION,49,WONDERROOM","Height":"1.2","Weight":"154.0","Habitat":"Cave","Kind":"Meteorite","Pokedex":"Solar energy is the source of this PokÃ©mon's power. On sunny days, groups of Solrock line up facing the sun and absorb its light.","WildItemUncommon":"SUNSTONE","WildItemRare":"COMETSHARD","Evolutions":null},{"Name":"Barboach","InternalName":"BARBOACH","Type1":"WATER","Type2":"GROUND","HiddenAbility":"HYDRATION","Moves":"1,MUDSLAP,6,MUDSPORT,6,WATERSPORT,9,WATERGUN,13,MUDBOMB,15,AMNESIA,17,WATERPULSE,20,MAGNITUDE,25,REST,25,SNORE,28,AQUATAIL,32,EARTHQUAKE,35,MUDDYWATER,39,FUTURESIGHT,44,FISSURE","Height":"0.4","Weight":"1.9","Habitat":"WatersEdge","Kind":"Whiskers","Pokedex":"Its body is covered with a slimy film. The film acts as a barrier to prevent germs in muddy water from entering the Barboach's body.","Evolutions":"WHISCASH,Level,30"},{"Name":"Whiscash","InternalName":"WHISCASH","Type1":"WATER","Type2":"GROUND","HiddenAbility":"HYDRATION","Moves":"1,TICKLE,1,MUDSLAP,1,MUDSPORT,1,WATERSPORT,1,WATERGUN,6,MUDSPORT,6,WATERSPORT,9,WATERGUN,13,MUDBOMB,15,AMNESIA,17,WATERPULSE,20,MAGNITUDE,25,REST,25,SNORE,28,AQUATAIL,30,ZENHEADBUTT,34,EARTHQUAKE,39,MUDDYWATER,45,FUTURESIGHT,52,FISSURE","Height":"0.9","Weight":"23.6","Habitat":"WatersEdge","Kind":"Whiskers","Pokedex":"Mysteriously, it can foretell earthquakes. In the daytime, it sleeps in mud at the bottom of a pond. When it awakens, it continually feeds throughout the night.","Evolutions":null},{"Name":"Corphish","InternalName":"CORPHISH","Type1":"WATER","HiddenAbility":"ADAPTABILITY","Moves":"1,BUBBLE,5,HARDEN,7,VICEGRIP,10,LEER,14,BUBBLEBEAM,17,PROTECT,20,DOUBLEHIT,23,KNOCKOFF,26,NIGHTSLASH,31,RAZORSHELL,34,TAUNT,37,SWORDSDANCE,39,CRUNCH,43,CRABHAMMER,48,GUILLOTINE","Height":"0.6","Weight":"11.5","Habitat":"WatersEdge","Kind":"Ruffian","Pokedex":"Once it grips prey with its large pincers, it will never let go, no matter what. It is a hardy PokÃ©mon that can thrive in any environment.","Evolutions":"CRAWDAUNT,Level,30"},{"Name":"Crawdaunt","InternalName":"CRAWDAUNT","Type1":"WATER","Type2":"DARK","HiddenAbility":"ADAPTABILITY","Moves":"1,BUBBLE,1,HARDEN,1,VICEGRIP,1,LEER,5,HARDEN,7,VICEGRIP,10,LEER,14,BUBBLEBEAM,17,PROTECT,20,DOUBLEHIT,23,KNOCKOFF,26,NIGHTSLASH,30,SWIFT,32,RAZORSHELL,36,TAUNT,40,SWORDSDANCE,43,CRUNCH,48,CRABHAMMER,54,GUILLOTINE","Height":"1.1","Weight":"32.8","Habitat":"WatersEdge","Kind":"Rogue","Pokedex":"A brutish PokÃ©mon that loves to battle. A veteran Crawdaunt that has prevailed in hundreds of battles has giant pincers marked with countless scars.","Evolutions":null},{"Name":"Baltoy","InternalName":"BALTOY","Type1":"GROUND","Type2":"PSYCHIC","Moves":"1,HARDEN,1,CONFUSION,4,RAPIDSPIN,7,MUDSLAP,10,HEALBLOCK,13,ROCKTOMB,16,PSYBEAM,19,ANCIENTPOWER,22,COSMICPOWER,25,POWERTRICK,28,SELFDESTRUCT,31,EXTRASENSORY,34,GUARDSPLIT,34,POWERSPLIT,37,EARTHPOWER,40,SANDSTORM,43,IMPRISON,46,EXPLOSION","Height":"0.5","Weight":"21.5","Habitat":"RoughTerrain","Kind":"Clay Doll","Pokedex":"A Baltoy moves by spinning on its single foot. It has been depicted in murals adorning the walls of a once-bustling city in an ancient age.","Evolutions":"CLAYDOL,Level,36"},{"Name":"Claydol","InternalName":"CLAYDOL","Type1":"GROUND","Type2":"PSYCHIC","Moves":"1,TELEPORT,1,HARDEN,1,CONFUSION,1,RAPIDSPIN,4,RAPIDSPIN,7,MUDSLAP,10,HEALBLOCK,13,ROCKTOMB,16,PSYBEAM,19,ANCIENTPOWER,22,COSMICPOWER,25,POWERTRICK,28,SELFDESTRUCT,31,EXTRASENSORY,34,GUARDSPLIT,34,POWERSPLIT,36,HYPERBEAM,40,EARTHPOWER,46,SANDSTORM,52,IMPRISON,58,EXPLOSION","Height":"1.5","Weight":"108.0","Habitat":"RoughTerrain","Kind":"Clay Doll","Pokedex":"A Claydol sleeps while hovering in midair. Its arms are separate from its body. They are kept floating by the PokÃ©mon's manipulation of psychic power.","Evolutions":null},{"Name":"Lileep","InternalName":"LILEEP","Type1":"ROCK","Type2":"GRASS","HiddenAbility":"STORMDRAIN","Moves":"1,ASTONISH,1,CONSTRICT,5,ACID,9,INGRAIN,13,CONFUSERAY,17,ANCIENTPOWER,21,BRINE,26,GIGADRAIN,31,GASTROACID,36,AMNESIA,41,ENERGYBALL,46,STOCKPILE,46,SPITUP,46,SWALLOW,52,WRINGOUT","Height":"1.0","Weight":"23.8","Habitat":"Sea","Kind":"Sea Lily","Pokedex":"It disguises itself as seaweed by making its tentacles sway. Unsuspecting prey that come too close are swallowed whole. It became extinct 100 million years ago.","WildItemUncommon":"BIGROOT","Evolutions":"CRADILY,Level,40"},{"Name":"Cradily","InternalName":"CRADILY","Type1":"ROCK","Type2":"GRASS","HiddenAbility":"STORMDRAIN","Moves":"1,WRINGOUT,1,ASTONISH,1,CONSTRICT,1,ACID,1,INGRAIN,5,ACID,9,INGRAIN,13,CONFUSERAY,17,ANCIENTPOWER,21,BRINE,26,GIGADRAIN,31,GASTROACID,36,AMNESIA,44,ENERGYBALL,52,STOCKPILE,52,SPITUP,52,SWALLOW,61,WRINGOUT","Height":"1.5","Weight":"60.4","Habitat":"Sea","Kind":"Barnacle","Pokedex":"It drags its heavy body along the seafloor. It makes its nest in the shallows of warm seas. Cradily can be seen on beaches when the tide goes out.","WildItemUncommon":"BIGROOT","Evolutions":null},{"Name":"Anorith","InternalName":"ANORITH","Type1":"ROCK","Type2":"BUG","HiddenAbility":"SWIFTSWIM","Moves":"1,SCRATCH,1,HARDEN,4,MUDSPORT,7,WATERGUN,10,FURYCUTTER,13,SMACKDOWN,17,METALCLAW,21,ANCIENTPOWER,25,BUGBITE,29,BRINE,34,SLASH,39,CRUSHCLAW,44,XSCISSOR,49,PROTECT,55,ROCKBLAST","Height":"0.7","Weight":"12.5","Habitat":"WatersEdge","Kind":"Old Shrimp","Pokedex":"It was resurrected from a fossil using the power of science. It swims by undulating the eight wings at its sides. They were feet that adapted to life in the sea.","Evolutions":"ARMALDO,Level,40"},{"Name":"Armaldo","InternalName":"ARMALDO","Type1":"ROCK","Type2":"BUG","HiddenAbility":"SWIFTSWIM","Moves":"1,SCRATCH,1,HARDEN,1,MUDSPORT,1,WATERGUN,4,MUDSPORT,7,WATERGUN,10,FURYCUTTER,13,SMACKDOWN,17,METALCLAW,21,ANCIENTPOWER,25,SLASH,29,BRINE,34,SLASH,39,CRUSHCLAW,46,XSCISSOR,53,PROTECT,61,ROCKBLAST","Height":"1.5","Weight":"68.2","Habitat":"WatersEdge","Kind":"Plate","Pokedex":"Armaldo usually lives on land. However, when it hunts for prey, it dives beneath the ocean. It swims around using its two large wings.","Evolutions":null},{"Name":"Feebas","InternalName":"FEEBAS","Type1":"WATER","HiddenAbility":"ADAPTABILITY","Moves":"1,SPLASH,15,TACKLE,30,FLAIL","Height":"0.6","Weight":"7.4","Habitat":"WatersEdge","Kind":"Fish","Pokedex":"Feebas live in ponds that are heavily infested with weeds. Because of its hopelessly shabby appearance, it seems as if few trainers raise it.","Evolutions":"MILOTIC,Beauty,170,MILOTIC,TradeItem,PRISMSCALE"},{"Name":"Milotic","InternalName":"MILOTIC","Type1":"WATER","HiddenAbility":"CUTECHARM","Moves":"1,WRAP,1,WATERGUN,4,WATERSPORT,7,REFRESH,11,DISARMINGVOICE,14,TWISTER,17,WATERPULSE,21,AQUARING,24,CAPTIVATE,27,DRAGONTAIL,31,RECOVER,34,AQUATAIL,37,ATTRACT,41,SAFEGUARD,44,COIL,47,HYDROPUMP,51,RAINDANCE","Height":"6.2","Weight":"162.0","Habitat":"WatersEdge","Kind":"Tender","Pokedex":"It is said to live at the bottom of large lakes. Considered to be the most beautiful of all PokÃ©mon, it has been depicted in paintings and statues.","Evolutions":null},{"Name":"Castform","InternalName":"CASTFORM","Type1":"NORMAL","Moves":"1,TACKLE,10,WATERGUN,10,EMBER,10,POWDERSNOW,15,HEADBUTT,20,RAINDANCE,20,SUNNYDAY,20,HAIL,25,WEATHERBALL,35,HYDROPUMP,35,FIREBLAST,35,BLIZZARD,45,HURRICANE","Height":"0.3","Weight":"0.8","Habitat":"Grassland","Kind":"Weather","Pokedex":"It alters its form depending on the weather. Changes in the climate such as the temperature and humidity appear to affect its cellular structure.","FormNames":",Sunny Form,Rainy Form,Snowy Form","WildItemCommon":"MYSTICWATER","WildItemUncommon":"MYSTICWATER","WildItemRare":"MYSTICWATER","Evolutions":null},{"Name":"Kecleon","InternalName":"KECLEON","Type1":"NORMAL","Moves":"1,THIEF,1,TAILWHIP,1,ASTONISH,1,LICK,1,SCRATCH,4,BIND,7,SHADOWSNEAK,10,FEINT,13,FURYSWIPES,16,FEINTATTACK,18,PSYBEAM,21,ANCIENTPOWER,25,SLASH,30,CAMOUFLAGE,33,SHADOWCLAW,38,SCREECH,42,SUBSTITUTE,46,SUCKERPUNCH,50,SYNCHRONOISE","Height":"1.0","Weight":"22.0","Habitat":"Forest","Kind":"Color Swap","Pokedex":"A PokÃ©mon that has the ability to alter its body colors to match its surroundings. A Kecleon reverts to its original colors if it is startled.","WildItemUncommon":"PERSIMBERRY","Evolutions":null},{"Name":"Shuppet","InternalName":"SHUPPET","Type1":"GHOST","HiddenAbility":"CURSEDBODY","Moves":"1,KNOCKOFF,4,SCREECH,7,NIGHTSHADE,10,SPITE,13,SHADOWSNEAK,16,WILLOWISP,19,FEINTATTACK,22,HEX,26,CURSE,30,SHADOWBALL,34,EMBARGO,38,SUCKERPUNCH,42,SNATCH,46,GRUDGE,50,TRICK,54,PHANTOMFORCE","Height":"0.6","Weight":"2.3","Habitat":"Urban","Kind":"Puppet","Pokedex":"This PokÃ©mon roams about deep in the night seeking such negative emotions as grudges and envy. It retreats to its nest when the sun begins to rise.","WildItemUncommon":"SPELLTAG","Evolutions":"BANETTE,Level,37"},{"Name":"Banette","InternalName":"BANETTE","Type1":"GHOST","HiddenAbility":"CURSEDBODY","Moves":"1,PHANTOMFORCE,1,KNOCKOFF,1,SCREECH,1,NIGHTSHADE,1,SPITE,4,SCREECH,7,NIGHTSHADE,10,SPITE,13,SHADOWSNEAK,16,WILLOWISP,19,FEINTATTACK,22,HEX,26,CURSE,30,SHADOWBALL,34,EMBARGO,40,SUCKERPUNCH,46,SNATCH,52,GRUDGE,58,TRICK,64,PHANTOMFORCE","Height":"1.1","Weight":"12.5","Habitat":"Urban","Kind":"Marionette","Pokedex":"An abandoned plush doll became this PokÃ©mon. They are said to live in garbage dumps and wander about in search of the children that threw them away.","WildItemUncommon":"SPELLTAG","Evolutions":null},{"Name":"Duskull","InternalName":"DUSKULL","Type1":"GHOST","Moves":"1,LEER,1,NIGHTSHADE,6,DISABLE,9,ASTONISH,14,FORESIGHT,17,SHADOWSNEAK,22,PURSUIT,25,WILLOWISP,30,CONFUSERAY,33,CURSE,38,HEX,41,SHADOWBALL,46,MEANLOOK,49,PAYBACK,54,FUTURESIGHT","Height":"0.8","Weight":"15.0","Habitat":"Forest","Kind":"Requiem","Pokedex":"A glare from its single scarlet eye makes even burly grown-ups freeze in utter fear. It is a nocturnal PokÃ©mon that roams about under the cloak of darkness.","WildItemUncommon":"KASIBBERRY","Evolutions":"DUSCLOPS,Level,37"},{"Name":"Dusclops","InternalName":"DUSCLOPS","Type1":"GHOST","Moves":"1,FUTURESIGHT,1,FIREPUNCH,1,ICEPUNCH,1,THUNDERPUNCH,1,GRAVITY,1,BIND,1,LEER,1,NIGHTSHADE,1,DISABLE,1,ASTONISH,6,DISABLE,9,ASTONISH,14,FORESIGHT,17,SHADOWSNEAK,22,PURSUIT,25,WILLOWISP,30,CONFUSERAY,33,CURSE,37,SHADOWPUNCH,40,HEX,45,SHADOWBALL,52,MEANLOOK,57,PAYBACK,64,FUTURESIGHT","Height":"1.6","Weight":"30.6","Habitat":"Forest","Kind":"Beckon","Pokedex":"It is thought that its body is hollow with only a spectral ball of fire burning inside. However, no one has been able to confirm this theory as fact.","WildItemUncommon":"KASIBBERRY","Evolutions":"DUSKNOIR,TradeItem,REAPERCLOTH"},{"Name":"Tropius","InternalName":"TROPIUS","Type1":"GRASS","Type2":"FLYING","HiddenAbility":"HARVEST","Moves":"1,LEAFSTORM,1,LEER,1,GUST,1,GROWTH,1,RAZORLEAF,6,SWEETSCENT,10,STOMP,16,MAGICALLEAF,21,SWEETSCENT,26,GUST","Height":"2.0","Weight":"100.0","Habitat":"Forest","Kind":"Fruit","Pokedex":"It flies by flapping its broad leaves. The bunch of fruit that grows around its neck is deliciously sweet. In the spring, it scatters pollen from its neck.","Evolutions":null},{"Name":"Chimecho","InternalName":"CHIMECHO","Type1":"PSYCHIC","Moves":"1,HEALINGWISH,1,SYNCHRONOISE,1,WRAP,1,GROWL,1,ASTONISH,1,CONFUSION,4,GROWL,7,ASTONISH,10,CONFUSION,13,YAWN,16,ASTONISH,19,TAKEDOWN,22,CONFUSION,27,HEALBELL","Height":"0.6","Weight":"1.0","Habitat":"Grassland","Kind":"Wind Chime","Pokedex":"They fly about very actively when the hot season arrives. They communicate among themselves using seven different and distinguishing cries.","WildItemUncommon":"COLBURBERRY","Evolutions":null},{"Name":"Absol","InternalName":"ABSOL","Type1":"DARK","HiddenAbility":"JUSTIFIED","Moves":"1,PERISHSONG,1,FUTURESIGHT,1,SCRATCH,1,FEINT,1,LEER,1,QUICKATTACK,4,LEER,7,QUICKATTACK,10,PURSUIT,13,TAUNT,16,BITE,19,TAUNT,22,SLASH","Height":"1.2","Weight":"47.0","Habitat":"Mountain","Kind":"Disaster","Pokedex":"It sharply senses even subtle changes in the sky and the land to predict natural disasters. It is a long-lived PokÃ©mon that has a life-span of 100 years.","Evolutions":null},{"Name":"Wynaut","InternalName":"WYNAUT","Type1":"PSYCHIC","HiddenAbility":"TELEPATHY","Moves":"1,SPLASH,1,CHARM,1,ENCORE,15,MIRRORCOAT,15,SAFEGUARD,15,DESTINYBOND","Height":"0.6","Weight":"14.0","Habitat":"Cave","Kind":"Bright","Pokedex":"A Wynaut loves to eat sweet fruits. It cleverly picks fruits using its earlike arms. They gather in fruit gardens, drawn by the fragrance.","Evolutions":"WOBBUFFET,Level,15"},{"Name":"Snorunt","InternalName":"SNORUNT","Type1":"ICE","HiddenAbility":"MOODY","Moves":"1,POWDERSNOW,1,LEER,5,DOUBLETEAM,10,ICESHARD,14,ICYWIND,19,BITE,23,ICEFANG,28,HEADBUTT,32,PROTECT,37,FROSTBREATH,41,CRUNCH,46,BLIZZARD,50,HAIL","Height":"0.7","Weight":"16.8","Habitat":"Cave","Kind":"Snow Hat","Pokedex":"They tend to move about in groups of around five Snorunt. In snowy regions, it is said that when they are seen late at night, snowfall will arrive by morning.","WildItemUncommon":"BABIRIBERRY","Evolutions":"GLALIE,Level,42,FROSLASS,ItemFemale,DAWNSTONE"},{"Name":"Glalie","InternalName":"GLALIE","Type1":"ICE","HiddenAbility":"MOODY","Moves":"1,ICEFANG,1,HEADBUTT,1,PROTECT,1,FROSTBREATH","Height":"1.5","Weight":"256.5","Habitat":"Cave","Kind":"Face","Pokedex":"A Glalie has the power to instantaneously freeze moisture in the atmosphere. A dazzling cloud of diamondlike ice crystals forms around its body.","WildItemUncommon":"BABIRIBERRY","Evolutions":null},{"Name":"Spheal","InternalName":"SPHEAL","Type1":"ICE","Type2":"WATER","HiddenAbility":"OBLIVIOUS","Moves":"1,DEFENSECURL,1,POWDERSNOW,1,GROWL,1,WATERGUN,5,ROLLOUT,9,ENCORE,13,ICEBALL,17,BRINE,21,AURORABEAM,26,BODYSLAM,31,REST,31,SNORE,36,HAIL,41,BLIZZARD,46,SHEERCOLD","Height":"0.8","Weight":"39.5","Habitat":"Sea","Kind":"Clap","Pokedex":"It is completely covered with plushy fur. As a result, it never feels the cold even when it is rolling about on ice floes or diving in the sea.","Evolutions":"SEALEO,Level,32"},{"Name":"Sealeo","InternalName":"SEALEO","Type1":"ICE","Type2":"WATER","HiddenAbility":"OBLIVIOUS","Moves":"1,DEFENSECURL,1,POWDERSNOW,1,GROWL,1,WATERGUN,5,ROLLOUT,9,ENCORE,13,ICEBALL,17,BRINE,21,AURORABEAM,26,BODYSLAM,31,REST,31,SNORE,32,SWAGGER,38,HAIL,45,BLIZZARD,52,SHEERCOLD","Height":"1.1","Weight":"87.6","Habitat":"Sea","Kind":"Ball Roll","Pokedex":"Sealeo live in herds on ice floes. Using its powerful flippers, it shatters ice. It dives into the sea to hunt prey five times a day.","Evolutions":"WALREIN,Level,44"},{"Name":"Walrein","InternalName":"WALREIN","Type1":"ICE","Type2":"WATER","HiddenAbility":"OBLIVIOUS","Moves":"1,CRUNCH,1,DEFENSECURL,1,POWDERSNOW,1,GROWL,1,WATERGUN,7,ROLLOUT,7,ENCORE,13,ICEBALL,19,BRINE,19,AURORABEAM,25,BODYSLAM,31,REST,31,SNORE,32,SWAGGER,38,HAIL,44,ICEFANG,49,BLIZZARD,60,SHEERCOLD","Height":"1.4","Weight":"150.6","Habitat":"Sea","Kind":"Ice Break","Pokedex":"To protect its herd, the leader battles anything that invades its territory, even at the cost of its life. Its tusks may snap off in battle.","Evolutions":null},{"Name":"Clamperl","InternalName":"CLAMPERL","Type1":"WATER","HiddenAbility":"RATTLED","Moves":"1,CLAMP,1,WATERGUN,1,WHIRLPOOL,1,IRONDEFENSE,50,SHELLSMASH","Height":"0.4","Weight":"52.5","Habitat":"Sea","Kind":"Bivalve","Pokedex":"A Clamperl slams its shell closed on prey to prevent escape. The pearl it creates upon evolution is said to be infused with a mysterious energy.","WildItemUncommon":"BIGPEARL","Evolutions":"HUNTAIL,TradeItem,DEEPSEATOOTH,GOREBYSS,TradeItem,DEEPSEASCALE"},{"Name":"Huntail","InternalName":"HUNTAIL","Type1":"WATER","HiddenAbility":"WATERVEIL","Moves":"1,WHIRLPOOL,1,BITE,5,SCREECH,9,SCARYFACE,11,FEINTATTACK,14,WATERPULSE,16,ICEFANG,19,BRINE,23,SUCKERPUNCH,26,DIVE,29,BATONPASS,34,CRUNCH,39,AQUATAIL,45,COIL,50,HYDROPUMP","Height":"1.7","Weight":"27.0","Habitat":"Sea","Kind":"Deep Sea","Pokedex":"To withstand the crushing pressure of water deep under the sea, its spine is very thick and sturdy. Its tail, which is shaped like a small fish, has eyes that light up.","WildItemUncommon":"DEEPSEATOOTH","Evolutions":null},{"Name":"Gorebyss","InternalName":"GOREBYSS","Type1":"WATER","HiddenAbility":"HYDRATION","Moves":"1,WHIRLPOOL,1,CONFUSION,5,WATERSPORT,9,AGILITY,11,DRAININGKISS,14,WATERPULSE,16,AMNESIA,19,AQUARING,23,CAPTIVATE,26,DIVE,29,BATONPASS,34,PSYCHIC,39,AQUATAIL,45,COIL,50,HYDROPUMP","Height":"1.8","Weight":"22.6","Habitat":"Sea","Kind":"South Sea","Pokedex":"A Gorebyss siphons the body fluids of prey through its thin, tubular mouth. Its light pink body color turns vivid when it finishes feeding.","WildItemUncommon":"DEEPSEASCALE","Evolutions":null},{"Name":"Relicanth","InternalName":"RELICANTH","Type1":"WATER","Type2":"ROCK","HiddenAbility":"STURDY","Moves":"1,HEADSMASH,1,TACKLE,1,HARDEN,1,MUDSPORT,1,WATERGUN,6,MUDSPORT,10,WATERGUN,15,ROCKTOMB,21,ANCIENTPOWER,26,DIVE,31,TAKEDOWN,35,YAWN,41,REST,46,HYDROPUMP,50,DOUBLEEDGE,56,HEADSMASH","Height":"1.0","Weight":"23.4","Habitat":"Sea","Kind":"Longevity","Pokedex":"A PokÃ©mon that was once believed to have been extinct. The species has not changed its form for 100 million years. It walks on the seafloor using its pectoral fins.","WildItemUncommon":"DEEPSEASCALE","Evolutions":null},{"Name":"Luvdisc","InternalName":"LUVDISC","Type1":"WATER","HiddenAbility":"HYDRATION","Moves":"1,TACKLE,1,CHARM,4,WATERGUN,7,AGILITY,9,DRAININGKISS,14,LUCKYCHANT,17,WATERPULSE,22,ATTRACT,27,FLAIL,31,SWEETKISS,37,TAKEDOWN,40,AQUARING,46,CAPTIVATE,50,HYDROPUMP,55,SAFEGUARD","Height":"0.6","Weight":"8.7","Habitat":"Sea","Kind":"Rendezvous","Pokedex":"Luvdisc make the branches of Corsola their nests. There is a custom from long ago of giving a Luvdisc as a gift to express one's feelings of love.","WildItemCommon":"HEARTSCALE","Evolutions":null},{"Name":"Bagon","InternalName":"BAGON","Type1":"DRAGON","HiddenAbility":"SHEERFORCE","Moves":"1,RAGE,4,EMBER,7,LEER,10,BITE,13,DRAGONBREATH,17,HEADBUTT,21,FOCUSENERGY,25,CRUNCH,29,DRAGONCLAW,34,ZENHEADBUTT,39,SCARYFACE,44,FLAMETHROWER,49,DOUBLEEDGE","Height":"0.6","Weight":"42.1","Habitat":"RoughTerrain","Kind":"Rock Head","Pokedex":"Although it is small, this PokÃ©mon is very powerful because its body is a bundle of muscles. It launches head-butts with its ironlike skull.","WildItemUncommon":"DRAGONFANG","Evolutions":"SHELGON,Level,30"},{"Name":"Shelgon","InternalName":"SHELGON","Type1":"DRAGON","HiddenAbility":"OVERCOAT","Moves":"1,RAGE,1,EMBER,1,LEER,1,BITE,4,EMBER,7,LEER,10,BITE,13,DRAGONBREATH,17,HEADBUTT,21,FOCUSENERGY,25,CRUNCH,29,DRAGONCLAW,30,PROTECT,35,ZENHEADBUTT,42,SCARYFACE,49,FLAMETHROWER,56,DOUBLEEDGE","Height":"1.1","Weight":"110.5","Habitat":"RoughTerrain","Kind":"Endurance","Pokedex":"It hardly eats while it awaits evolution. It becomes hardier by enduring hunger. Its shell peels off the instant it begins to evolve.","WildItemUncommon":"DRAGONFANG","Evolutions":"SALAMENCE,Level,50"},{"Name":"Salamence","InternalName":"SALAMENCE","Type1":"DRAGON","Type2":"FLYING","HiddenAbility":"MOXIE","Moves":"1,DRAGONTAIL,1,FIREFANG,1,THUNDERFANG,1,RAGE,1,EMBER,1,LEER,1,BITE,4,EMBER,7,LEER,10,BITE,13,DRAGONBREATH,17,HEADBUTT,21,FOCUSENERGY,25,CRUNCH,29,DRAGONCLAW,30,PROTECT,35,ZENHEADBUTT,42,SCARYFACE,49,FLAMETHROWER,50,FLY,63,DOUBLEEDGE","Height":"1.5","Weight":"102.6","Habitat":"RoughTerrain","Kind":"Dragon","Pokedex":"After many long years, its cellular structure underwent a sudden mutation to grow wings. When angered, it loses all thought and rampages out of control.","WildItemUncommon":"DRAGONFANG","Evolutions":null},{"Name":"Beldum","InternalName":"BELDUM","Type1":"STEEL","Type2":"PSYCHIC","HiddenAbility":"LIGHTMETAL","Moves":"1,TAKEDOWN","Height":"0.6","Weight":"95.2","Habitat":"RoughTerrain","Kind":"Iron Ball","Pokedex":"When Beldum gather in a swarm, they move in perfect unison as if they were but one PokÃ©mon. They communicate with each other using brain waves.","WildItemUncommon":"METALCOAT","Evolutions":"METANG,Level,20"},{"Name":"Metang","InternalName":"METANG","Type1":"STEEL","Type2":"PSYCHIC","HiddenAbility":"LIGHTMETAL","Moves":"1,MAGNETRISE,1,TAKEDOWN,1,CONFUSION,1,METALCLAW,20,CONFUSION,20,METALCLAW,23,PURSUIT,26,BULLETPUNCH,29,MIRACLEEYE,32,ZENHEADBUTT,35,SCARYFACE,38,PSYCHIC,41,AGILITY,44,METEORMASH,47,IRONDEFENSE,50,HYPERBEAM","Height":"1.2","Weight":"202.5","Habitat":"RoughTerrain","Kind":"Iron Claw","Pokedex":"The claws tipping its arms pack the destructive power to tear through thick iron sheets as if they were silk. It flies at over 60 miles per hour.","WildItemUncommon":"METALCOAT","Evolutions":"METAGROSS,Level,45"},{"Name":"Metagross","InternalName":"METAGROSS","Type1":"STEEL","Type2":"PSYCHIC","HiddenAbility":"LIGHTMETAL","Moves":"1,MAGNETRISE,1,TAKEDOWN,1,CONFUSION,1,METALCLAW,20,CONFUSION,20,METALCLAW,23,PURSUIT,26,BULLETPUNCH,29,MIRACLEEYE,32,ZENHEADBUTT,35,SCARYFACE,38,PSYCHIC,41,AGILITY,44,METEORMASH,45,HAMMERARM,52,IRONDEFENSE,60,HYPERBEAM","Height":"1.6","Weight":"550.0","Habitat":"RoughTerrain","Kind":"Iron Leg","Pokedex":"Metagross has four brains that are joined by a complex neural network. As a result of integration, this PokÃ©mon is smarter than a supercomputer.","WildItemUncommon":"METALCOAT","Evolutions":null},{"Name":"Regirock","InternalName":"REGIROCK","Type1":"ROCK","HiddenAbility":"STURDY","Moves":"1,EXPLOSION,1,STOMP,1,ROCKTHROW,1,CHARGEBEAM,1,BULLDOZE,7,ROCKTHROW,13,CHARGEBEAM,19,BULLDOZE,25,CURSE,31,ANCIENTPOWER,37,IRONDEFENSE,43,STONEEDGE,49,HAMMERARM,55,LOCKON,55,ZAPCANNON,61,SUPERPOWER,67,HYPERBEAM","Height":"1.7","Weight":"230.0","Habitat":"Cave","Kind":"Rock Peak","Pokedex":"A PokÃ©mon that is made entirely of rocks and boulders. If parts of its body chip off in battle, Regirock repairs itself by adding new rocks.","Evolutions":null},{"Name":"Regice","InternalName":"REGICE","Type1":"ICE","HiddenAbility":"ICEBODY","Moves":"1,EXPLOSION,1,STOMP,1,ICYWIND,1,CHARGEBEAM,1,BULLDOZE,7,ICYWIND,13,CHARGEBEAM,19,BULLDOZE,25,CURSE,31,ANCIENTPOWER,37,AMNESIA,43,ICEBEAM,49,HAMMERARM,55,LOCKON,55,ZAPCANNON,61,SUPERPOWER,67,HYPERBEAM","Height":"1.8","Weight":"175.0","Habitat":"Cave","Kind":"Iceberg","Pokedex":"Its entire body is made of Antarctic ice. After extensive studies, researchers believe the ice was formed during an ice age.","Evolutions":null},{"Name":"Registeel","InternalName":"REGISTEEL","Type1":"STEEL","HiddenAbility":"LIGHTMETAL","Moves":"1,EXPLOSION,1,STOMP,1,METALCLAW,1,CHARGEBEAM,1,BULLDOZE,7,METALCLAW,13,CHARGEBEAM,19,BULLDOZE,25,CURSE,31,ANCIENTPOWER,37,IRONDEFENSE,37,AMNESIA,43,IRONHEAD,43,FLASHCANNON,49,HAMMERARM,55,LOCKON,55,ZAPCANNON,61,SUPERPOWER,67,HYPERBEAM","Height":"1.9","Weight":"205.0","Habitat":"Cave","Kind":"Iron","Pokedex":"Its body is harder than any other kind of metal. The body metal is composed of a mysterious substance. Not only is it hard, it shrinks and stretches flexibly.","Evolutions":null},{"Name":"Latias","InternalName":"LATIAS","Type1":"DRAGON","Type2":"PSYCHIC","Moves":"1,HEALINGWISH,1,HELPINGHAND,1,WISH,1,PSYWAVE,1,SAFEGUARD,4,WATERSPORT,7,CHARM,10,STOREDPOWER,13,REFRESH,16,HEALPULSE,20,DRAGONBREATH,24,MISTBALL,28,PSYCHOSHIFT,32,RECOVER,36,REFLECTTYPE,41,ZENHEADBUTT,46,GUARDSPLIT,51,PSYCHIC,56,DRAGONPULSE,61,HEALINGWISH","Height":"1.4","Weight":"40.0","Habitat":"WatersEdge","Kind":"Eon","Pokedex":"They make a small herd of only several members. They rarely make contact with people or other PokÃ©mon. They disappear if they sense enemies.","Evolutions":null},{"Name":"Latios","InternalName":"LATIOS","Type1":"DRAGON","Type2":"PSYCHIC","Moves":"1,MEMENTO,1,HELPINGHAND,1,HEALBLOCK,1,PSYWAVE,1,SAFEGUARD,4,PROTECT,7,DRAGONDANCE,10,STOREDPOWER,13,REFRESH,16,HEALPULSE,20,DRAGONBREATH,24,LUSTERPURGE,28,PSYCHOSHIFT,32,RECOVER,36,TELEKINESIS,41,ZENHEADBUTT,46,POWERSPLIT,51,PSYCHIC,56,DRAGONPULSE,61,MEMENTO","Height":"2.0","Weight":"60.0","Habitat":"WatersEdge","Kind":"Eon","Pokedex":"Even in hiding, it can detect the locations of others and sense their emotions since it has telepathy. Its intelligence allows it to understand human languages.","Evolutions":null},{"Name":"Kyogre","InternalName":"KYOGRE","Type1":"WATER","Moves":"1,ANCIENTPOWER,1,WATERPULSE,5,SCARYFACE,15,AQUATAIL,20,BODYSLAM,30,AQUARING,35,ICEBEAM,45,ORIGINPULSE,50,CALMMIND,60,MUDDYWATER,65,SHEERCOLD,75,HYDROPUMP,80,DOUBLEEDGE,90,WATERSPOUT","Height":"4.5","Weight":"352.0","Habitat":"Sea","Kind":"Sea Basin","Pokedex":"Kyogre has appeared in mythology as the creator of the sea. After long years of feuding with Groudon, it took to sleep at the bottom of the sea.","Evolutions":null},{"Name":"Groudon","InternalName":"GROUDON","Type1":"GROUND","Moves":"1,ANCIENTPOWER,1,MUDSHOT,5,SCARYFACE,15,EARTHPOWER,20,LAVAPLUME,30,REST,35,EARTHQUAKE,45,PRECIPICEBLADES,50,BULKUP,60,SOLARBEAM,65,FISSURE,75,FIREBLAST,80,HAMMERARM,90,ERUPTION","Height":"3.5","Weight":"950.0","Habitat":"RoughTerrain","Kind":"Continent","Pokedex":"Groudon has appeared in mythology as the creator of the land. It sleeps in magma underground and is said to make volcanoes erupt on awakening.","Evolutions":null},{"Name":"Rayquaza","InternalName":"RAYQUAZA","Type1":"DRAGON","Type2":"FLYING","Moves":"1,TWISTER,5,SCARYFACE,15,ANCIENTPOWER,20,CRUNCH,30,AIRSLASH,35,REST,45,EXTREMESPEED,50,DRAGONPULSE,60,DRAGONDANCE,65,FLY,75,HYPERVOICE,80,OUTRAGE,90,HYPERBEAM","Height":"7.0","Weight":"206.5","Habitat":"Rare","Kind":"Sky High","Pokedex":"A PokÃ©mon that flies endlessly in the ozone layer. It is said it would descend to the ground if Kyogre and Groudon were to fight.","Evolutions":null},{"Name":"Jirachi","InternalName":"JIRACHI","Type1":"STEEL","Type2":"PSYCHIC","Moves":"1,WISH,1,CONFUSION,5,REST,10,SWIFT,15,HELPINGHAND,20,PSYCHIC,25,REFRESH,30,REST,35,ZENHEADBUTT,40,DOUBLEEDGE,45,GRAVITY,50,HEALINGWISH,55,FUTURESIGHT,60,COSMICPOWER,65,LASTRESORT,70,DOOMDESIRE","Height":"0.3","Weight":"1.1","Habitat":"Mountain","Kind":"Wish","Pokedex":"Jirachi is said to make wishes come true. While it sleeps, a tough crystalline shell envelops the body to protect it from enemies.","WildItemCommon":"STARPIECE","WildItemUncommon":"STARPIECE","WildItemRare":"STARPIECE","Evolutions":null},{"Name":"Deoxys","InternalName":"DEOXYS","Type1":"PSYCHIC","Moves":"1,LEER,1,WRAP,7,NIGHTSHADE,13,TELEPORT,19,KNOCKOFF,25,PURSUIT,31,PSYCHIC,37,SNATCH,43,PSYCHOSHIFT,49,ZENHEADBUTT,55,COSMICPOWER,61,RECOVER,67,PSYCHOBOOST,73,HYPERBEAM","Height":"1.7","Weight":"60.8","Habitat":"Rare","Kind":"DNA","Pokedex":"A PokÃ©mon that mutated from an extraterrestrial virus exposed to a laser beam. Its body is configured for superior agility and speed.","FormNames":"Normal Forme,Attack Forme,Defense Forme,Speed Forme","Evolutions":null},{"Name":"Turtwig","InternalName":"TURTWIG","Type1":"GRASS","HiddenAbility":"SHELLARMOR","Moves":"1,TACKLE,5,WITHDRAW,9,ABSORB,13,RAZORLEAF,17,CURSE,21,BITE,25,MEGADRAIN,29,LEECHSEED,33,SYNTHESIS,37,CRUNCH,41,GIGADRAIN,45,LEAFSTORM","Height":"0.4","Weight":"10.2","Kind":"Tiny Leaf","Pokedex":"Made from soil, the shell on its back hardens when it drinks water. It lives along lakes.","Evolutions":"GROTLE,Level,18"},{"Name":"Grotle","InternalName":"GROTLE","Type1":"GRASS","HiddenAbility":"SHELLARMOR","Moves":"1,TACKLE,1,WITHDRAW,5,WITHDRAW,9,ABSORB,13,RAZORLEAF,17,CURSE,22,BITE,27,MEGADRAIN,32,LEECHSEED,37,SYNTHESIS,42,CRUNCH,47,GIGADRAIN,52,LEAFSTORM","Height":"1.1","Weight":"97.0","Kind":"Grove","Pokedex":"It lives along water in forests. In the daytime, it leaves the forest to sunbathe its treed shell.","Evolutions":"TORTERRA,Level,32"},{"Name":"Torterra","InternalName":"TORTERRA","Type1":"GRASS","Type2":"GROUND","HiddenAbility":"SHELLARMOR","Moves":"1,WOODHAMMER,1,TACKLE,1,WITHDRAW,1,ABSORB,1,RAZORLEAF,5,WITHDRAW,9,ABSORB,13,RAZORLEAF,17,CURSE,22,BITE,27,MEGADRAIN,32,EARTHQUAKE,33,LEECHSEED,39,SYNTHESIS,45,CRUNCH,51,GIGADRAIN,57,LEAFSTORM","Height":"2.2","Weight":"310.0","Kind":"Continent","Pokedex":"Small PokÃ©mon occasionally gather on its unmoving back to begin building their nests.","Evolutions":null},{"Name":"Chimchar","InternalName":"CHIMCHAR","Type1":"FIRE","HiddenAbility":"IRONFIST","Moves":"1,SCRATCH,1,LEER,7,EMBER,9,TAUNT,15,FURYSWIPES,17,FLAMEWHEEL,23,NASTYPLOT,25,TORMENT,31,FACADE,33,FIRESPIN,39,ACROBATICS,41,SLACKOFF,47,FLAMETHROWER","Height":"0.5","Weight":"6.2","Kind":"Chimp","Pokedex":"It agilely scales sheer cliffs to live atop craggy mountains. Its fire is put out when it sleeps.","Evolutions":"MONFERNO,Level,14"},{"Name":"Monferno","InternalName":"MONFERNO","Type1":"FIRE","Type2":"FIGHTING","HiddenAbility":"IRONFIST","Moves":"1,SCRATCH,1,LEER,1,EMBER,7,EMBER,9,TAUNT,14,MACHPUNCH,16,FURYSWIPES,19,FLAMEWHEEL,26,FEINT,29,TORMENT,36,CLOSECOMBAT,39,FIRESPIN,46,ACROBATICS,49,SLACKOFF,56,FLAREBLITZ","Height":"0.9","Weight":"22.0","Kind":"Playful","Pokedex":"To intimidate attackers, it stretches the fire on its tail to make itself appear bigger.","Evolutions":"INFERNAPE,Level,36"},{"Name":"Infernape","InternalName":"INFERNAPE","Type1":"FIRE","Type2":"FIGHTING","HiddenAbility":"IRONFIST","Moves":"1,FLAREBLITZ,1,SCRATCH,1,LEER,1,EMBER,1,TAUNT,7,EMBER,9,TAUNT,14,MACHPUNCH,16,FURYSWIPES,19,FLAMEWHEEL,26,FEINT,29,PUNISHMENT,36,CLOSECOMBAT,42,FIRESPIN,52,ACROBATICS,58,CALMMIND,68,FLAREBLITZ","Height":"1.2","Weight":"55.0","Kind":"Flame","Pokedex":"It uses a special kind of martial arts involving all its limbs. Its fire never goes out.","Evolutions":null},{"Name":"Piplup","InternalName":"PIPLUP","Type1":"WATER","HiddenAbility":"DEFIANT","Moves":"1,POUND,4,GROWL,8,BUBBLE,11,WATERSPORT,15,PECK,18,BUBBLEBEAM,22,BIDE,25,FURYATTACK,29,BRINE,32,WHIRLPOOL,36,MIST,39,DRILLPECK,43,HYDROPUMP","Height":"0.4","Weight":"5.2","Kind":"Penguin","Pokedex":"Because it is very proud, it hates accepting food from people. Its thick down guards it from cold.","Evolutions":"PRINPLUP,Level,16"},{"Name":"Prinplup","InternalName":"PRINPLUP","Type1":"WATER","HiddenAbility":"DEFIANT","Moves":"1,TACKLE,1,GROWL,4,GROWL,8,BUBBLE,11,WATERSPORT,15,PECK,16,METALCLAW,19,BUBBLEBEAM,24,BIDE,28,FURYATTACK,33,BRINE,37,WHIRLPOOL,42,MIST,46,DRILLPECK,50,HYDROPUMP","Height":"0.8","Weight":"23.0","Kind":"Penguin","Pokedex":"It lives alone, away from others. Apparently, every one of them believes it is the most important.","Evolutions":"EMPOLEON,Level,36"},{"Name":"Empoleon","InternalName":"EMPOLEON","Type1":"WATER","Type2":"STEEL","HiddenAbility":"DEFIANT","Moves":"1,TACKLE,1,GROWL,1,BUBBLE,4,GROWL,8,BUBBLE,11,SWORDSDANCE,15,PECK,16,METALCLAW,19,BUBBLEBEAM,24,SWAGGER,28,FURYATTACK,33,BRINE,36,AQUAJET,39,WHIRLPOOL,46,MIST,52,DRILLPECK,59,HYDROPUMP","Height":"1.7","Weight":"84.5","Kind":"Emperor","Pokedex":"The three horns that extend from its beak attest to its power. The leader has the biggest horns.","Evolutions":null},{"Name":"Starly","InternalName":"STARLY","Type1":"NORMAL","Type2":"FLYING","Moves":"1,TACKLE,1,GROWL,5,QUICKATTACK,9,WINGATTACK,13,DOUBLETEAM,17,ENDEAVOR,21,WHIRLWIND,25,AERIALACE,29,TAKEDOWN,33,AGILITY,37,BRAVEBIRD,41,FINALGAMBIT","Height":"0.3","Weight":"2.0","Kind":"Starling","Pokedex":"They flock in great numbers. Though small, they flap their wings with great power.","WildItemUncommon":"YACHEBERRY","Evolutions":"STARAVIA,Level,14"},{"Name":"Staravia","InternalName":"STARAVIA","Type1":"NORMAL","Type2":"FLYING","HiddenAbility":"RECKLESS","Moves":"1,TACKLE,1,GROWL,1,QUICKATTACK,5,QUICKATTACK,9,WINGATTACK,13,DOUBLETEAM,18,ENDEAVOR,23,WHIRLWIND,28,AERIALACE,33,TAKEDOWN,38,AGILITY,43,BRAVEBIRD,48,FINALGAMBIT","Height":"0.6","Weight":"15.5","Kind":"Starling","Pokedex":"It flies around forests and fields in search of bug PokÃ©mon. It stays within a huge flock.","WildItemUncommon":"YACHEBERRY","Evolutions":"STARAPTOR,Level,34"},{"Name":"Staraptor","InternalName":"STARAPTOR","Type1":"NORMAL","Type2":"FLYING","HiddenAbility":"RECKLESS","Moves":"1,TACKLE,1,GROWL,1,QUICKATTACK,1,WINGATTACK,5,QUICKATTACK,9,WINGATTACK,13,DOUBLETEAM,18,ENDEAVOR,23,WHIRLWIND,28,AERIALACE,33,TAKEDOWN,34,CLOSECOMBAT,41,AGILITY,49,BRAVEBIRD,57,FINALGAMBIT","Height":"1.2","Weight":"24.9","Kind":"Predator","Pokedex":"It has a savage nature. It will courageously challenge foes that are much larger.","WildItemUncommon":"YACHEBERRY","Evolutions":null},{"Name":"Bidoof","InternalName":"BIDOOF","Type1":"NORMAL","HiddenAbility":"MOODY","Moves":"1,TACKLE,5,GROWL,9,DEFENSECURL,13,ROLLOUT,17,HEADBUTT,21,HYPERFANG,25,YAWN,29,AMNESIA,33,TAKEDOWN,37,SUPERFANG,41,SUPERPOWER,45,CURSE","Height":"0.5","Weight":"20.0","Kind":"Plump Mouse","Pokedex":"With nerves of steel, nothing can perturb it. It is more agile and active than it appears.","Evolutions":"BIBAREL,Level,15"},{"Name":"Bibarel","InternalName":"BIBAREL","Type1":"NORMAL","Type2":"WATER","HiddenAbility":"MOODY","Moves":"1,ROTOTILLER,1,TACKLE,1,GROWL,5,GROWL,9,DEFENSECURL,13,ROLLOUT,15,WATERGUN,18,HEADBUTT,23,HYPERFANG,28,YAWN,33,AMNESIA,38,TAKEDOWN,43,SUPERFANG,48,SUPERPOWER,53,CURSE","Height":"1.0","Weight":"31.5","Kind":"Beaver","Pokedex":"It makes its nest by damming streams with bark and mud. It is known as an industrious worker.","WildItemCommon":"ORANBERRY","WildItemUncommon":"SITRUSBERRY","Evolutions":null},{"Name":"Kricketot","InternalName":"KRICKETOT","Type1":"BUG","HiddenAbility":"RUNAWAY","Moves":"1,GROWL,1,BIDE,6,STRUGGLEBUG,16,BUGBITE","Height":"0.3","Weight":"2.2","Kind":"Cricket","Pokedex":"It shakes its head back to front, causing its antennae to hit each other and sound like a xylophone.","WildItemUncommon":"METRONOME","Evolutions":"KRICKETUNE,Level,10"},{"Name":"Kricketune","InternalName":"KRICKETUNE","Type1":"BUG","HiddenAbility":"TECHNICIAN","Moves":"1,GROWL,1,BIDE,10,FURYCUTTER,14,LEECHLIFE,18,SING,22,FOCUSENERGY,26,SLASH,30,XSCISSOR,34,SCREECH,36,FELLSTINGER,38,TAUNT,42,NIGHTSLASH,44,STICKYWEB,46,BUGBUZZ,50,PERISHSONG","Height":"1.0","Weight":"25.5","Kind":"Cricket","Pokedex":"It crosses its knifelike arms in front of its chest when it cries. It can compose melodies ad lib.","WildItemUncommon":"METRONOME","Evolutions":null},{"Name":"Shinx","InternalName":"SHINX","Type1":"ELECTRIC","HiddenAbility":"GUTS","Moves":"1,TACKLE,5,LEER,9,CHARGE,11,BABYDOLLEYES,13,SPARK,17,BITE,21,ROAR,25,SWAGGER,29,THUNDERFANG,33,CRUNCH,37,SCARYFACE,41,DISCHARGE,45,WILDCHARGE","Height":"0.5","Weight":"9.5","Kind":"Flash","Pokedex":"All of its fur dazzles if danger is sensed. It flees while the foe is momentarily blinded.","Evolutions":"LUXIO,Level,15"},{"Name":"Luxio","InternalName":"LUXIO","Type1":"ELECTRIC","HiddenAbility":"GUTS","Moves":"1,TACKLE,1,LEER,5,LEER,9,CHARGE,13,SPARK,18,BITE,23,ROAR,28,SWAGGER,33,THUNDERFANG,38,CRUNCH,43,SCARYFACE,48,DISCHARGE,53,WILDCHARGE","Height":"0.9","Weight":"30.5","Kind":"Spark","Pokedex":"Its claws loose electricity with enough amperage to cause fainting. They live in small groups.","Evolutions":"LUXRAY,Level,30"},{"Name":"Luxray","InternalName":"LUXRAY","Type1":"ELECTRIC","HiddenAbility":"GUTS","Moves":"1,ELECTRICTERRAIN,1,TACKLE,1,LEER,1,CHARGE,5,LEER,9,CHARGE,13,SPARK,18,BITE,23,ROAR,28,SWAGGER,35,THUNDERFANG,42,CRUNCH,49,SCARYFACE,56,DISCHARGE,63,WILDCHARGE,67,ELECTRICTERRAIN","Height":"1.4","Weight":"42.0","Kind":"Gleam Eyes","Pokedex":"It has eyes that can see through anything. It spots and captures prey hiding behind objects.","Evolutions":null},{"Name":"Budew","InternalName":"BUDEW","Type1":"GRASS","Type2":"POISON","HiddenAbility":"LEAFGUARD","Moves":"1,ABSORB,4,GROWTH,7,WATERSPORT,10,STUNSPORE,13,MEGADRAIN,16,WORRYSEED","Height":"0.2","Weight":"1.2","Kind":"Bud","Pokedex":"Over the winter, it closes its bud and endures the cold. In spring, the bud opens and releases pollen.","WildItemUncommon":"POISONBARB","Evolutions":"ROSELIA,HappinessDay,"},{"Name":"Roserade","InternalName":"ROSERADE","Type1":"GRASS","Type2":"POISON","HiddenAbility":"TECHNICIAN","Moves":"1,VENOMDRENCH,1,GRASSYTERRAIN,1,WEATHERBALL,1,POISONSTING,1,MEGADRAIN,1,MAGICALLEAF,1,SWEETSCENT","Height":"0.9","Weight":"14.5","Kind":"Bouquet","Pokedex":"It attracts prey with a sweet aroma, then downs it with thorny whips hidden in its arms.","WildItemUncommon":"POISONBARB","Evolutions":null},{"Name":"Cranidos","InternalName":"CRANIDOS","Type1":"ROCK","HiddenAbility":"SHEERFORCE","Moves":"1,HEADBUTT,1,LEER,6,FOCUSENERGY,10,PURSUIT,15,TAKEDOWN,19,SCARYFACE,24,ASSURANCE,28,CHIPAWAY,33,ANCIENTPOWER,37,ZENHEADBUTT,42,SCREECH,46,HEADSMASH","Height":"0.9","Weight":"31.5","Kind":"Head Butt","Pokedex":"It lived in jungles around 100 million years ago. Its skull is as hard as iron.","Evolutions":"RAMPARDOS,Level,30"},{"Name":"Rampardos","InternalName":"RAMPARDOS","Type1":"ROCK","HiddenAbility":"SHEERFORCE","Moves":"1,HEADBUTT,1,LEER,6,FOCUSENERGY,10,PURSUIT,15,TAKEDOWN,19,SCARYFACE,24,ASSURANCE,28,CHIPAWAY,30,ENDEAVOR,36,ANCIENTPOWER,43,ZENHEADBUTT,51,SCREECH,58,HEADSMASH","Height":"1.6","Weight":"102.5","Kind":"Head Butt","Pokedex":"Its powerful head butt has enough power to shatter even the most durable things upon impact.","Evolutions":null},{"Name":"Shieldon","InternalName":"SHIELDON","Type1":"ROCK","Type2":"STEEL","HiddenAbility":"SOUNDPROOF","Moves":"1,TACKLE,1,PROTECT,6,TAUNT,10,METALSOUND,15,TAKEDOWN,19,IRONDEFENSE,24,SWAGGER,28,ANCIENTPOWER,33,ENDURE,37,METALBURST,42,IRONHEAD,46,HEAVYSLAM","Height":"0.5","Weight":"57.0","Kind":"Shield","Pokedex":"A PokÃ©mon that lived in jungles around 100 million years ago. Its facial hide is extremely hard.","Evolutions":"BASTIODON,Level,30"},{"Name":"Bastiodon","InternalName":"BASTIODON","Type1":"ROCK","Type2":"STEEL","HiddenAbility":"SOUNDPROOF","Moves":"1,TACKLE,1,PROTECT,1,TAUNT,1,METALSOUND,6,TAUNT,10,METALSOUND,15,TAKEDOWN,19,IRONDEFENSE,24,SWAGGER,28,ANCIENTPOWER,30,BLOCK,36,ENDURE,43,METALBURST,51,IRONHEAD,58,HEAVYSLAM","Height":"1.3","Weight":"149.5","Kind":"Shield","Pokedex":"Any frontal attack is repulsed. It is a docile PokÃ©mon that feeds on grass and berries.","Evolutions":null},{"Name":"Burmy","InternalName":"BURMY","Type1":"BUG","HiddenAbility":"OVERCOAT","Moves":"1,PROTECT,10,TACKLE,15,BUGBITE,20,HIDDENPOWER","Height":"0.2","Weight":"3.4","Kind":"Bagworm","Pokedex":"To shelter itself from cold, wintry winds, it covers itself with a cloak made of twigs and leaves.","FormNames":"Plant Cloak,Sandy Cloak,Trash Cloak","Evolutions":"WORMADAM,LevelFemale,20,MOTHIM,LevelMale,20"},{"Name":"Wormadam","InternalName":"WORMADAM","Type1":"BUG","Type2":"GRASS","HiddenAbility":"OVERCOAT","Moves":"1,TACKLE,10,PROTECT,15,BUGBITE,20,HIDDENPOWER,23,CONFUSION,26,RAZORLEAF,29,GROWTH,32,PSYBEAM,35,CAPTIVATE,38,FLAIL,41,ATTRACT,44,PSYCHIC,47,LEAFSTORM","Height":"0.5","Weight":"6.5","Kind":"Bagworm","Pokedex":"When Burmy evolved, its cloak became a part of this PokÃ©mon's body. The cloak is never shed.","FormNames":"Plant Cloak,Sandy Cloak,Trash Cloak","WildItemUncommon":"SILVERPOWDER","Evolutions":null},{"Name":"Mothim","InternalName":"MOTHIM","Type1":"BUG","Type2":"FLYING","HiddenAbility":"TINTEDLENS","Moves":"1,TACKLE,10,PROTECT,15,BUGBITE,20,HIDDENPOWER,23,CONFUSION,26,GUST,29,POISONPOWDER,32,PSYBEAM,35,CAMOUFLAGE,38,SILVERWIND,41,AIRSLASH,44,PSYCHIC,47,BUGBUZZ,50,QUIVERDANCE","Height":"0.9","Weight":"23.3","Kind":"Moth","Pokedex":"It loves the honey of flowers and steals honey collected by Combee.","WildItemUncommon":"SILVERPOWDER","Evolutions":null},{"Name":"Combee","InternalName":"COMBEE","Type1":"BUG","Type2":"FLYING","HiddenAbility":"HUSTLE","Moves":"1,SWEETSCENT,1,GUST,13,BUGBITE,29,BUGBUZZ","Height":"0.3","Weight":"5.5","Kind":"Tiny Bee","Pokedex":"A PokÃ©mon formed by three others. It busily carries sweet floral honey to Vespiquen.","WildItemCommon":"HONEY","WildItemUncommon":"HONEY","WildItemRare":"HONEY","Evolutions":"VESPIQUEN,LevelFemale,21"},{"Name":"Vespiquen","InternalName":"VESPIQUEN","Type1":"BUG","Type2":"FLYING","HiddenAbility":"UNNERVE","Moves":"1,FELLSTINGER,1,DESTINYBOND,1,SWEETSCENT,1,GUST,1,POISONSTING,1,CONFUSERAY,5,FURYCUTTER,9,PURSUIT,13,FURYSWIPES,17,DEFENDORDER,21,SLASH,25,POWERGEM,29,HEALORDER,33,TOXIC,37,AIRSLASH,41,CAPTIVATE,45,ATTACKORDER,49,SWAGGER,53,DESTINYBOND,57,FELLSTINGER","Height":"1.2","Weight":"38.5","Kind":"Beehive","Pokedex":"Its abdomen is a honeycomb for grubs. It raises its grubs on honey collected by Combee.","WildItemUncommon":"POISONBARB","Evolutions":null},{"Name":"Pachirisu","InternalName":"PACHIRISU","Type1":"ELECTRIC","HiddenAbility":"VOLTABSORB","Moves":"1,GROWL,1,BIDE,5,QUICKATTACK,9,CHARM,13,SPARK,17,ENDURE,19,NUZZLE,21,SWIFT,25,ELECTROBALL,29,SWEETKISS,33,THUNDERWAVE,37,SUPERFANG,41,DISCHARGE,45,LASTRESORT,49,HYPERFANG","Height":"0.4","Weight":"3.9","Kind":"EleSquirrel","Pokedex":"It makes fur balls that crackle with static electricity. It stores them with berries in tree holes.","Evolutions":null},{"Name":"Buizel","InternalName":"BUIZEL","Type1":"WATER","HiddenAbility":"WATERVEIL","Moves":"1,SONICBOOM,4,GROWL,7,WATERSPORT,11,QUICKATTACK,15,WATERGUN,18,PURSUIT,21,SWIFT,24,AQUAJET,27,DOUBLEHIT,31,WHIRLPOOL,35,RAZORWIND,38,AQUATAIL,41,AGILITY,45,HYDROPUMP","Height":"0.7","Weight":"29.5","Kind":"Sea Weasel","Pokedex":"It has a flotation sac that is like an inflatable collar. It floats on water with its head out.","WildItemUncommon":"WACANBERRY","Evolutions":"FLOATZEL,Level,26"},{"Name":"Floatzel","InternalName":"FLOATZEL","Type1":"WATER","HiddenAbility":"WATERVEIL","Moves":"1,ICEFANG,1,CRUNCH,1,SONICBOOM,1,GROWL,1,WATERSPORT,1,QUICKATTACK,4,GROWL,7,WATERSPORT,11,QUICKATTACK,15,WATERGUN,18,PURSUIT,21,SWIFT,24,AQUAJET,29,DOUBLEHIT,35,WHIRLPOOL,41,RAZORWIND,46,AQUATAIL,51,AGILITY,57,HYDROPUMP","Height":"1.1","Weight":"33.5","Kind":"Sea Weasel","Pokedex":"It floats using its well-developed flotation sac. It assists in the rescues of drowning people.","WildItemUncommon":"WACANBERRY","Evolutions":null},{"Name":"Cherubi","InternalName":"CHERUBI","Type1":"GRASS","Moves":"1,MORNINGSUN,1,TACKLE,7,GROWTH,10,LEECHSEED,13,HELPINGHAND,19,MAGICALLEAF,22,SUNNYDAY,28,WORRYSEED,31,TAKEDOWN,37,SOLARBEAM,40,LUCKYCHANT,47,PETALBLIZZARD","Height":"0.4","Weight":"3.3","Kind":"Cherry","Pokedex":"The small ball holds the nutrients needed for evolution. Apparently, it is very sweet and tasty.","WildItemUncommon":"MIRACLESEED","Evolutions":"CHERRIM,Level,25"},{"Name":"Cherrim","InternalName":"CHERRIM","Type1":"GRASS","Moves":"1,MORNINGSUN,1,TACKLE,1,GROWTH,7,GROWTH,10,LEECHSEED,13,HELPINGHAND,19,MAGICALLEAF,22,SUNNYDAY,25,PETALDANCE,30,WORRYSEED,35,TAKEDOWN,43,SOLARBEAM,48,LUCKYCHANT,50,PETALBLIZZARD","Height":"0.5","Weight":"9.3","Kind":"Blossom","Pokedex":"It blooms during times of strong sunlight. It tries to make up for everything it endured as a bud.","FormNames":"Overcast Form,Sunshine Form","WildItemUncommon":"MIRACLESEED","Evolutions":null},{"Name":"Shellos","InternalName":"SHELLOS","Type1":"WATER","HiddenAbility":"SANDFORCE","Moves":"1,MUDSLAP,2,MUDSPORT,4,HARDEN,7,WATERPULSE,11,MUDBOMB,16,HIDDENPOWER,22,RAINDANCE,29,BODYSLAM,37,MUDDYWATER,46,RECOVER","Height":"0.3","Weight":"6.3","Kind":"Sea Slug","Pokedex":"Its colors and shapes differ from region to region. In the Sinnoh region, two types are confirmed.","FormNames":"West Sea,East Sea","Evolutions":"GASTRODON,Level,30"},{"Name":"Gastrodon","InternalName":"GASTRODON","Type1":"WATER","Type2":"GROUND","HiddenAbility":"SANDFORCE","Moves":"1,MUDSLAP,1,MUDSPORT,1,HARDEN,1,WATERPULSE,2,MUDSPORT,4,HARDEN,7,WATERPULSE,11,MUDBOMB,16,HIDDENPOWER,22,RAINDANCE,29,BODYSLAM,41,MUDDYWATER,54,RECOVER","Height":"0.9","Weight":"29.9","Kind":"Sea Slug","Pokedex":"It has a pliable body without any bones. If any part of its body is torn off, it grows right back.","FormNames":"West Sea,East Sea","Evolutions":null},{"Name":"Ambipom","InternalName":"AMBIPOM","Type1":"NORMAL","HiddenAbility":"SKILLLINK","Moves":"1,SCRATCH,1,TAILWHIP,1,SANDATTACK,1,ASTONISH,4,SANDATTACK,8,ASTONISH,11,BATONPASS,15,TICKLE,18,FURYSWIPES,22,SWIFT,25,SCREECH,29,AGILITY,32,DOUBLEHIT,36,FLING,39,NASTYPLOT,43,LASTRESORT","Height":"1.2","Weight":"20.3","Kind":"Long Tail","Pokedex":"To eat, it deftly shucks nuts with its two tails. It rarely uses its arms now.","Evolutions":null},{"Name":"Drifloon","InternalName":"DRIFLOON","Type1":"GHOST","Type2":"FLYING","HiddenAbility":"FLAREBOOST","Moves":"1,CONSTRICT,1,MINIMIZE,4,ASTONISH,8,GUST,13,FOCUSENERGY,16,PAYBACK,20,OMINOUSWIND,25,STOCKPILE,27,HEX,32,SWALLOW,32,SPITUP,36,SHADOWBALL,40,AMNESIA,44,BATONPASS,50,EXPLOSION","Height":"0.4","Weight":"1.2","Kind":"Balloon","Pokedex":"A PokÃ©mon formed by the spirits of people and PokÃ©mon. It loves damp, humid seasons.","Evolutions":"DRIFBLIM,Level,28"},{"Name":"Drifblim","InternalName":"DRIFBLIM","Type1":"GHOST","Type2":"FLYING","HiddenAbility":"FLAREBOOST","Moves":"1,PHANTOMFORCE,1,CONSTRICT,1,MINIMIZE,1,ASTONISH,1,GUST,4,ASTONISH,8,GUST,13,FOCUSENERGY,16,PAYBACK,20,OMINOUSWIND,25,STOCKPILE,27,HEX,34,SWALLOW,34,SPITUP,40,SHADOWBALL,46,AMNESIA,52,BATONPASS,60,EXPLOSION,65,PHANTOMFORCE","Height":"1.2","Weight":"15.0","Kind":"Blimp","Pokedex":"It's drowzy in daytime, but flies off in the evening in big groups. No one knows where they go.","Evolutions":null},{"Name":"Buneary","InternalName":"BUNEARY","Type1":"NORMAL","HiddenAbility":"LIMBER","Moves":"1,DEFENSECURL,1,SPLASH,1,POUND,1,FORESIGHT,6,ENDURE,10,BABYDOLLEYES,13,FRUSTRATION,16,QUICKATTACK,23,JUMPKICK,26,BATONPASS,33,AGILITY,36,DIZZYPUNCH,43,AFTERYOU,46,CHARM,50,ENTRAINMENT,56,BOUNCE,63,HEALINGWISH","Height":"0.4","Weight":"5.5","Kind":"Rabbit","Pokedex":"It slams foes by sharply uncoiling its rolled ears. It stings enough to make a grown-up cry in pain.","WildItemUncommon":"CHOPLEBERRY","Evolutions":"LOPUNNY,Happiness,"},{"Name":"Lopunny","InternalName":"LOPUNNY","Type1":"NORMAL","HiddenAbility":"LIMBER","Moves":"1,HEALINGWISH,1,BOUNCE,1,ROTOTILLER,1,MIRRORCOAT,1,MAGICCOAT,1,DEFENSECURL,1,SPLASH,1,POUND,1,FORESIGHT,6,ENDURE,13,RETURN,16,QUICKATTACK,23,JUMPKICK,26,BATONPASS,33,AGILITY,36,DIZZYPUNCH,43,AFTERYOU,46,CHARM,53,ENTRAINMENT,56,BOUNCE,63,HEALINGWISH,66,HIJUMPKICK","Height":"1.2","Weight":"33.3","Kind":"Rabbit","Pokedex":"An extremely cautious PokÃ©mon. It cloaks its body with its fluffy ear fur when it senses danger.","WildItemUncommon":"CHOPLEBERRY","Evolutions":null},{"Name":"Mismagius","InternalName":"MISMAGIUS","Type1":"GHOST","Moves":"1,MYSTICALFIRE,1,POWERGEM,1,PHANTOMFORCE,1,LUCKYCHANT,1,MAGICALLEAF,1,GROWL,1,PSYWAVE,1,SPITE,1,ASTONISH","Height":"0.9","Weight":"4.4","Kind":"Magical","Pokedex":"Its cries sound like incantations. Those hearing it are tormented by headaches and hallucinations.","Evolutions":null},{"Name":"Honchkrow","InternalName":"HONCHKROW","Type1":"DARK","Type2":"FLYING","HiddenAbility":"MOXIE","Moves":"1,NIGHTSLASH,1,SUCKERPUNCH,1,ASTONISH,1,PURSUIT,1,HAZE,1,WINGATTACK,25,SWAGGER,35,NASTYPLOT,45,FOULPLAY,55,NIGHTSLASH,65,QUASH,75,DARKPULSE","Height":"0.9","Weight":"27.3","Kind":"Big Boss","Pokedex":"Becoming active at night, it is known to swarm with numerous Murkrow in tow.","Evolutions":null},{"Name":"Glameow","InternalName":"GLAMEOW","Type1":"NORMAL","HiddenAbility":"KEENEYE","Moves":"1,FAKEOUT,5,SCRATCH,8,GROWL,13,HYPNOSIS,17,FEINTATTACK,20,FURYSWIPES,25,CHARM,29,ASSIST,32,CAPTIVATE,37,SLASH,41,SUCKERPUNCH,44,ATTRACT,48,HONECLAWS,50,PLAYROUGH","Height":"0.5","Weight":"3.9","Kind":"Catty","Pokedex":"It claws if displeased and purrs when affectionate. Its fickleness is very popular among some.","WildItemUncommon":"CHERIBERRY","Evolutions":"PURUGLY,Level,38"},{"Name":"Purugly","InternalName":"PURUGLY","Type1":"NORMAL","HiddenAbility":"DEFIANT","Moves":"1,FAKEOUT,1,SCRATCH,1,GROWL,5,SCRATCH,8,GROWL,13,HYPNOSIS,17,FEINTATTACK,20,FURYSWIPES,25,CHARM,29,ASSIST,32,CAPTIVATE,37,SLASH,38,SWAGGER,45,BODYSLAM,52,ATTRACT,60,HONECLAWS","Height":"1.0","Weight":"43.8","Kind":"Tiger Cat","Pokedex":"It is a brazen brute that barges its way into another PokÃ©mon's nest and claims it as its own.","WildItemUncommon":"CHERIBERRY","Evolutions":null},{"Name":"Chingling","InternalName":"CHINGLING","Type1":"PSYCHIC","Moves":"1,WRAP,4,GROWL,7,ASTONISH,10,CONFUSION,13,YAWN,16,LASTRESORT,19,ENTRAINMENT,32,UPROAR","Height":"0.2","Weight":"0.6","Kind":"Bell","Pokedex":"It emits cries by agitating an orb at the back of its throat. It moves with flouncing hops.","WildItemUncommon":"COLBURBERRY","Evolutions":"CHIMECHO,HappinessNight,"},{"Name":"Stunky","InternalName":"STUNKY","Type1":"POISON","Type2":"DARK","HiddenAbility":"KEENEYE","Moves":"1,SCRATCH,1,FOCUSENERGY,4,POISONGAS,7,SCREECH,10,FURYSWIPES,14,SMOKESCREEN,18,FEINT,22,SLASH,27,TOXIC,32,ACIDSPRAY,37,NIGHTSLASH,43,MEMENTO,46,BELCH,49,EXPLOSION","Height":"0.4","Weight":"19.2","Kind":"Skunk","Pokedex":"It protects itself by spraying a noxious fluid from its rear. The stench lingers for 24 hours.","WildItemUncommon":"PECHABERRY","Evolutions":"SKUNTANK,Level,34"},{"Name":"Skuntank","InternalName":"SKUNTANK","Type1":"POISON","Type2":"DARK","HiddenAbility":"KEENEYE","Moves":"1,SCRATCH,1,FOCUSENERGY,1,POISONGAS,4,POISONGAS,7,SCREECH,10,FURYSWIPES,14,SMOKESCREEN,18,FEINT,22,SLASH,27,TOXIC,32,ACIDSPRAY,34,FLAMETHROWER,41,NIGHTSLASH,51,MEMENTO,56,BELCH,61,EXPLOSION","Height":"1.0","Weight":"38.0","Kind":"Skunk","Pokedex":"It sprays a vile-smelling fluid from the tip of its tail to attack. Its range is over 160 feet.","WildItemUncommon":"PECHABERRY","Evolutions":null},{"Name":"Bronzor","InternalName":"BRONZOR","Type1":"STEEL","Type2":"PSYCHIC","HiddenAbility":"HEAVYMETAL","Moves":"1,TACKLE,1,CONFUSION,5,HYPNOSIS,9,IMPRISON,11,CONFUSERAY,15,PSYWAVE,19,IRONDEFENSE,21,FEINTATTACK,25,SAFEGUARD,29,FUTURESIGHT,31,METALSOUND,35,GYROBALL,39,EXTRASENSORY,41,PAYBACK,45,HEALBLOCK,49,HEAVYSLAM","Height":"0.5","Weight":"60.5","Kind":"Bronze","Pokedex":"Implements shaped like it were discovered in ancient tombs. It is unknown if they are related.","WildItemUncommon":"METALCOAT","Evolutions":"BRONZONG,Level,33"},{"Name":"Bronzong","InternalName":"BRONZONG","Type1":"STEEL","Type2":"PSYCHIC","HiddenAbility":"HEAVYMETAL","Moves":"1,SUNNYDAY,1,RAINDANCE,1,TACKLE,1,CONFUSION,1,HYPNOSIS,1,IMPRISON,5,HYPNOSIS,9,IMPRISON,11,CONFUSERAY,15,PSYWAVE,19,IRONDEFENSE,21,FEINTATTACK,25,SAFEGUARD,29,FUTURESIGHT,31,METALSOUND,33,BLOCK,36,GYROBALL,42,EXTRASENSORY,46,PAYBACK,52,HEALBLOCK,58,HEAVYSLAM","Height":"1.3","Weight":"187.0","Kind":"Bronze Bell","Pokedex":"One caused a news sensation when it was dug up at a construction site after a 2,000-year sleep.","WildItemUncommon":"METALCOAT","Evolutions":null},{"Name":"Bonsly","InternalName":"BONSLY","Type1":"ROCK","HiddenAbility":"RATTLED","Moves":"1,FAKETEARS,1,COPYCAT,5,FLAIL,8,LOWKICK,12,ROCKTHROW,15,MIMIC,19,FEINTATTACK,22,ROCKTOMB,26,BLOCK,29,ROCKSLIDE,36,SUCKERPUNCH,40,DOUBLEEDGE","Height":"0.5","Weight":"15.0","Kind":"Bonsai","Pokedex":"It looks as if it is always crying. It is actually adjusting its body's fluid levels by eliminating excess.","Evolutions":"SUDOWOODO,HasMove,MIMIC"},{"Name":"Mime Jr.","InternalName":"MIMEJR","Type1":"PSYCHIC","Type2":"FAIRY","HiddenAbility":"TECHNICIAN","Moves":"1,TICKLE,1,BARRIER,1,CONFUSION,4,COPYCAT,8,MEDITATE,11,DOUBLESLAP,15,MIMIC,18,ENCORE,22,LIGHTSCREEN,22,REFLECT,25,PSYBEAM,29,SUBSTITUTE,32,RECYCLE,36,TRICK,39,PSYCHIC,43,ROLEPLAY,46,BATONPASS,50,SAFEGUARD","Height":"0.6","Weight":"13.0","Kind":"Mime","Pokedex":"It habitually mimics foes. Once mimicked, the foe cannot take its eyes off this PokÃ©mon.","WildItemUncommon":"LEPPABERRY","Evolutions":"MRMIME,HasMove,MIMIC"},{"Name":"Happiny","InternalName":"HAPPINY","Type1":"NORMAL","HiddenAbility":"FRIENDGUARD","Moves":"1,POUND,1,CHARM,5,COPYCAT,9,REFRESH,12,SWEETKISS","Height":"0.6","Weight":"24.4","Kind":"Playhouse","Pokedex":"It loves round white things. It carries an egg-shaped rock in imitation of Chansey.","WildItemCommon":"OVALSTONE","WildItemUncommon":"LUCKYEGG","Evolutions":"CHANSEY,DayHoldItem,OVALSTONE"},{"Name":"Chatot","InternalName":"CHATOT","Type1":"NORMAL","Type2":"FLYING","HiddenAbility":"BIGPECKS","Moves":"1,HYPERVOICE,1,CHATTER,1,CONFIDE,1,TAUNT,1,PECK,5,GROWL,9,MIRRORMOVE,13,SING,17,FURYATTACK,21,CHATTER,25,TAUNT,29,ROUND,33,MIMIC,37,ECHOEDVOICE,41,ROOST,45,UPROAR,49,SYNCHRONOISE,50,FEATHERDANCE,57,HYPERVOICE","Height":"0.5","Weight":"1.9","Kind":"Music Note","Pokedex":"It can learn and speak human words. If they gather, they all learn the same saying.","WildItemUncommon":"METRONOME","Evolutions":null},{"Name":"Spiritomb","InternalName":"SPIRITOMB","Type1":"GHOST","Type2":"DARK","HiddenAbility":"INFILTRATOR","Moves":"1,CURSE,1,PURSUIT,1,CONFUSERAY,1,SPITE,1,SHADOWSNEAK,7,FEINTATTACK,13,HYPNOSIS,19,DREAMEATER,25,OMINOUSWIND,31,SUCKERPUNCH,37,NASTYPLOT,43,MEMENTO,49,DARKPULSE","Height":"1.0","Weight":"108.0","Kind":"Forbidden","Pokedex":"A PokÃ©mon that was formed by 108 spirits. It is bound to a fissure in an odd keystone.","Evolutions":null},{"Name":"Gible","InternalName":"GIBLE","Type1":"DRAGON","Type2":"GROUND","HiddenAbility":"ROUGHSKIN","Moves":"1,TACKLE,3,SANDATTACK,7,DRAGONRAGE,13,SANDSTORM,15,TAKEDOWN,19,SANDTOMB,25,SLASH,27,DRAGONCLAW,31,DIG,37,DRAGONRUSH","Height":"0.7","Weight":"20.5","Kind":"Land Shark","Pokedex":"It nests in small, horizontal holes in cave walls. It pounces to catch prey that stray too close.","WildItemUncommon":"HABANBERRY","Evolutions":"GABITE,Level,24"},{"Name":"Gabite","InternalName":"GABITE","Type1":"DRAGON","Type2":"GROUND","HiddenAbility":"ROUGHSKIN","Moves":"1,TACKLE,1,SANDATTACK,3,SANDATTACK,7,DRAGONRAGE,13,SANDSTORM,15,TAKEDOWN,19,SANDTOMB,24,DUALCHOP,28,SLASH,33,DRAGONCLAW,40,DIG,49,DRAGONRUSH","Height":"1.4","Weight":"56.0","Kind":"Cave","Pokedex":"There is a long-held belief that medicine made from its scales will heal even incurable illnesses.","WildItemUncommon":"HABANBERRY","Evolutions":"GARCHOMP,Level,48"},{"Name":"Garchomp","InternalName":"GARCHOMP","Type1":"DRAGON","Type2":"GROUND","HiddenAbility":"ROUGHSKIN","Moves":"1,FIREFANG,1,TACKLE,1,SANDATTACK,1,DRAGONRAGE,1,SANDSTORM,3,SANDATTACK,7,DRAGONRAGE,13,SANDSTORM,15,TAKEDOWN,19,SANDTOMB,24,DUALCHOP,28,SLASH,33,DRAGONCLAW,40,DIG,48,CRUNCH,55,DRAGONRUSH","Height":"1.9","Weight":"95.0","Kind":"Mach","Pokedex":"When it folds up its body and extends its wings, it looks like a jet plane. It flies at sonic speed.","WildItemUncommon":"HABANBERRY","Evolutions":null},{"Name":"Munchlax","InternalName":"MUNCHLAX","Type1":"NORMAL","HiddenAbility":"GLUTTONY","Moves":"1,LASTRESORT,1,RECYCLE,1,LICK,1,METRONOME,1,ODORSLEUTH,1,TACKLE,4,DEFENSECURL,9,AMNESIA,12,LICK,17,CHIPAWAY,20,SCREECH,25,BODYSLAM,28,STOCKPILE,33,SWALLOW,36,ROLLOUT,41,FLING,44,BELLYDRUM,49,NATURALGIFT,50,SNATCH,57,LASTRESORT","Height":"0.6","Weight":"105.0","Kind":"Big Eater","Pokedex":"It wolfs down its weight in food once a day, swallowing food whole with almost no chewing.","WildItemCommon":"LEFTOVERS","WildItemUncommon":"LEFTOVERS","WildItemRare":"LEFTOVERS","Evolutions":"SNORLAX,Happiness,"},{"Name":"Riolu","InternalName":"RIOLU","Type1":"FIGHTING","HiddenAbility":"PRANKSTER","Moves":"1,FORESIGHT,1,QUICKATTACK,1,ENDURE,11,FEINT,15,FORCEPALM,19,COPYCAT,24,SCREECH,29,REVERSAL,47,NASTYPLOT,50,FINALGAMBIT","Height":"0.7","Weight":"20.2","Kind":"Emanation","Pokedex":"The aura that emanates from its body intensifies to alert others if it is afraid or sad.","Evolutions":"LUCARIO,HappinessDay,"},{"Name":"Lucario","InternalName":"LUCARIO","Type1":"FIGHTING","Type2":"STEEL","HiddenAbility":"JUSTIFIED","Moves":"1,EXTREMESPEED,1,DRAGONPULSE,1,CLOSECOMBAT,1,AURASPHERE,1,FORESIGHT,1,QUICKATTACK,1,DETECT,1,METALCLAW,11,FEINT,15,POWERUPPUNCH,19,SWORDSDANCE,24,METALSOUND,29,BONERUSH,33,QUICKGUARD,37,MEFIRST,42,AURASPHERE,47,CALMMIND,51,HEALPULSE,55,CLOSECOMBAT,60,DRAGONPULSE,65,EXTREMESPEED","Height":"1.2","Weight":"54.0","Kind":"Aura","Pokedex":"It has the ability to sense the auras of all things. It understands human speech.","Evolutions":null},{"Name":"Hippopotas","InternalName":"HIPPOPOTAS","Type1":"GROUND","HiddenAbility":"SANDFORCE","Moves":"1,TACKLE,1,SANDATTACK,7,BITE,13,YAWN,19,TAKEDOWN,19,DIG,25,SANDTOMB,31,CRUNCH,37,EARTHQUAKE,44,DOUBLEEDGE,50,FISSURE","Height":"0.8","Weight":"49.5","Kind":"Hippo","Pokedex":"It lives in arid places. Instead of perspiration, it expels grainy sand from its body.","Evolutions":"HIPPOWDON,Level,34"},{"Name":"Hippowdon","InternalName":"HIPPOWDON","Type1":"GROUND","HiddenAbility":"SANDFORCE","Moves":"1,ICEFANG,1,FIREFANG,1,THUNDERFANG,1,TACKLE,1,SANDATTACK,1,BITE,1,YAWN,7,BITE,13,YAWN,19,TAKEDOWN,19,DIG,25,SANDTOMB,31,CRUNCH,40,EARTHQUAKE,50,DOUBLEEDGE,60,FISSURE","Height":"2.0","Weight":"300.0","Kind":"Heavyweight","Pokedex":"It blasts internally stored sand from ports on its body to create a towering twister for attack.","Evolutions":null},{"Name":"Skorupi","InternalName":"SKORUPI","Type1":"POISON","Type2":"BUG","HiddenAbility":"KEENEYE","Moves":"1,BITE,1,POISONSTING,1,LEER,5,KNOCKOFF,9,PINMISSILE,13,ACUPRESSURE,16,PURSUIT,20,BUGBITE,23,POISONFANG,27,VENOSHOCK,30,HONECLAWS,34,TOXICSPIKES,38,NIGHTSLASH,41,SCARYFACE,45,CRUNCH,47,FELLSTINGER,49,CROSSPOISON","Height":"0.8","Weight":"12.0","Kind":"Scorpion","Pokedex":"It grips prey with its tail claws and injects poison. It tenaciously hangs on until the poison takes.","WildItemUncommon":"POISONBARB","Evolutions":"DRAPION,Level,40"},{"Name":"Drapion","InternalName":"DRAPION","Type1":"POISON","Type2":"DARK","HiddenAbility":"KEENEYE","Moves":"1,THUNDERFANG,1,ICEFANG,1,FIREFANG,1,BITE,1,POISONSTING,1,LEER,1,KNOCKOFF,5,KNOCKOFF,9,PINMISSILE,13,ACUPRESSURE,16,PURSUIT,20,BUGBITE,23,POISONFANG,27,VENOSHOCK,30,HONECLAWS,34,TOXICSPIKES,38,NIGHTSLASH,43,SCARYFACE,49,CRUNCH,53,FELLSTINGER,57,CROSSPOISON","Height":"1.3","Weight":"61.5","Kind":"Ogre Scorp","Pokedex":"It has the power in its clawed arms to make scrap of a car. The tips of its claws release poison.","WildItemUncommon":"POISONBARB","Evolutions":null},{"Name":"Croagunk","InternalName":"CROAGUNK","Type1":"POISON","Type2":"FIGHTING","HiddenAbility":"POISONTOUCH","Moves":"1,ASTONISH,3,MUDSLAP,8,POISONSTING,10,TAUNT,15,PURSUIT,17,FEINTATTACK,22,REVENGE,24,SWAGGER,29,MUDBOMB,31,SUCKERPUNCH,36,VENOSHOCK,38,NASTYPLOT,43,POISONJAB,45,SLUDGEBOMB,47,BELCH,50,FLATTER","Height":"0.7","Weight":"23.0","Kind":"Toxic Mouth","Pokedex":"Its cheeks hold poison sacs. It tries to catch foes off guard to jab them with toxic fingers.","WildItemUncommon":"BLACKSLUDGE","Evolutions":"TOXICROAK,Level,37"},{"Name":"Toxicroak","InternalName":"TOXICROAK","Type1":"POISON","Type2":"FIGHTING","HiddenAbility":"POISONTOUCH","Moves":"1,ASTONISH,1,MUDSLAP,1,POISONSTING,3,MUDSLAP,8,POISONSTING,10,TAUNT,15,PURSUIT,17,FEINTATTACK,22,REVENGE,24,SWAGGER,29,MUDBOMB,31,SUCKERPUNCH,36,VENOSHOCK,41,NASTYPLOT,49,POISONJAB,54,SLUDGEBOMB,58,BELCH,62,FLATTER","Height":"1.3","Weight":"44.4","Kind":"Toxic Mouth","Pokedex":"Its knuckle claws secrete a toxin so vile that even a scratch could prove fatal.","WildItemUncommon":"BLACKSLUDGE","Evolutions":null},{"Name":"Carnivine","InternalName":"CARNIVINE","Type1":"GRASS","Moves":"1,BIND,1,GROWTH,7,BITE,11,VINEWHIP,17,SWEETSCENT,21,INGRAIN,27,FEINTATTACK,31,LEAFTORNADO,37,STOCKPILE,37,SPITUP,37,SWALLOW,41,CRUNCH,47,WRINGOUT,50,POWERWHIP","Height":"1.4","Weight":"27.0","Kind":"Bug Catcher","Pokedex":"It attracts prey with its sweet-smelling saliva, then chomps down. It takes a whole day to eat prey.","Evolutions":null},{"Name":"Finneon","InternalName":"FINNEON","Type1":"WATER","HiddenAbility":"WATERVEIL","Moves":"1,POUND,6,WATERGUN,10,ATTRACT,13,RAINDANCE,17,GUST,22,WATERPULSE,26,CAPTIVATE,29,SAFEGUARD,33,AQUARING,38,WHIRLPOOL,42,UTURN,45,BOUNCE,49,SILVERWIND,54,SOAK","Height":"0.4","Weight":"7.0","Kind":"Wing Fish","Pokedex":"After long exposure to sunlight, the patterns on its tail fins shine vividly when darkness arrives.","WildItemUncommon":"RINDOBERRY","Evolutions":"LUMINEON,Level,31"},{"Name":"Lumineon","InternalName":"LUMINEON","Type1":"WATER","HiddenAbility":"WATERVEIL","Moves":"1,SOAK,1,GUST,1,POUND,1,WATERGUN,1,ATTRACT,6,WATERGUN,10,ATTRACT,13,RAINDANCE,17,GUST,22,WATERPULSE,26,CAPTIVATE,29,SAFEGUARD,35,AQUARING,42,WHIRLPOOL,48,UTURN,53,BOUNCE,59,SILVERWIND,66,SOAK","Height":"1.2","Weight":"24.0","Kind":"Neon","Pokedex":"It lives on the deep-sea floor. It attracts prey by flashing the patterns on its four tail fins.","WildItemUncommon":"RINDOBERRY","Evolutions":null},{"Name":"Mantyke","InternalName":"MANTYKE","Type1":"WATER","Type2":"FLYING","HiddenAbility":"WATERVEIL","Moves":"1,TACKLE,1,BUBBLE,3,SUPERSONIC,7,BUBBLEBEAM,11,CONFUSERAY,14,WINGATTACK,16,HEADBUTT,19,WATERPULSE,23,WIDEGUARD,27,TAKEDOWN,32,AGILITY,36,AIRSLASH,39,AQUARING,46,BOUNCE,49,HYDROPUMP","Height":"1.0","Weight":"65.0","Kind":"Kite","Pokedex":"A friendly PokÃ©mon that captures the subtle flows of seawater using its two antennae.","Evolutions":"MANTINE,HasInParty,REMORAID"},{"Name":"Snover","InternalName":"SNOVER","Type1":"GRASS","Type2":"ICE","HiddenAbility":"SOUNDPROOF","Moves":"1,POWDERSNOW,1,LEER,5,RAZORLEAF,9,ICYWIND,13,GRASSWHISTLE,17,SWAGGER,21,MIST,26,ICESHARD,31,INGRAIN,36,WOODHAMMER,41,BLIZZARD,46,SHEERCOLD","Height":"1.0","Weight":"50.5","Kind":"Frost Tree","Pokedex":"It lives on snowy mountains. Having had little contact with humans, it is boldly inquisitive.","WildItemUncommon":"NEVERMELTICE","Evolutions":"ABOMASNOW,Level,40"},{"Name":"Abomasnow","InternalName":"ABOMASNOW","Type1":"GRASS","Type2":"ICE","HiddenAbility":"SOUNDPROOF","Moves":"1,ICEPUNCH,1,POWDERSNOW,1,LEER,1,RAZORLEAF,1,ICYWIND,5,RAZORLEAF,9,ICYWIND,13,GRASSWHISTLE,17,SWAGGER,21,MIST,26,ICESHARD,31,INGRAIN,36,WOODHAMMER,47,BLIZZARD,58,SHEERCOLD","Height":"2.2","Weight":"135.5","Kind":"Frost Tree","Pokedex":"It whips up blizzards in mountains that are always buried in snow. It is the abominable snowman.","WildItemUncommon":"NEVERMELTICE","Evolutions":null},{"Name":"Weavile","InternalName":"WEAVILE","Type1":"DARK","Type2":"ICE","HiddenAbility":"PICKPOCKET","Moves":"1,EMBARGO,1,REVENGE,1,ASSURANCE,1,SCRATCH,1,LEER,1,TAUNT,1,QUICKATTACK,8,QUICKATTACK,10,FEINTATTACK,14,ICYWIND,16,FURYSWIPES,20,NASTYPLOT,22,METALCLAW,25,HONECLAWS,28,FLING,32,SCREECH,35,NIGHTSLASH,40,SNATCH,44,PUNISHMENT,47,DARKPULSE","Height":"1.1","Weight":"34.0","Kind":"Sharp Claw","Pokedex":"They live in cold regions, forming groups of four or five that hunt prey with impressive coordination.","WildItemCommon":"GRIPCLAW","WildItemUncommon":"QUICKCLAW","Evolutions":null},{"Name":"Magnezone","InternalName":"MAGNEZONE","Type1":"ELECTRIC","Type2":"STEEL","HiddenAbility":"ANALYTIC","Moves":"1,ZAPCANNON,1,MAGNETICFLUX,1,MIRRORCOAT,1,BARRIER,1,ELECTRICTERRAIN,1,TACKLE,1,SUPERSONIC,1,THUNDERSHOCK,1,SONICBOOM,5,SUPERSONIC,7,THUNDERSHOCK,11,SONICBOOM,13,THUNDERWAVE,17,MAGNETBOMB,19,SPARK,23,MIRRORSHOT,25,METALSOUND,29,ELECTROBALL,33,FLASHCANNON,39,SCREECH,43,DISCHARGE,49,LOCKON,53,MAGNETRISE,59,GYROBALL,63,ZAPCANNON","Height":"1.2","Weight":"180.0","Kind":"Magnet Area","Pokedex":"It evolved from exposure to a special magnetic field. Three units generate magnetism.","WildItemUncommon":"METALCOAT","Evolutions":null},{"Name":"Lickilicky","InternalName":"LICKILICKY","Type1":"NORMAL","HiddenAbility":"CLOUDNINE","Moves":"1,WRINGOUT,1,POWERWHIP,1,LICK,5,SUPERSONIC,9,DEFENSECURL,13,KNOCKOFF,17,WRAP,21,STOMP,25,DISABLE,29,SLAM,33,ROLLOUT,37,CHIPAWAY,41,MEFIRST,45,REFRESH,49,SCREECH,53,POWERWHIP,57,WRINGOUT,61,GYROBALL","Height":"1.7","Weight":"140.0","Kind":"Licking","Pokedex":"It wraps things with its extensible tongue. Getting too close to it will leave you soaked with drool.","WildItemUncommon":"LAGGINGTAIL","Evolutions":null},{"Name":"Rhyperior","InternalName":"RHYPERIOR","Type1":"GROUND","Type2":"ROCK","HiddenAbility":"RECKLESS","Moves":"1,ROCKWRECKER,1,HORNDRILL,1,POISONJAB,1,HORNATTACK,1,TAILWHIP,1,FURYATTACK,1,SCARYFACE,5,FURYATTACK,9,SCARYFACE,13,SMACKDOWN,17,STOMP,21,BULLDOZE,25,CHIPAWAY,29,ROCKBLAST,33,DRILLRUN,37,TAKEDOWN,41,STONEEDGE,42,HAMMERARM,48,EARTHQUAKE,55,MEGAHORN,62,HORNDRILL,69,ROCKWRECKER","Height":"2.4","Weight":"282.8","Kind":"Drill","Pokedex":"It puts rocks in holes in its palms and uses its muscles to shoot them. Geodude are shot at rare times.","Evolutions":null},{"Name":"Tangrowth","InternalName":"TANGROWTH","Type1":"GRASS","HiddenAbility":"REGENERATOR","Moves":"1,BLOCK,1,INGRAIN,1,CONSTRICT,4,SLEEPPOWDER,7,VINEWHIP,10,ABSORB,14,POISONPOWDER,17,BIND,20,GROWTH,23,MEGADRAIN,27,KNOCKOFF,30,STUNSPORE,33,NATURALGIFT,36,GIGADRAIN,40,ANCIENTPOWER,43,SLAM,46,TICKLE,49,WRINGOUT,50,GRASSYTERRAIN,53,POWERWHIP,56,BLOCK","Height":"2.0","Weight":"128.6","Kind":"Vine","Pokedex":"It ensnares prey by extending arms made of vines. Losing arms to predators does not trouble it.","Evolutions":null},{"Name":"Electivire","InternalName":"ELECTIVIRE","Type1":"ELECTRIC","HiddenAbility":"VITALSPIRIT","Moves":"1,ELECTRICTERRAIN,1,IONDELUGE,1,FIREPUNCH,1,QUICKATTACK,1,LEER,1,THUNDERSHOCK,1,LOWKICK,5,THUNDERSHOCK,8,LOWKICK,12,SWIFT,15,SHOCKWAVE,19,THUNDERWAVE,22,ELECTROBALL,26,LIGHTSCREEN,29,THUNDERPUNCH,36,DISCHARGE,42,SCREECH,49,THUNDERBOLT,55,THUNDER,62,GIGAIMPACT,65,ELECTRICTERRAIN","Height":"1.8","Weight":"138.6","Kind":"Thunderbolt","Pokedex":"It pushes the tips of its two tails against the foe, then lets loose with over 20,000 volts of power.","WildItemUncommon":"ELECTIRIZER","Evolutions":null},{"Name":"Magmortar","InternalName":"MAGMORTAR","Type1":"FIRE","HiddenAbility":"VITALSPIRIT","Moves":"1,THUNDERPUNCH,1,SMOG,1,LEER,1,EMBER,1,SMOKESCREEN,5,EMBER,8,SMOKESCREEN,12,FEINTATTACK,15,FIRESPIN,19,CLEARSMOG,22,FLAMEBURST,26,CONFUSERAY,29,FIREPUNCH,36,LAVAPLUME,42,SUNNYDAY,49,FLAMETHROWER,55,FIREBLAST,62,HYPERBEAM","Height":"1.6","Weight":"68.0","Kind":"Blast","Pokedex":"It blasts fireballs of over 3,600 degrees F from the ends of its arms. It lives in volcanic craters.","WildItemUncommon":"MAGMARIZER","Evolutions":null},{"Name":"Togekiss","InternalName":"TOGEKISS","Type1":"FAIRY","Type2":"FLYING","HiddenAbility":"SUPERLUCK","Moves":"1,AFTERYOU,1,SKYATTACK,1,EXTREMESPEED,1,AURASPHERE,1,AIRSLASH","Height":"1.5","Weight":"38.0","Kind":"Jubilee","Pokedex":"It will never appear where there is strife. Its sightings have become rare recently.","Evolutions":null},{"Name":"Yanmega","InternalName":"YANMEGA","Type1":"BUG","Type2":"FLYING","HiddenAbility":"FRISK","Moves":"1,BUGBUZZ,1,AIRSLASH,1,NIGHTSLASH,1,BUGBITE,1,TACKLE,1,FORESIGHT,1,QUICKATTACK,1,DOUBLETEAM,6,QUICKATTACK,11,DOUBLETEAM,14,SONICBOOM,17,DETECT,22,SUPERSONIC,27,UPROAR,30,PURSUIT,33,ANCIENTPOWER,38,FEINT,43,SLASH,46,SCREECH,49,UTURN,54,AIRSLASH,57,BUGBUZZ","Height":"1.9","Weight":"51.5","Kind":"Ogre Darner","Pokedex":"By churning its wings, it creates shock waves that inflict critical internal injuries to foes.","WildItemUncommon":"WIDELENS","Evolutions":null},{"Name":"Leafeon","InternalName":"LEAFEON","Type1":"GRASS","HiddenAbility":"CHLOROPHYLL","Moves":"1,TAILWHIP,1,TACKLE,1,HELPINGHAND,5,SANDATTACK,9,RAZORLEAF,13,QUICKATTACK,17,GRASSWHISTLE,20,MAGICALLEAF,25,GIGADRAIN,29,SWORDSDANCE,33,SYNTHESIS,37,SUNNYDAY,41,LASTRESORT,45,LEAFBLADE","Height":"1.0","Weight":"25.5","Kind":"Verdant","Pokedex":"Just like a plant, it uses photosynthesis. As a result, it is always enveloped in clear air.","Evolutions":null},{"Name":"Glaceon","InternalName":"GLACEON","Type1":"ICE","HiddenAbility":"ICEBODY","Moves":"1,HELPINGHAND,1,TACKLE,1,TAILWHIP,5,SANDATTACK,9,ICYWIND,13,QUICKATTACK,17,BITE,20,ICEFANG,25,ICESHARD,29,BARRIER,33,MIRRORCOAT,37,HAIL,41,LASTRESORT,45,BLIZZARD","Height":"0.8","Weight":"25.9","Kind":"Fresh Snow","Pokedex":"As a protective technique, it can completely freeze its fur to make its hairs stand like needles.","Evolutions":null},{"Name":"Gliscor","InternalName":"GLISCOR","Type1":"GROUND","Type2":"FLYING","HiddenAbility":"POISONHEAL","Moves":"1,GUILLOTINE,1,THUNDERFANG,1,ICEFANG,1,FIREFANG,1,POISONJAB,1,SANDATTACK,1,HARDEN,1,KNOCKOFF,4,SANDATTACK,7,HARDEN,10,KNOCKOFF,13,QUICKATTACK,16,FURYCUTTER,19,FEINTATTACK,22,ACROBATICS,27,NIGHTSLASH,30,UTURN,35,SCREECH,40,XSCISSOR,45,SKYUPPERCUT,50,SWORDSDANCE,55,GUILLOTINE","Height":"2.0","Weight":"42.5","Kind":"Fang Scorp","Pokedex":"It observes prey while hanging inverted from branches. When the chance presents itself, it swoops!","Evolutions":null},{"Name":"Mamoswine","InternalName":"MAMOSWINE","Type1":"ICE","Type2":"GROUND","HiddenAbility":"THICKFAT","Moves":"1,SCARYFACE,1,ANCIENTPOWER,1,PECK,1,ODORSLEUTH,1,MUDSPORT,1,POWDERSNOW,5,MUDSPORT,8,POWDERSNOW,11,MUDSLAP,14,ENDURE,18,MUDBOMB,21,HAIL,24,ICEFANG,28,TAKEDOWN,33,DOUBLEHIT,37,MIST,41,THRASH,46,EARTHQUAKE,52,BLIZZARD,58,SCARYFACE","Height":"2.5","Weight":"291.0","Kind":"Twin Tusk","Pokedex":"Its impressive tusks are made of ice. The population thinned when it turned warm after the ice age.","Evolutions":null},{"Name":"Porygon-Z","InternalName":"PORYGONZ","Type1":"NORMAL","HiddenAbility":"ANALYTIC","Moves":"1,TRICKROOM,1,ZAPCANNON,1,MAGICCOAT,1,CONVERSION2,1,TACKLE,1,CONVERSION,1,NASTYPLOT,7,PSYBEAM,12,AGILITY,18,RECOVER,23,MAGNETRISE,29,SIGNALBEAM,34,EMBARGO,40,DISCHARGE,45,LOCKON,50,TRIATTACK,56,MAGICCOAT,62,ZAPCANNON,67,HYPERBEAM","Height":"0.9","Weight":"34.0","Kind":"Virtual","Pokedex":"Additional software was installed to make it a better PokÃ©mon. It began acting oddly, however.","Evolutions":null},{"Name":"Gallade","InternalName":"GALLADE","Type1":"PSYCHIC","Type2":"FIGHTING","HiddenAbility":"JUSTIFIED","Moves":"1,STOREDPOWER,1,CLOSECOMBAT,1,LEAFBLADE,1,NIGHTSLASH,1,LEER,1,CONFUSION,1,DOUBLETEAM,1,TELEPORT,4,CONFUSION,6,DOUBLETEAM,9,TELEPORT,11,QUICKGUARD,14,FURYCUTTER,17,SLASH,19,HEALPULSE,23,WIDEGUARD,26,SWORDSDANCE,31,PSYCHOCUT,35,HELPINGHAND,40,FEINT,44,FALSESWIPE,49,PROTECT,53,CLOSECOMBAT,58,STOREDPOWER","Height":"1.6","Weight":"52.0","Kind":"Blade","Pokedex":"A master of courtesy and swordsmanship, it fights using extending swords on its elbows.","Evolutions":null},{"Name":"Probopass","InternalName":"PROBOPASS","Type1":"ROCK","Type2":"STEEL","HiddenAbility":"SANDFORCE","Moves":"1,MAGNETRISE,1,GRAVITY,1,WIDEGUARD,1,TACKLE,1,IRONDEFENSE,1,BLOCK,1,MAGNETBOMB,4,IRONDEFENSE,7,BLOCK,10,MAGNETBOMB,13,THUNDERWAVE,16,REST,19,SPARK,22,ROCKSLIDE,25,POWERGEM,28,ROCKBLAST,31,DISCHARGE,34,SANDSTORM,37,EARTHPOWER,40,STONEEDGE,43,LOCKON,43,ZAPCANNON","Height":"1.4","Weight":"340.0","Kind":"Compass","Pokedex":"It exudes strong magnetism from all over. It controls three small units called Mini-Noses.","WildItemUncommon":"HARDSTONE","Evolutions":null},{"Name":"Dusknoir","InternalName":"DUSKNOIR","Type1":"GHOST","Moves":"1,FUTURESIGHT,1,FIREPUNCH,1,ICEPUNCH,1,THUNDERPUNCH,1,GRAVITY,1,BIND,1,LEER,1,NIGHTSHADE,1,DISABLE,1,ASTONISH,6,DISABLE,9,ASTONISH,14,FORESIGHT,17,SHADOWSNEAK,22,PURSUIT,25,WILLOWISP,30,CONFUSERAY,33,CURSE,37,SHADOWPUNCH,40,HEX,45,SHADOWBALL,52,MEANLOOK,57,PAYBACK,64,FUTURESIGHT","Height":"2.2","Weight":"106.6","Kind":"Gripper","Pokedex":"The antenna on its head captures radio waves from the world of spirits that command it to take people there.","WildItemUncommon":"KASIBBERRY","Evolutions":null},{"Name":"Froslass","InternalName":"FROSLASS","Type1":"ICE","Type2":"GHOST","HiddenAbility":"CURSEDBODY","Moves":"1,DESTINYBOND,1,POWDERSNOW,1,LEER,1,DOUBLETEAM,1,ICESHARD,5,DOUBLETEAM,10,ICESHARD,14,ICYWIND,19,ASTONISH,23,DRAININGKISS,28,OMINOUSWIND,32,CONFUSERAY,37,WAKEUPSLAP,41,CAPTIVATE,42,SHADOWBALL,48,BLIZZARD,54,HAIL,61,DESTINYBOND","Height":"1.3","Weight":"26.6","Kind":"Snow Land","Pokedex":"It freezes foes with an icy breath nearly -60 degrees F. What seems to be its body is actually hollow.","WildItemUncommon":"BABIRIBERRY","Evolutions":null},{"Name":"Rotom","InternalName":"ROTOM","Type1":"ELECTRIC","Type2":"GHOST","Moves":"1,DISCHARGE,1,CHARGE,1,TRICK,1,ASTONISH,1,THUNDERWAVE,1,THUNDERSHOCK,1,CONFUSERAY,8,UPROAR,15,DOUBLETEAM,22,SHOCKWAVE,29,OMINOUSWIND,36,SUBSTITUTE,43,ELECTROBALL,50,HEX,57,CHARGE,64,DISCHARGE","Height":"0.3","Weight":"0.3","Kind":"Plasma","Pokedex":"Its body is composed of plasma. It is known to infiltrate electronic devices and wreak havoc.","FormNames":"Normal Rotom,Heat Rotom,Wash Rotom,Frost Rotom,Fan Rotom,Mow Rotom","Evolutions":null},{"Name":"Uxie","InternalName":"UXIE","Type1":"PSYCHIC","Moves":"1,MEMENTO,1,NATURALGIFT,1,FLAIL,1,REST,1,CONFUSION,6,IMPRISON,16,ENDURE,21,SWIFT,31,YAWN,36,FUTURESIGHT,46,AMNESIA,50,EXTRASENSORY,61,FLAIL,66,NATURALGIFT,76,MEMENTO","Height":"0.3","Weight":"0.3","Kind":"Knowledge","Pokedex":"Known as âThe Being of Knowledge.â It is said that it can wipe out the memory of those who see its eyes.","Evolutions":null},{"Name":"Mesprit","InternalName":"MESPRIT","Type1":"PSYCHIC","Moves":"1,HEALINGWISH,1,NATURALGIFT,1,COPYCAT,1,REST,1,CONFUSION,6,IMPRISON,16,PROTECT,21,SWIFT,31,LUCKYCHANT,36,FUTURESIGHT,46,CHARM,50,EXTRASENSORY,61,COPYCAT,66,NATURALGIFT,76,HEALINGWISH","Height":"0.3","Weight":"0.3","Kind":"Emotion","Pokedex":"Known as âThe Being of Emotion.â It taught humans the nobility of sorrow, pain, and joy.","Evolutions":null},{"Name":"Azelf","InternalName":"AZELF","Type1":"PSYCHIC","Moves":"1,NATURALGIFT,1,LASTRESORT,1,REST,1,CONFUSION,6,IMPRISON,16,DETECT,21,SWIFT,31,UPROAR,36,FUTURESIGHT,46,NASTYPLOT,50,EXTRASENSORY,61,LASTRESORT,66,NATURALGIFT,76,EXPLOSION","Height":"0.3","Weight":"0.3","Kind":"Willpower","Pokedex":"Known as âThe Being of Willpower.â It sleeps at the bottom of a lake to keep the world in balance.","Evolutions":null},{"Name":"Dialga","InternalName":"DIALGA","Type1":"STEEL","Type2":"DRAGON","HiddenAbility":"TELEPATHY","Moves":"1,DRAGONBREATH,1,SCARYFACE,6,METALCLAW,10,ANCIENTPOWER,15,SLASH,19,POWERGEM,24,METALBURST,28,DRAGONCLAW,33,EARTHPOWER,37,AURASPHERE,42,IRONTAIL,46,ROAROFTIME,50,FLASHCANNON","Height":"5.4","Weight":"683.0","Kind":"Temporal","Pokedex":"It has the power to control time. It appears in Sinnoh-region myths as an ancient deity.","Evolutions":null},{"Name":"Palkia","InternalName":"PALKIA","Type1":"WATER","Type2":"DRAGON","HiddenAbility":"TELEPATHY","Moves":"1,DRAGONBREATH,1,SCARYFACE,6,WATERPULSE,10,ANCIENTPOWER,15,SLASH,19,POWERGEM,24,AQUATAIL,28,DRAGONCLAW,33,EARTHPOWER,37,AURASPHERE,42,AQUATAIL,46,SPACIALREND,50,HYDROPUMP","Height":"4.2","Weight":"336.0","Kind":"Spatial","Pokedex":"It has the ability to distort space. It is described as a deity in Sinnoh-region mythology.","Evolutions":null},{"Name":"Heatran","InternalName":"HEATRAN","Type1":"FIRE","Type2":"STEEL","HiddenAbility":"FLAMEBODY","Moves":"1,MAGMASTORM,1,HEATWAVE,1,EARTHPOWER,1,IRONHEAD,1,FIRESPIN,1,ANCIENTPOWER,9,LEER,17,FIREFANG,25,METALSOUND,33,CRUNCH,41,SCARYFACE,49,LAVAPLUME,57,FIRESPIN,65,IRONHEAD,73,EARTHPOWER,81,HEATWAVE,88,STONEEDGE,96,MAGMASTORM","Height":"1.7","Weight":"430.0","Kind":"Lava Dome","Pokedex":"It dwells in volcanic caves. It digs in with its cross-shaped feet to crawl on ceilings and walls.","Evolutions":null},{"Name":"Regigigas","InternalName":"REGIGIGAS","Type1":"NORMAL","Moves":"1,HEAVYSLAM,1,CRUSHGRIP,1,FIREPUNCH,1,ICEPUNCH,1,THUNDERPUNCH,1,DIZZYPUNCH,1,KNOCKOFF,1,CONFUSERAY,1,FORESIGHT,25,REVENGE,40,WIDEGUARD,50,ZENHEADBUTT,65,PAYBACK,75,CRUSHGRIP,90,HEAVYSLAM,100,GIGAIMPACT","Height":"3.7","Weight":"420.0","Kind":"Colossal","Pokedex":"There is an enduring legend that states this PokÃ©mon towed continents with ropes.","Evolutions":null},{"Name":"Giratina","InternalName":"GIRATINA","Type1":"GHOST","Type2":"DRAGON","HiddenAbility":"TELEPATHY","Moves":"1,DRAGONBREATH,1,SCARYFACE,6,OMINOUSWIND,10,ANCIENTPOWER,15,SLASH,19,SHADOWSNEAK,24,DESTINYBOND,28,DRAGONCLAW,33,EARTHPOWER,37,AURASPHERE,42,SHADOWCLAW,46,SHADOWFORCE,50,HEX","Height":"4.5","Weight":"750.0","Kind":"Renegade","Pokedex":"A PokÃ©mon that is said to live in a world on the reverse side of ours. It appears in an ancient cemetery.","FormNames":"Altered Forme,Origin Forme","Evolutions":null},{"Name":"Cresselia","InternalName":"CRESSELIA","Type1":"PSYCHIC","Moves":"1,LUNARDANCE,1,PSYCHOSHIFT,1,PSYCHOCUT,1,MOONLIGHT,1,CONFUSION,1,DOUBLETEAM,11,SAFEGUARD,20,MIST,29,AURORABEAM,38,FUTURESIGHT,47,SLASH,57,MOONLIGHT,66,PSYCHOCUT,75,PSYCHOSHIFT,84,LUNARDANCE,93,PSYCHIC,99,MOONBLAST","Height":"1.5","Weight":"85.6","Kind":"Lunar","Pokedex":"Shiny particles are released from its wings like a veil. It is said to represent the crescent moon.","Evolutions":null},{"Name":"Phione","InternalName":"PHIONE","Type1":"WATER","Moves":"1,BUBBLE,1,WATERSPORT,9,CHARM,16,SUPERSONIC,24,BUBBLEBEAM,31,ACIDARMOR,39,WHIRLPOOL,46,WATERPULSE,54,AQUARING,61,DIVE,69,RAINDANCE","Height":"0.4","Weight":"3.1","Kind":"Sea Drifter","Pokedex":"A PokÃ©mon that lives in warm seas. It inflates the flotation sac on its head to drift and search for food.","Evolutions":null},{"Name":"Manaphy","InternalName":"MANAPHY","Type1":"WATER","Moves":"1,TAILGLOW,1,BUBBLE,1,WATERSPORT,9,CHARM,16,SUPERSONIC,24,BUBBLEBEAM,31,ACIDARMOR,39,WHIRLPOOL,46,WATERPULSE,54,AQUARING,61,DIVE,69,RAINDANCE,76,HEARTSWAP","Height":"0.3","Weight":"1.4","Kind":"Seafaring","Pokedex":"Born on a cold seafloor, it will swim great distances to return to its birthplace.","Evolutions":null},{"Name":"Darkrai","InternalName":"DARKRAI","Type1":"DARK","Moves":"1,OMINOUSWIND,1,DISABLE,11,QUICKATTACK,20,HYPNOSIS,29,FEINTATTACK,38,NIGHTMARE,47,DOUBLETEAM,57,HAZE,66,DARKVOID,75,NASTYPLOT,84,DREAMEATER,93,DARKPULSE","Height":"1.5","Weight":"50.5","Kind":"Pitch-Black","Pokedex":"It can lull people to sleep and make them dream. It is active during nights of the new moon.","Evolutions":null},{"Name":"Shaymin","InternalName":"SHAYMIN","Type1":"GRASS","Moves":"1,GROWTH,10,MAGICALLEAF,19,LEECHSEED,28,SYNTHESIS,37,SWEETSCENT,46,NATURALGIFT,55,WORRYSEED,64,AROMATHERAPY,73,ENERGYBALL,82,SWEETKISS,91,HEALINGWISH,100,SEEDFLARE","Height":"0.2","Weight":"2.1","Kind":"Gratitude","Pokedex":"It lives in flower patches and avoids detection by curling up to look like a flowering plant.","FormNames":"Land Forme,Sky Forme","WildItemCommon":"LUMBERRY","WildItemUncommon":"LUMBERRY","WildItemRare":"LUMBERRY","Evolutions":null},{"Name":"Arceus","InternalName":"ARCEUS","Type1":"NORMAL","Moves":"1,SEISMICTOSS,1,COSMICPOWER,1,NATURALGIFT,1,PUNISHMENT,10,GRAVITY,20,EARTHPOWER,30,HYPERVOICE,40,EXTREMESPEED,50,REFRESH,60,FUTURESIGHT,70,RECOVER,80,HYPERBEAM,90,PERISHSONG,100,JUDGMENT","Height":"3.2","Weight":"320.0","Kind":"Alpha","Pokedex":"It is described in mythology as the PokÃ©mon that shaped the universe with its 1,000 arms.","Evolutions":null},{"Name":"Victini","InternalName":"VICTINI","Type1":"PSYCHIC","Type2":"FIRE","Moves":"1,SEARINGSHOT,1,FOCUSENERGY,1,CONFUSION,1,INCINERATE,1,QUICKATTACK,9,ENDURE,17,HEADBUTT,25,FLAMECHARGE,33,REVERSAL,41,FLAMEBURST,49,ZENHEADBUTT,57,INFERNO,65,DOUBLEEDGE,73,FLAREBLITZ,81,FINALGAMBIT,89,STOREDPOWER,97,OVERHEAT","Height":"0.4","Weight":"4.0","Kind":"Victory","Pokedex":"This PokÃ©mon brings victory. It is said that Trainers with Victini always win, regardless of the type of encounter.","Evolutions":null},{"Name":"Snivy","InternalName":"SNIVY","Type1":"GRASS","HiddenAbility":"CONTRARY","Moves":"1,TACKLE,4,LEER,7,VINEWHIP,10,WRAP,13,GROWTH,16,LEAFTORNADO,19,LEECHSEED,22,MEGADRAIN,25,SLAM,28,LEAFBLADE,31,COIL,34,GIGADRAIN,37,WRINGOUT,40,GASTROACID,43,LEAFSTORM","Height":"0.6","Weight":"8.1","Kind":"Grass Snake","Pokedex":"They photosynthesize by bathing their tails in sunlight. When they are not feeling well, their tails droop.","Evolutions":"SERVINE,Level,17"},{"Name":"Servine","InternalName":"SERVINE","Type1":"GRASS","HiddenAbility":"CONTRARY","Moves":"1,TACKLE,1,LEER,1,VINEWHIP,1,WRAP,4,LEER,7,VINEWHIP,10,WRAP,13,GROWTH,16,LEAFTORNADO,20,LEECHSEED,24,MEGADRAIN,28,SLAM,32,LEAFBLADE,36,COIL,40,GIGADRAIN,44,WRINGOUT,48,GASTROACID,52,LEAFSTORM","Height":"0.8","Weight":"16.0","Kind":"Grass Snake","Pokedex":"They avoid attacks by sinking into the shadows of thick foliage. They retaliate with masterful whipping techniques.","Evolutions":"SERPERIOR,Level,36"},{"Name":"Serperior","InternalName":"SERPERIOR","Type1":"GRASS","HiddenAbility":"CONTRARY","Moves":"1,TACKLE,1,LEER,1,VINEWHIP,1,WRAP,4,LEER,7,VINEWHIP,10,WRAP,13,GROWTH,16,LEAFTORNADO,20,LEECHSEED,24,MEGADRAIN,28,SLAM,32,LEAFBLADE,38,COIL,44,GIGADRAIN,50,WRINGOUT,56,GASTROACID,62,LEAFSTORM","Height":"3.3","Weight":"63.0","Kind":"Regal","Pokedex":"They raise their heads to intimidate opponents, but only give it their all when fighting a powerful opponent.","Evolutions":null},{"Name":"Tepig","InternalName":"TEPIG","Type1":"FIRE","HiddenAbility":"THICKFAT","Moves":"1,TACKLE,3,TAILWHIP,7,EMBER,9,ODORSLEUTH,13,DEFENSECURL,15,FLAMECHARGE,19,SMOG,21,ROLLOUT,25,TAKEDOWN,27,HEATCRASH,31,ASSURANCE,33,FLAMETHROWER,37,HEADSMASH,39,ROAR,43,FLAREBLITZ","Height":"0.5","Weight":"9.9","Kind":"Fire Pig","Pokedex":"It blows fire through its nose. When it catches a cold, the fire becomes pitch-black smoke instead.","Evolutions":"PIGNITE,Level,17"},{"Name":"Pignite","InternalName":"PIGNITE","Type1":"FIRE","Type2":"FIGHTING","HiddenAbility":"THICKFAT","Moves":"1,TACKLE,1,TAILWHIP,1,EMBER,1,ODORSLEUTH,3,TAILWHIP,7,EMBER,9,ODORSLEUTH,13,DEFENSECURL,15,FLAMECHARGE,17,ARMTHRUST,20,SMOG,23,ROLLOUT,28,TAKEDOWN,31,HEATCRASH,36,ASSURANCE,39,FLAMETHROWER,44,HEADSMASH,47,ROAR,52,FLAREBLITZ","Height":"1.0","Weight":"55.5","Kind":"Fire Pig","Pokedex":"Whatever it eats becomes fuel for the flame in its stomach. When it is angered, the intensity of the flame increases.","Evolutions":"EMBOAR,Level,36"},{"Name":"Emboar","InternalName":"EMBOAR","Type1":"FIRE","Type2":"FIGHTING","HiddenAbility":"RECKLESS","Moves":"1,HAMMERARM,1,TACKLE,1,TAILWHIP,1,EMBER,1,ODORSLEUTH,3,TAILWHIP,7,EMBER,9,ODORSLEUTH,13,DEFENSECURL,15,FLAMECHARGE,17,ARMTHRUST,20,SMOG,23,ROLLOUT,28,TAKEDOWN,31,HEATCRASH,38,ASSURANCE,43,FLAMETHROWER,50,HEADSMASH,55,ROAR,62,FLAREBLITZ","Height":"1.6","Weight":"150.0","Kind":"Mega Fire Pig","Pokedex":"It can throw a fire punch by setting its fists on fire with its fiery chin. It cares deeply about its friends.","Evolutions":null},{"Name":"Oshawott","InternalName":"OSHAWOTT","Type1":"WATER","HiddenAbility":"SHELLARMOR","Moves":"1,TACKLE,5,TAILWHIP,7,WATERGUN,11,WATERSPORT,13,FOCUSENERGY,17,RAZORSHELL,19,FURYCUTTER,23,WATERPULSE,25,REVENGE,29,AQUAJET,31,ENCORE,35,AQUATAIL,37,RETALIATE,41,SWORDSDANCE,43,HYDROPUMP","Height":"0.5","Weight":"5.9","Kind":"Sea Otter","Pokedex":"The scalchop on its stomach is made from the same elements as claws. It detaches the scalchop for use as a blade.","Evolutions":"DEWOTT,Level,17"},{"Name":"Dewott","InternalName":"DEWOTT","Type1":"WATER","HiddenAbility":"SHELLARMOR","Moves":"1,TACKLE,1,TAILWHIP,1,WATERGUN,1,WATERSPORT,5,TAILWHIP,7,WATERGUN,11,WATERSPORT,13,FOCUSENERGY,17,RAZORSHELL,20,FURYCUTTER,25,WATERPULSE,28,REVENGE,33,AQUAJET,36,ENCORE,41,AQUATAIL,44,RETALIATE,49,SWORDSDANCE,52,HYDROPUMP","Height":"0.8","Weight":"24.5","Kind":"Discipline","Pokedex":"Scalchop techniques differ from one Dewott to another. It never neglects maintaining its scalchops.","Evolutions":"SAMUROTT,Level,36"},{"Name":"Samurott","InternalName":"SAMUROTT","Type1":"WATER","HiddenAbility":"SHELLARMOR","Moves":"1,MEGAHORN,1,TACKLE,1,TAILWHIP,1,WATERGUN,1,WATERSPORT,5,TAILWHIP,7,WATERGUN,11,WATERSPORT,13,FOCUSENERGY,17,RAZORSHELL,20,FURYCUTTER,25,WATERPULSE,28,REVENGE,33,AQUAJET,36,SLASH,38,ENCORE,45,AQUATAIL,50,RETALIATE,57,SWORDSDANCE,62,HYDROPUMP","Height":"1.5","Weight":"94.6","Kind":"Formidable","Pokedex":"Part of the armor on its anterior legs becomes a giant sword. Its cry alone is enough to intimidate most enemies.","Evolutions":null},{"Name":"Patrat","InternalName":"PATRAT","Type1":"NORMAL","HiddenAbility":"ANALYTIC","Moves":"1,TACKLE,3,LEER,6,BITE,8,BIDE,11,DETECT,13,SANDATTACK,16,CRUNCH,18,HYPNOSIS,21,SUPERFANG,23,AFTERYOU,26,WORKUP,28,HYPERFANG,31,MEANLOOK,33,BATONPASS,36,SLAM","Height":"0.5","Weight":"11.6","Kind":"Scout","Pokedex":"Extremely cautious, they take shifts to maintain a constant watch of their nest. They feel insecure without a lookout.","Evolutions":"WATCHOG,Level,20"},{"Name":"Watchog","InternalName":"WATCHOG","Type1":"NORMAL","HiddenAbility":"ANALYTIC","Moves":"1,ROTOTILLER,1,TACKLE,1,LEER,1,BITE,1,LOWKICK,3,LEER,6,BITE,8,BIDE,11,DETECT,13,SANDATTACK,16,CRUNCH,18,HYPNOSIS,20,CONFUSERAY,22,SUPERFANG,25,AFTERYOU,29,PSYCHUP,32,HYPERFANG,36,MEANLOOK,39,BATONPASS,43,SLAM","Height":"1.1","Weight":"27.0","Kind":"Lookout","Pokedex":"They make the patterns on their bodies shine in order to threaten predators. Keen eyesight lets them see in the dark.","Evolutions":null},{"Name":"Lillipup","InternalName":"LILLIPUP","Type1":"NORMAL","HiddenAbility":"RUNAWAY","Moves":"1,LEER,1,TACKLE,5,ODORSLEUTH,8,BITE,10,BABYDOLLEYES,12,HELPINGHAND,15,TAKEDOWN,19,WORKUP,22,CRUNCH,26,ROAR,29,RETALIATE,33,REVERSAL,36,LASTRESORT,40,GIGAIMPACT,45,PLAYROUGH","Height":"0.4","Weight":"4.1","Kind":"Puppy","Pokedex":"The long hair around its face provides an amazing radar that lets it sense subtle changes in its surroundings.","Evolutions":"HERDIER,Level,16"},{"Name":"Herdier","InternalName":"HERDIER","Type1":"NORMAL","HiddenAbility":"SCRAPPY","Moves":"1,LEER,1,TACKLE,1,ODORSLEUTH,1,BITE,5,ODORSLEUTH,8,BITE,12,HELPINGHAND,15,TAKEDOWN,20,WORKUP,24,CRUNCH,29,ROAR,33,RETALIATE,38,REVERSAL,42,LASTRESORT,47,GIGAIMPACT,52,PLAYROUGH","Height":"0.9","Weight":"14.7","Kind":"Loyal Dog","Pokedex":"It loyally follows its Trainer's orders. For ages, they have helped Trainers raise PokÃ©mon.","Evolutions":"STOUTLAND,Level,32"},{"Name":"Stoutland","InternalName":"STOUTLAND","Type1":"NORMAL","HiddenAbility":"SCRAPPY","Moves":"1,ICEFANG,1,FIREFANG,1,THUNDERFANG,1,LEER,1,TACKLE,1,ODORSLEUTH,1,BITE,5,ODORSLEUTH,8,BITE,12,HELPINGHAND,15,TAKEDOWN,20,WORKUP,24,CRUNCH,29,ROAR,36,RETALIATE,42,REVERSAL,51,LASTRESORT,59,GIGAIMPACT,63,PLAYROUGH","Height":"1.2","Weight":"61.0","Kind":"Big-Hearted","Pokedex":"This extremely wise PokÃ©mon excels at rescuing people stranded at sea or in the mountains.","Evolutions":null},{"Name":"Purrloin","InternalName":"PURRLOIN","Type1":"DARK","HiddenAbility":"PRANKSTER","Moves":"1,SCRATCH,3,GROWL,6,ASSIST,10,SANDATTACK,12,FURYSWIPES,15,PURSUIT,19,TORMENT,21,FAKEOUT,24,HONECLAWS,28,ASSURANCE,30,SLASH,33,CAPTIVATE,37,NIGHTSLASH,39,SNATCH,42,NASTYPLOT,46,SUCKERPUNCH,49,PLAYROUGH","Height":"0.4","Weight":"10.1","Kind":"Devious","Pokedex":"Its cute act is a ruse. When victims let down their guard, they find their items taken. It attacks with sharp claws.","Evolutions":"LIEPARD,Level,20"},{"Name":"Liepard","InternalName":"LIEPARD","Type1":"DARK","HiddenAbility":"PRANKSTER","Moves":"1,SCRATCH,1,GROWL,1,ASSIST,1,SANDATTACK,3,GROWL,6,ASSIST,10,SANDATTACK,12,FURYSWIPES,15,PURSUIT,19,TORMENT,22,FAKEOUT,26,HONECLAWS,31,ASSURANCE,34,SLASH,38,TAUNT,43,NIGHTSLASH,47,SNATCH,50,NASTYPLOT,55,SUCKERPUNCH,58,PLAYROUGH","Height":"1.1","Weight":"37.5","Kind":"Cruel","Pokedex":"Stealthily, it sneaks up on its target, striking from behind before its victim has a chance to react.","Evolutions":null},{"Name":"Pansage","InternalName":"PANSAGE","Type1":"GRASS","HiddenAbility":"OVERGROW","Moves":"1,SCRATCH,1,PLAYNICE,4,LEER,7,LICK,10,VINEWHIP,13,FURYSWIPES,16,LEECHSEED,19,BITE,22,SEEDBOMB,25,TORMENT,28,FLING,31,ACROBATICS,34,GRASSKNOT,37,RECYCLE,40,NATURALGIFT,43,CRUNCH","Height":"0.6","Weight":"10.5","Kind":"Grass Monkey","Pokedex":"It shares the leaf on its head with weary-looking PokÃ©mon. These leaves are known to relieve stress.","WildItemCommon":"ORANBERRY","WildItemUncommon":"OCCABERRY","Evolutions":"SIMISAGE,Item,LEAFSTONE"},{"Name":"Simisage","InternalName":"SIMISAGE","Type1":"GRASS","HiddenAbility":"OVERGROW","Moves":"1,LEER,1,LICK,1,FURYSWIPES,1,SEEDBOMB","Height":"1.1","Weight":"30.5","Kind":"Thorn Monkey","Pokedex":"Ill tempered, it fights by swinging its barbed tail around wildly. The leaf growing on its head is very bitter.","WildItemCommon":"ORANBERRY","WildItemUncommon":"OCCABERRY","Evolutions":null},{"Name":"Pansear","InternalName":"PANSEAR","Type1":"FIRE","HiddenAbility":"BLAZE","Moves":"1,SCRATCH,1,PLAYNICE,4,LEER,7,LICK,10,INCINERATE,13,FURYSWIPES,16,YAWN,19,BITE,22,FLAMEBURST,25,AMNESIA,28,FLING,31,ACROBATICS,34,FIREBLAST,37,RECYCLE,40,NATURALGIFT,43,CRUNCH","Height":"0.6","Weight":"11.0","Kind":"High Temp","Pokedex":"This PokÃ©mon lives in caves in volcanoes. The fire within the tuft on its head can reach 600Âº F.","WildItemCommon":"ORANBERRY","WildItemUncommon":"PASSHOBERRY","Evolutions":"SIMISEAR,Item,FIRESTONE"},{"Name":"Simisear","InternalName":"SIMISEAR","Type1":"FIRE","HiddenAbility":"BLAZE","Moves":"1,LEER,1,LICK,1,FURYSWIPES,1,FLAMEBURST","Height":"1.0","Weight":"28.0","Kind":"Ember","Pokedex":"A flame burns inside its body. It scatters embers from its head and tail to sear its opponents.","WildItemCommon":"ORANBERRY","WildItemUncommon":"PASSHOBERRY","Evolutions":null},{"Name":"Panpour","InternalName":"PANPOUR","Type1":"WATER","HiddenAbility":"TORRENT","Moves":"1,SCRATCH,1,PLAYNICE,4,LEER,7,LICK,10,WATERGUN,13,FURYSWIPES,16,WATERSPORT,19,BITE,22,SCALD,25,TAUNT,28,FLING,31,ACROBATICS,34,BRINE,37,RECYCLE,40,NATURALGIFT,43,CRUNCH","Height":"0.6","Weight":"13.5","Kind":"Spray","Pokedex":"It does not thrive in dry environments. It keeps itself damp by shooting water stored in its head tuft from its tail.","WildItemCommon":"ORANBERRY","WildItemUncommon":"RINDOBERRY","Evolutions":"SIMIPOUR,Item,WATERSTONE"},{"Name":"Simipour","InternalName":"SIMIPOUR","Type1":"WATER","HiddenAbility":"TORRENT","Moves":"1,LEER,1,LICK,1,FURYSWIPES,1,SCALD","Height":"1.0","Weight":"29.0","Kind":"Geyser","Pokedex":"The high-pressure water expelled from its tail is so powerful, it can destroy a concrete wall.","WildItemCommon":"ORANBERRY","WildItemUncommon":"RINDOBERRY","Evolutions":null},{"Name":"Munna","InternalName":"MUNNA","Type1":"PSYCHIC","HiddenAbility":"TELEPATHY","Moves":"1,PSYWAVE,1,DEFENSECURL,5,LUCKYCHANT,7,YAWN,11,PSYBEAM,13,IMPRISON,17,MOONLIGHT,19,HYPNOSIS,23,ZENHEADBUTT,25,SYNCHRONOISE,29,NIGHTMARE,31,FUTURESIGHT,35,CALMMIND,37,PSYCHIC,41,DREAMEATER,43,TELEKINESIS,47,STOREDPOWER","Height":"0.6","Weight":"23.3","Kind":"Dream Eater","Pokedex":"It eats the dreams of people and PokÃ©mon. When it eats a pleasant dreams, it expels pink-colored mist.","Evolutions":"MUSHARNA,Item,MOONSTONE"},{"Name":"Musharna","InternalName":"MUSHARNA","Type1":"PSYCHIC","HiddenAbility":"TELEPATHY","Moves":"1,DEFENSECURL,1,LUCKYCHANT,1,PSYBEAM,1,HYPNOSIS","Height":"1.1","Weight":"60.5","Kind":"Drowsing","Pokedex":"With the mist from its forehead, it can create shapes of things from dreams it has eaten.","Evolutions":null},{"Name":"Pidove","InternalName":"PIDOVE","Type1":"NORMAL","Type2":"FLYING","HiddenAbility":"RIVALRY","Moves":"1,GUST,4,GROWL,8,LEER,11,QUICKATTACK,15,AIRCUTTER,18,ROOST,22,DETECT,25,TAUNT,29,AIRSLASH,32,RAZORWIND,36,FEATHERDANCE,39,SWAGGER,43,FACADE,46,TAILWIND,50,SKYATTACK","Height":"0.3","Weight":"2.1","Kind":"Tiny Pigeon","Pokedex":"These PokÃ©mon live in cities. They are accustomed to people. Flocks often gather in parks and plazas.","Evolutions":"TRANQUILL,Level,21"},{"Name":"Tranquill","InternalName":"TRANQUILL","Type1":"NORMAL","Type2":"FLYING","HiddenAbility":"RIVALRY","Moves":"1,GUST,1,GROWL,1,LEER,1,QUICKATTACK,4,GROWL,8,LEER,11,QUICKATTACK,15,AIRCUTTER,18,ROOST,23,DETECT,27,TAUNT,32,AIRSLASH,36,RAZORWIND,41,FEATHERDANCE,45,SWAGGER,50,FACADE,54,TAILWIND,59,SKYATTACK","Height":"0.6","Weight":"15.0","Kind":"Wild Pigeon","Pokedex":"Many people believe that, deep in the forest where Tranquill live, there is a peaceful place where there is no war.","Evolutions":"UNFEZANT,Level,32"},{"Name":"Unfezant","InternalName":"UNFEZANT","Type1":"NORMAL","Type2":"FLYING","HiddenAbility":"RIVALRY","Moves":"1,GUST,1,GROWL,1,LEER,1,QUICKATTACK,4,GROWL,8,LEER,11,QUICKATTACK,15,AIRCUTTER,18,ROOST,23,DETECT,27,TAUNT,33,AIRSLASH,38,RAZORWIND,44,FEATHERDANCE,49,SWAGGER,55,FACADE,60,TAILWIND,66,SKYATTACK","Height":"1.2","Weight":"29.0","Kind":"Proud","Pokedex":"Males have plumage on their heads. They will never let themselves feel close to anyone other than their Trainers.","Evolutions":null},{"Name":"Blitzle","InternalName":"BLITZLE","Type1":"ELECTRIC","HiddenAbility":"SAPSIPPER","Moves":"1,QUICKATTACK,4,TAILWHIP,8,CHARGE,11,SHOCKWAVE,15,THUNDERWAVE,18,FLAMECHARGE,22,PURSUIT,25,SPARK,29,STOMP,32,DISCHARGE,36,AGILITY,39,WILDCHARGE,43,THRASH","Height":"0.8","Weight":"29.8","Kind":"Electrified","Pokedex":"When thunderclouds cover the sky, it will appear. It can catch lightning with its mane and store the electricity.","WildItemCommon":"CHERIBERRY","Evolutions":"ZEBSTRIKA,Level,27"},{"Name":"Zebstrika","InternalName":"ZEBSTRIKA","Type1":"ELECTRIC","HiddenAbility":"SAPSIPPER","Moves":"1,IONDELUGE,1,QUICKATTACK,1,TAILWHIP,1,CHARGE,1,THUNDERWAVE,4,TAILWHIP,8,CHARGE,11,SHOCKWAVE,15,THUNDERWAVE,18,FLAMECHARGE,22,PURSUIT,25,SPARK,31,STOMP,36,DISCHARGE,42,AGILITY,47,WILDCHARGE,53,THRASH,58,IONDELUGE","Height":"1.6","Weight":"79.5","Kind":"Thunderbolt","Pokedex":"This ill-tempered PokÃ©mon is dangerous because when it's angry, it shoots lightning from its mane in all directions.","WildItemCommon":"CHERIBERRY","Evolutions":null},{"Name":"Roggenrola","InternalName":"ROGGENROLA","Type1":"ROCK","HiddenAbility":"SANDFORCE","Moves":"1,TACKLE,4,HARDEN,7,SANDATTACK,10,HEADBUTT,14,ROCKBLAST,17,MUDSLAP,20,IRONDEFENSE,23,SMACKDOWN,27,ROCKSLIDE,30,STEALTHROCK,33,SANDSTORM,36,STONEEDGE,40,EXPLOSION","Height":"0.4","Weight":"18.0","Kind":"Mantle","Pokedex":"They were discovered a hundred years ago in an earthquake fissure. Inside each one is an energy core.","WildItemCommon":"EVERSTONE","WildItemUncommon":"HARDSTONE","Evolutions":"BOLDORE,Level,25"},{"Name":"Boldore","InternalName":"BOLDORE","Type1":"ROCK","HiddenAbility":"SANDFORCE","Moves":"1,TACKLE,1,HARDEN,1,SANDATTACK,1,HEADBUTT,4,HARDEN,7,SANDATTACK,10,HEADBUTT,14,ROCKBLAST,17,MUDSLAP,20,IRONDEFENSE,23,SMACKDOWN,25,POWERGEM,30,ROCKSLIDE,36,STEALTHROCK,42,SANDSTORM,48,STONEEDGE,55,EXPLOSION","Height":"0.9","Weight":"102.0","Kind":"Ore","Pokedex":"Because its energy was too great to be contained, the energy leaked and formed orange crystals.","WildItemCommon":"EVERSTONE","WildItemUncommon":"HARDSTONE","Evolutions":"GIGALITH,Trade,"},{"Name":"Gigalith","InternalName":"GIGALITH","Type1":"ROCK","HiddenAbility":"SANDFORCE","Moves":"1,TACKLE,1,HARDEN,1,SANDATTACK,1,HEADBUTT,4,HARDEN,7,SANDATTACK,10,HEADBUTT,14,ROCKBLAST,17,MUDSLAP,20,IRONDEFENSE,23,SMACKDOWN,25,POWERGEM,30,ROCKSLIDE,36,STEALTHROCK,42,SANDSTORM,48,STONEEDGE,55,EXPLOSION","Height":"1.7","Weight":"260.0","Kind":"Compressed","Pokedex":"The solar energy absorbed by its body's orange crystals is magnified internally and fired from its mouth.","WildItemCommon":"EVERSTONE","WildItemUncommon":"HARDSTONE","Evolutions":null},{"Name":"Woobat","InternalName":"WOOBAT","Type1":"PSYCHIC","Type2":"FLYING","HiddenAbility":"SIMPLE","Moves":"1,CONFUSION,4,ODORSLEUTH,8,GUST,12,ASSURANCE,15,HEARTSTAMP,19,IMPRISON,21,AIRCUTTER,25,ATTRACT,29,AMNESIA,29,CALMMIND,32,AIRSLASH,36,FUTURESIGHT,41,PSYCHIC,47,ENDEAVOR","Height":"0.4","Weight":"2.1","Kind":"Bat","Pokedex":"Suction from its nostrils enables it to stick to cave walls during sleep. It leaves a heart-shaped mark behind.","Evolutions":"SWOOBAT,Happiness,"},{"Name":"Swoobat","InternalName":"SWOOBAT","Type1":"PSYCHIC","Type2":"FLYING","HiddenAbility":"SIMPLE","Moves":"1,CONFUSION,1,ODORSLEUTH,1,GUST,1,ASSURANCE,4,ODORSLEUTH,8,GUST,12,ASSURANCE,15,HEARTSTAMP,19,IMPRISON,21,AIRCUTTER,25,ATTRACT,29,AMNESIA,29,CALMMIND,32,AIRSLASH,36,FUTURESIGHT,41,PSYCHIC,47,ENDEAVOR","Height":"0.9","Weight":"10.5","Kind":"Courting","Pokedex":"Anyone who comes into contact with the ultrasonic waves emitted by a courting male experiences a positive mood shift.","Evolutions":null},{"Name":"Drilbur","InternalName":"DRILBUR","Type1":"GROUND","HiddenAbility":"MOLDBREAKER","Moves":"1,SCRATCH,1,MUDSPORT,5,RAPIDSPIN,8,MUDSLAP,12,FURYSWIPES,15,METALCLAW,19,DIG,22,HONECLAWS,26,SLASH,29,ROCKSLIDE,33,EARTHQUAKE,36,SWORDSDANCE,40,SANDSTORM,43,DRILLRUN,47,FISSURE","Height":"0.3","Weight":"8.5","Kind":"Mole","Pokedex":"It makes its way swiftly through the soil by putting both claws together and rotating at high speed.","Evolutions":"EXCADRILL,Level,31"},{"Name":"Excadrill","InternalName":"EXCADRILL","Type1":"GROUND","Type2":"STEEL","HiddenAbility":"MOLDBREAKER","Moves":"1,ROTOTILLER,1,SCRATCH,1,MUDSPORT,1,RAPIDSPIN,1,MUDSLAP,5,RAPIDSPIN,8,MUDSLAP,12,FURYSWIPES,15,METALCLAW,19,DIG,22,HONECLAWS,26,SLASH,29,ROCKSLIDE,31,HORNDRILL,36,EARTHQUAKE,42,SWORDSDANCE,49,SANDSTORM,55,DRILLRUN,62,FISSURE","Height":"0.7","Weight":"40.4","Kind":"Subterrene","Pokedex":"More than 300 feet below the surface, they build mazelike nests. Their activity can be destructive to subway tunnels.","Evolutions":null},{"Name":"Audino","InternalName":"AUDINO","Type1":"NORMAL","HiddenAbility":"KLUTZ","Moves":"1,LASTRESORT,1,MISTYTERRAIN,1,PLAYNICE,1,POUND,1,GROWL,1,HELPINGHAND,5,BABYDOLLEYES,9,REFRESH,13,DISARMINGVOICE,17,DOUBLESLAP,21,ATTRACT,25,SECRETPOWER,29,ENTRAINMENT,33,TAKEDOWN,37,HEALPULSE,41,AFTERYOU,45,SIMPLEBEAM,49,DOUBLEEDGE,53,LASTRESORT","Height":"1.1","Weight":"31.0","Kind":"Hearing","Pokedex":"Its auditory sense is astounding. It has a radar-like ability to understand its surrounding through slight sounds.","WildItemCommon":"ORANBERRY","WildItemUncommon":"SITRUSBERRY","Evolutions":null},{"Name":"Timburr","InternalName":"TIMBURR","Type1":"FIGHTING","HiddenAbility":"IRONFIST","Moves":"1,POUND,1,LEER,4,FOCUSENERGY,8,BIDE,12,LOWKICK,16,ROCKTHROW,20,WAKEUPSLAP,24,CHIPAWAY,28,BULKUP,31,ROCKSLIDE,34,DYNAMICPUNCH,37,SCARYFACE,40,HAMMERARM,43,STONEEDGE,46,FOCUSPUNCH,49,SUPERPOWER","Height":"0.6","Weight":"12.5","Kind":"Muscular","Pokedex":"These PokÃ©mon appear at building sites and help out with construction. They always carry squared logs.","Evolutions":"GURDURR,Level,25"},{"Name":"Gurdurr","InternalName":"GURDURR","Type1":"FIGHTING","HiddenAbility":"IRONFIST","Moves":"1,POUND,1,LEER,1,FOCUSENERGY,1,BIDE,4,FOCUSENERGY,8,BIDE,12,LOWKICK,16,ROCKTHROW,20,WAKEUPSLAP,24,CHIPAWAY,29,BULKUP,33,ROCKSLIDE,37,DYNAMICPUNCH,41,SCARYFACE,45,HAMMERARM,49,STONEEDGE,53,FOCUSPUNCH,57,SUPERPOWER","Height":"1.2","Weight":"40.0","Kind":"Muscular","Pokedex":"They strengthen their bodies by carrying steel beams. They show off their big muscles to their friends.","Evolutions":"CONKELDURR,Trade,"},{"Name":"Conkeldurr","InternalName":"CONKELDURR","Type1":"FIGHTING","HiddenAbility":"IRONFIST","Moves":"1,POUND,1,LEER,1,FOCUSENERGY,1,BIDE,4,FOCUSENERGY,8,BIDE,12,LOWKICK,16,ROCKTHROW,20,WAKEUPSLAP,24,CHIPAWAY,29,BULKUP,33,ROCKSLIDE,37,DYNAMICPUNCH,41,SCARYFACE,45,HAMMERARM,49,STONEEDGE,53,FOCUSPUNCH,57,SUPERPOWER","Height":"1.4","Weight":"87.0","Kind":"Muscular","Pokedex":"They use concrete pillars as walking canes. They know moves that enable them to swing the pillars freely in battle.","Evolutions":null},{"Name":"Tympole","InternalName":"TYMPOLE","Type1":"WATER","HiddenAbility":"WATERABSORB","Moves":"1,BUBBLE,1,GROWL,5,SUPERSONIC,9,ROUND,12,BUBBLEBEAM,16,MUDSHOT,20,AQUARING,23,UPROAR,27,MUDDYWATER,31,RAINDANCE,34,FLAIL,38,ECHOEDVOICE,42,HYDROPUMP,45,HYPERVOICE","Height":"0.5","Weight":"4.5","Kind":"Tadpole","Pokedex":"By vibrating its cheeks, it emits sound waves imperceptible to humans. It uses the rhythm of these sounds to talk.","WildItemCommon":"PERSIMBERRY","Evolutions":"PALPITOAD,Level,25"},{"Name":"Palpitoad","InternalName":"PALPITOAD","Type1":"WATER","Type2":"GROUND","HiddenAbility":"WATERABSORB","Moves":"1,BUBBLE,1,GROWL,1,SUPERSONIC,1,ROUND,5,SUPERSONIC,9,ROUND,12,BUBBLEBEAM,16,MUDSHOT,20,AQUARING,23,UPROAR,28,MUDDYWATER,33,RAINDANCE,37,FLAIL,42,ECHOEDVOICE,47,HYDROPUMP,51,HYPERVOICE","Height":"0.8","Weight":"17.0","Kind":"Vibration","Pokedex":"It lives in the water and on land. It uses its long, sticky tongue to capture prey.","WildItemCommon":"PERSIMBERRY","Evolutions":"SEISMITOAD,Level,36"},{"Name":"Seismitoad","InternalName":"SEISMITOAD","Type1":"WATER","Type2":"GROUND","HiddenAbility":"WATERABSORB","Moves":"1,BUBBLE,1,GROWL,1,SUPERSONIC,1,ROUND,5,SUPERSONIC,9,ROUND,12,BUBBLEBEAM,16,MUDSHOT,20,AQUARING,23,UPROAR,28,MUDDYWATER,33,RAINDANCE,36,ACID,39,FLAIL,44,DRAINPUNCH,49,ECHOEDVOICE,53,HYDROPUMP,59,HYPERVOICE","Height":"1.5","Weight":"62.0","Kind":"Vibration","Pokedex":"It increases the power of its punches by vibrating the bumps on its fists. It can turn a boulder to rubble with one punch.","WildItemCommon":"PERSIMBERRY","Evolutions":null},{"Name":"Throh","InternalName":"THROH","Type1":"FIGHTING","HiddenAbility":"MOLDBREAKER","Moves":"1,BIND,1,LEER,5,BIDE,9,FOCUSENERGY,13,SEISMICTOSS,17,VITALTHROW,21,REVENGE,25,STORMTHROW,29,BODYSLAM,33,BULKUP,37,CIRCLETHROW,41,ENDURE,45,WIDEGUARD,48,SUPERPOWER,50,REVERSAL","Height":"1.3","Weight":"55.5","Kind":"Judo","Pokedex":"When they encounter foes bigger than themselves, they try to throw them. They always travel in packs of five.","WildItemUncommon":"BLACKBELT","WildItemRare":"BLACKBELT","Evolutions":null},{"Name":"Sawk","InternalName":"SAWK","Type1":"FIGHTING","HiddenAbility":"MOLDBREAKER","Moves":"1,ROCKSMASH,1,LEER,5,BIDE,9,FOCUSENERGY,13,DOUBLEKICK,17,LOWSWEEP,25,KARATECHOP,29,BRICKBREAK,33,BULKUP,37,RETALIATE,41,ENDURE,45,QUICKGUARD,48,CLOSECOMBAT,50,REVERSAL","Height":"1.4","Weight":"51.0","Kind":"Karate","Pokedex":"Tying their belts gets them pumped and makes their punches more destructive. Disturbing their training angers them.","WildItemUncommon":"BLACKBELT","WildItemRare":"BLACKBELT","Evolutions":null},{"Name":"Sewaddle","InternalName":"SEWADDLE","Type1":"BUG","Type2":"GRASS","HiddenAbility":"OVERCOAT","Moves":"1,TACKLE,1,STRINGSHOT,8,BUGBITE,15,RAZORLEAF,22,STRUGGLEBUG,29,ENDURE,31,STICKYWEB,36,BUGBUZZ,43,FLAIL","Height":"0.3","Weight":"2.5","Kind":"Sewing","Pokedex":"This PokÃ©mon makes clothes for itself. It chews up leaves and sews them with sticky thread extruded from its mouth.","WildItemUncommon":"MENTALHERB","Evolutions":"SWADLOON,Level,20"},{"Name":"Swadloon","InternalName":"SWADLOON","Type1":"BUG","Type2":"GRASS","HiddenAbility":"OVERCOAT","Moves":"1,GRASSWHISTLE,1,TACKLE,1,STRINGSHOT,1,BUGBITE,1,RAZORLEAF,20,PROTECT","Height":"0.5","Weight":"7.3","Kind":"Leaf-Wrapped","Pokedex":"It protects itself from the cold by wrapping up in leaves. It stays on the move, eating leaves in forests.","WildItemUncommon":"MENTALHERB","Evolutions":"LEAVANNY,Happiness,"},{"Name":"Leavanny","InternalName":"LEAVANNY","Type1":"BUG","Type2":"GRASS","HiddenAbility":"OVERCOAT","Moves":"1,FALSESWIPE,1,TACKLE,1,STRINGSHOT,1,BUGBITE,1,RAZORLEAF,8,BUGBITE,15,RAZORLEAF,22,STRUGGLEBUG,29,SLASH,32,HELPINGHAND,34,FELLSTINGER,36,LEAFBLADE,39,XSCISSOR,43,ENTRAINMENT,46,SWORDSDANCE,50,LEAFSTORM","Height":"1.2","Weight":"20.5","Kind":"Nurturing","Pokedex":"It keeps its eggs warm with heat from fermenting leaves. It also uses leaves to make warm wrappings for Sewaddle.","WildItemUncommon":"MENTALHERB","Evolutions":null},{"Name":"Venipede","InternalName":"VENIPEDE","Type1":"BUG","Type2":"POISON","HiddenAbility":"QUICKFEET","Moves":"1,DEFENSECURL,1,ROLLOUT,5,POISONSTING,8,SCREECH,12,PURSUIT,15,PROTECT,19,POISONTAIL,22,BUGBITE,26,VENOSHOCK,29,AGILITY,33,STEAMROLLER,36,TOXIC,38,VENOSHOCK,40,ROCKCLIMB,43,DOUBLEEDGE","Height":"0.4","Weight":"5.3","Kind":"Centipede","Pokedex":"It discovers what is going on around it by using the feelers on its head and tail. It is brutally aggresive.","WildItemCommon":"PECHABERRY","WildItemUncommon":"POISONBARB","Evolutions":"WHIRLIPEDE,Level,22"},{"Name":"Whirlipede","InternalName":"WHIRLIPEDE","Type1":"BUG","Type2":"POISON","HiddenAbility":"QUICKFEET","Moves":"1,DEFENSECURL,1,ROLLOUT,1,POISONSTING,1,SCREECH,5,POISONSTING,8,SCREECH,12,PURSUIT,15,PROTECT,19,POISONTAIL,22,IRONDEFENSE,23,BUGBITE,28,VENOSHOCK,32,AGILITY,37,STEAMROLLER,41,TOXIC,43,VENOMDRENCH,46,ROCKCLIMB,50,DOUBLEEDGE","Height":"1.2","Weight":"58.5","Kind":"Curlipede","Pokedex":"It is usually motionless, but when attacked, it rotates at high speed and then crashes into its opponent.","WildItemCommon":"PECHABERRY","WildItemUncommon":"POISONBARB","Evolutions":"SCOLIPEDE,Level,30"},{"Name":"Scolipede","InternalName":"SCOLIPEDE","Type1":"BUG","Type2":"POISON","HiddenAbility":"QUICKFEET","Moves":"1,MEGAHORN,1,DEFENSECURL,1,ROLLOUT,1,POISONSTING,1,SCREECH,5,POISONSTING,8,SCREECH,12,PURSUIT,15,PROTECT,19,POISONTAIL,23,BUGBITE,28,VENOSHOCK,30,BATONPASS,33,AGILITY,39,STEAMROLLER,44,TOXIC,47,VENOMDRENCH,50,ROCKCLIMB,55,DOUBLEEDGE,65,MEGAHORN","Height":"2.5","Weight":"200.5","Kind":"Megapede","Pokedex":"Highly aggressive, it uses the claws near its neck to dig into its opponents and poison them.","WildItemCommon":"PECHABERRY","WildItemUncommon":"POISONBARB","Evolutions":null},{"Name":"Cottonee","InternalName":"COTTONEE","Type1":"GRASS","Type2":"FAIRY","HiddenAbility":"CHLOROPHYLL","Moves":"1,ABSORB,1,FAIRYWIND,4,GROWTH,8,LEECHSEED,10,STUNSPORE,13,MEGADRAIN,17,COTTONSPORE,19,RAZORLEAF,22,POISONPOWDER,26,GIGADRAIN,28,CHARM,31,HELPINGHAND,35,ENERGYBALL,37,COTTONGUARD,40,SUNNYDAY,44,ENDEAVOR,46,SOLARBEAM","Height":"0.3","Weight":"0.6","Kind":"Cotton Puff","Pokedex":"They go wherever the wind takes them. On rainy days, their bodies are heavier, so they take shelter beneath big trees.","Evolutions":"WHIMSICOTT,Item,SUNSTONE"},{"Name":"Whimsicott","InternalName":"WHIMSICOTT","Type1":"GRASS","Type2":"FAIRY","HiddenAbility":"CHLOROPHYLL","Moves":"1,GROWTH,1,LEECHSEED,1,MEGADRAIN,1,COTTONSPORE,10,GUST,28,TAILWIND,46,HURRICANE,50,MOONBLAST","Height":"0.7","Weight":"6.6","Kind":"Windveiled","Pokedex":"Riding whirlwinds, they appear. These PokÃ©mon sneak through gaps into houses and cause all sorts of mischief.","Evolutions":null},{"Name":"Petilil","InternalName":"PETILIL","Type1":"GRASS","HiddenAbility":"LEAFGUARD","Moves":"1,ABSORB,4,GROWTH,8,LEECHSEED,10,SLEEPPOWDER,13,MEGADRAIN,17,SYNTHESIS,19,MAGICALLEAF,22,STUNSPORE,26,GIGADRAIN,28,AROMATHERAPY,31,HELPINGHAND,35,ENERGYBALL,37,ENTRAINMENT,40,SUNNYDAY,44,AFTERYOU,46,LEAFSTORM","Height":"0.5","Weight":"6.6","Kind":"Bulb","Pokedex":"Since they prefer moist, nutrient-rich soil, the areas where Petilil live are known to be good for growing plants.","Evolutions":"LILLIGANT,Item,SUNSTONE"},{"Name":"Lilligant","InternalName":"LILLIGANT","Type1":"GRASS","HiddenAbility":"LEAFGUARD","Moves":"1,GROWTH,1,LEECHSEED,1,MEGADRAIN,1,SYNTHESIS,10,TEETERDANCE,28,QUIVERDANCE,46,PETALDANCE,50,PETALBLIZZARD","Height":"1.1","Weight":"16.3","Kind":"Flowering","Pokedex":"The fragrance of the garland on its head has a relaxing effect. It withers if a Trainer does not take good care of it.","Evolutions":null},{"Name":"Basculin","InternalName":"BASCULIN","Type1":"WATER","HiddenAbility":"MOLDBREAKER","Moves":"1,THRASH,1,FLAIL,1,TAILWHIP,1,TACKLE,1,WATERGUN,4,UPROAR,7,HEADBUTT,10,BITE,13,AQUAJET,16,CHIPAWAY,20,TAKEDOWN,24,CRUNCH,28,AQUATAIL,32,SOAK,36,DOUBLEEDGE,41,SCARYFACE,46,FLAIL,50,FINALGAMBIT,56,THRASH","Height":"1.0","Weight":"18.0","Kind":"Hostile","Pokedex":"Red and blue Basculin usually do not get along, but sometimes members of one school mingle with the other's schooL.","FormNames":"Red-Striped,Blue-Striped","WildItemUncommon":"DEEPSEATOOTH","Evolutions":null},{"Name":"Sandile","InternalName":"SANDILE","Type1":"GROUND","Type2":"DARK","HiddenAbility":"ANGERPOINT","Moves":"1,LEER,1,RAGE,4,BITE,7,SANDATTACK,10,TORMENT,13,SANDTOMB,16,ASSURANCE,19,MUDSLAP,22,EMBARGO,25,SWAGGER,28,CRUNCH,31,DIG,34,SCARYFACE,37,FOULPLAY,40,SANDSTORM,43,EARTHQUAKE,46,THRASH","Height":"0.7","Weight":"15.2","Kind":"Desert Croc","Pokedex":"It moves along below the sand's surface, except for its nose and eyes. A dark membrane shields its eyes from the sun.","Evolutions":"KROKOROK,Level,29"},{"Name":"Krokorok","InternalName":"KROKOROK","Type1":"GROUND","Type2":"DARK","HiddenAbility":"ANGERPOINT","Moves":"1,LEER,1,RAGE,1,BITE,1,SANDATTACK,4,BITE,7,SANDATTACK,10,TORMENT,13,SANDTOMB,16,ASSURANCE,19,MUDSLAP,22,EMBARGO,25,SWAGGER,28,CRUNCH,32,DIG,36,SCARYFACE,40,FOULPLAY,44,SANDSTORM,48,EARTHQUAKE,52,THRASH","Height":"1.0","Weight":"33.4","Kind":"Desert Croc","Pokedex":"The special membrane covering its eyes can sense the heat of objects, so it can see its surroundings, even in darkness.","Evolutions":"KROOKODILE,Level,40"},{"Name":"Krookodile","InternalName":"KROOKODILE","Type1":"GROUND","Type2":"DARK","HiddenAbility":"ANGERPOINT","Moves":"1,OUTRAGE,1,LEER,1,RAGE,1,BITE,1,SANDATTACK,4,BITE,7,SANDATTACK,10,TORMENT,13,SANDTOMB,16,ASSURANCE,19,MUDSLAP,22,EMBARGO,25,SWAGGER,28,CRUNCH,32,DIG,36,SCARYFACE,42,FOULPLAY,48,SANDSTORM,54,EARTHQUAKE,60,OUTRAGE","Height":"1.5","Weight":"96.3","Kind":"Intimidation","Pokedex":"It can expand the focus of its eyes, enabling it to see objects in the far distance as if it were using binoculars.","Evolutions":null},{"Name":"Darumaka","InternalName":"DARUMAKA","Type1":"FIRE","HiddenAbility":"INNERFOCUS","Moves":"1,TACKLE,3,ROLLOUT,6,INCINERATE,9,RAGE,11,FIREFANG,14,HEADBUTT,17,UPROAR,19,FACADE,22,FIREPUNCH,25,WORKUP,27,THRASH,30,BELLYDRUM,33,FLAREBLITZ,35,TAUNT,39,SUPERPOWER,42,OVERHEAT","Height":"0.6","Weight":"37.5","Kind":"Zen Charm","Pokedex":"Darumaka's droppings are hot, so people used to put them in their clothes to keep themselves warm.","WildItemCommon":"RAWSTBERRY","Evolutions":"DARMANITAN,Level,35"},{"Name":"Darmanitan","InternalName":"DARMANITAN","Type1":"FIRE","HiddenAbility":"ZENMODE","Moves":"1,TACKLE,1,ROLLOUT,1,INCINERATE,1,RAGE,3,ROLLOUT,6,INCINERATE,9,RAGE,11,FIREFANG,14,HEADBUTT,17,SWAGGER,19,FACADE,22,FIREPUNCH,25,WORKUP,27,THRASH,30,BELLYDRUM,33,FLAREBLITZ,35,HAMMERARM,39,TAUNT,47,SUPERPOWER,54,OVERHEAT","Height":"1.3","Weight":"92.9","Kind":"Blazing","Pokedex":"When weakened in battle, it transforms into a stone statue. Then it sharpens its mind and fights on mentally.","FormNames":"Standard Mode,Zen Mode","WildItemCommon":"RAWSTBERRY","Evolutions":null},{"Name":"Maractus","InternalName":"MARACTUS","Type1":"GRASS","HiddenAbility":"STORMDRAIN","Moves":"1,SPIKYSHIELD,1,COTTONGUARD,1,AFTERYOU,1,PECK,1,ABSORB,3,SWEETSCENT,6,GROWTH,10,PINMISSILE,13,MEGADRAIN,15,SYNTHESIS,18,COTTONSPORE,22,NEEDLEARM,26,GIGADRAIN,29,ACUPRESSURE,33,INGRAIN,38,PETALDANCE,42,SUCKERPUNCH,45,SUNNYDAY,48,PETALBLIZZARD,50,SOLARBEAM,55,COTTONGUARD,57,AFTERYOU","Height":"1.0","Weight":"28.0","Kind":"Cactus","Pokedex":"Arid regions are their habitat. They move rhythmically, making a sound similar to maracas.","WildItemUncommon":"MIRACLESEED","Evolutions":null},{"Name":"Dwebble","InternalName":"DWEBBLE","Type1":"BUG","Type2":"ROCK","HiddenAbility":"WEAKARMOR","Moves":"1,FURYCUTTER,5,ROCKBLAST,7,WITHDRAW,11,SANDATTACK,13,FEINTATTACK,17,SMACKDOWN,19,ROCKPOLISH,23,BUGBITE,24,STEALTHROCK,29,ROCKSLIDE,31,SLASH,35,XSCISSOR,37,SHELLSMASH,41,FLAIL,43,ROCKWRECKER","Height":"0.3","Weight":"14.5","Kind":"Rock Inn","Pokedex":"It makes a hole in a suitable rock. If that rock breaks, the PokÃ©mon remains agitated until it locates a replacement.","WildItemUncommon":"HARDSTONE","WildItemRare":"RAREBONE","Evolutions":"CRUSTLE,Level,34"},{"Name":"Crustle","InternalName":"CRUSTLE","Type1":"BUG","Type2":"ROCK","HiddenAbility":"WEAKARMOR","Moves":"1,SHELLSMASH,1,ROCKBLAST,1,WITHDRAW,1,SANDATTACK,5,ROCKBLAST,7,WITHDRAW,11,SANDATTACK,13,FEINTATTACK,17,SMACKDOWN,19,ROCKPOLISH,23,BUGBITE,24,STEALTHROCK,29,ROCKSLIDE,31,SLASH,38,XSCISSOR,43,SHELLSMASH,50,FLAIL,55,ROCKWRECKER","Height":"1.4","Weight":"200.0","Kind":"Stone Home","Pokedex":"It possesses legs of enormous strength, enabling it to carry heavy slabs for many days, even when crossing arid land.","WildItemUncommon":"HARDSTONE","WildItemRare":"RAREBONE","Evolutions":null},{"Name":"Scraggy","InternalName":"SCRAGGY","Type1":"DARK","Type2":"FIGHTING","HiddenAbility":"INTIMIDATE","Moves":"1,LEER,1,LOWKICK,5,SANDATTACK,9,FEINTATTACK,12,HEADBUTT,16,SWAGGER,20,BRICKBREAK,23,PAYBACK,27,CHIPAWAY,31,HIJUMPKICK,34,SCARYFACE,38,CRUNCH,42,FACADE,45,ROCKCLIMB,48,FOCUSPUNCH,50,HEADSMASH","Height":"0.6","Weight":"11.8","Kind":"Shedding","Pokedex":"It immediately headbutts anyone that makes eye contact with it. Its skull is massively thick.","WildItemUncommon":"SHEDSHELL","Evolutions":"SCRAFTY,Level,39"},{"Name":"Scrafty","InternalName":"SCRAFTY","Type1":"DARK","Type2":"FIGHTING","HiddenAbility":"INTIMIDATE","Moves":"1,LEER,1,LOWKICK,1,SANDATTACK,1,FEINTATTACK,5,SANDATTACK,9,FEINTATTACK,12,HEADBUTT,16,SWAGGER,20,BRICKBREAK,23,PAYBACK,27,CHIPAWAY,31,HIJUMPKICK,34,SCARYFACE,38,CRUNCH,45,FACADE,51,ROCKCLIMB,58,FOCUSPUNCH,65,HEADSMASH","Height":"1.1","Weight":"30.0","Kind":"Hoodlum","Pokedex":"It can smash concrete blocks with its kicking attacks. The one with the biggest crest is the group leader.","WildItemUncommon":"SHEDSHELL","Evolutions":null},{"Name":"Sigilyph","InternalName":"SIGILYPH","Type1":"PSYCHIC","Type2":"FLYING","HiddenAbility":"TINTEDLENS","Moves":"1,GUST,1,MIRACLEEYE,4,HYPNOSIS,8,PSYWAVE,11,TAILWIND,14,WHIRLWIND,18,PSYBEAM,21,AIRCUTTER,24,LIGHTSCREEN,28,REFLECT,31,SYNCHRONOISE,34,MIRRORMOVE,38,GRAVITY,41,AIRSLASH,44,PSYCHIC,48,COSMICPOWER,50,SKYATTACK","Height":"1.4","Weight":"14.0","Kind":"Avianoid","Pokedex":"The guardians of an ancient city, they use their psychic power to attack enemies that invade their territory.","Evolutions":null},{"Name":"Yamask","InternalName":"YAMASK","Type1":"GHOST","Moves":"1,ASTONISH,1,PROTECT,5,DISABLE,9,HAZE,13,NIGHTSHADE,17,HEX,21,WILLOWISP,25,OMINOUSWIND,29,CURSE,33,POWERSPLIT,33,GUARDSPLIT,37,SHADOWBALL,41,GRUDGE,45,MEANLOOK,49,DESTINYBOND","Height":"0.5","Weight":"1.5","Kind":"Spirit","Pokedex":"These PokÃ©mon arose from the spirits of people interred in graves in past ages. Each retains memories of its former life.","WildItemUncommon":"SPELLTAG","Evolutions":"COFAGRIGUS,Level,34"},{"Name":"Cofagrigus","InternalName":"COFAGRIGUS","Type1":"GHOST","Moves":"1,ASTONISH,1,PROTECT,1,DISABLE,1,HAZE,5,DISABLE,9,HAZE,13,NIGHTSHADE,17,HEX,21,WILLOWISP,25,OMINOUSWIND,29,CURSE,33,POWERSPLIT,33,GUARDSPLIT,34,SCARYFACE,39,SHADOWBALL,45,GRUDGE,51,MEANLOOK,57,DESTINYBOND","Height":"1.7","Weight":"76.5","Kind":"Coffin","Pokedex":"They pretend to be elaborate coffins to teach lessons to grave robbers. Their bodies are covered in pure gold.","WildItemUncommon":"SPELLTAG","Evolutions":null},{"Name":"Tirtouga","InternalName":"TIRTOUGA","Type1":"WATER","Type2":"ROCK","HiddenAbility":"SWIFTSWIM","Moves":"1,BIDE,1,WITHDRAW,1,WATERGUN,5,ROLLOUT,8,BITE,11,PROTECT,15,AQUAJET,18,ANCIENTPOWER,21,CRUNCH,25,WIDEGUARD,28,BRINE,31,SMACKDOWN,35,CURSE,38,SHELLSMASH,41,AQUATAIL,45,ROCKSLIDE,48,RAINDANCE,50,HYDROPUMP","Height":"0.7","Weight":"16.5","Kind":"Prototurtle","Pokedex":"About 100 million years ago, these PokÃ©mon swam in oceans. It is thought they also went on land to attack prey.","Evolutions":"CARRACOSTA,Level,37"},{"Name":"Carracosta","InternalName":"CARRACOSTA","Type1":"WATER","Type2":"ROCK","HiddenAbility":"SWIFTSWIM","Moves":"1,BIDE,1,WITHDRAW,1,WATERGUN,1,ROLLOUT,5,ROLLOUT,8,BITE,11,PROTECT,15,AQUAJET,18,ANCIENTPOWER,21,CRUNCH,25,WIDEGUARD,28,BRINE,31,SMACKDOWN,35,CURSE,40,SHELLSMASH,45,AQUATAIL,51,ROCKSLIDE,56,RAINDANCE,61,HYDROPUMP","Height":"1.2","Weight":"81.0","Kind":"Prototurtle","Pokedex":"Incredible jaw strength enables them to chew up steel beams and rocks along with their prey.","Evolutions":null},{"Name":"Archen","InternalName":"ARCHEN","Type1":"ROCK","Type2":"FLYING","Moves":"1,QUICKATTACK,1,LEER,1,WINGATTACK,5,ROCKTHROW,8,DOUBLETEAM,11,SCARYFACE,15,PLUCK,18,ANCIENTPOWER,21,AGILITY,25,QUICKGUARD,28,ACROBATICS,31,DRAGONBREATH,35,CRUNCH,38,ENDEAVOR,41,UTURN,45,ROCKSLIDE,48,DRAGONCLAW,50,THRASH","Height":"0.5","Weight":"9.5","Kind":"First Bird","Pokedex":"Revived from a fossil, this PokÃ©mon is thought to be the ancestor of all bird PokÃ©mon.","Evolutions":"ARCHEOPS,Level,37"},{"Name":"Archeops","InternalName":"ARCHEOPS","Type1":"ROCK","Type2":"FLYING","Moves":"1,QUICKATTACK,1,LEER,1,WINGATTACK,1,ROCKTHROW,5,ROCKTHROW,8,DOUBLETEAM,11,SCARYFACE,15,PLUCK,18,ANCIENTPOWER,21,AGILITY,25,QUICKGUARD,28,ACROBATICS,31,DRAGONBREATH,35,CRUNCH,40,ENDEAVOR,45,UTURN,51,ROCKSLIDE,56,DRAGONCLAW,61,THRASH","Height":"1.4","Weight":"32.0","Kind":"First Bird","Pokedex":"It runs better than it flies. It catches prey by running at speeds comparable to those of an automobile.","Evolutions":null},{"Name":"Trubbish","InternalName":"TRUBBISH","Type1":"POISON","HiddenAbility":"AFTERMATH","Moves":"1,POUND,1,POISONGAS,3,RECYCLE,7,TOXICSPIKES,12,ACIDSPRAY,14,DOUBLESLAP,18,SLUDGE,23,STOCKPILE,23,SWALLOW,25,TAKEDOWN,29,SLUDGEBOMB,34,CLEARSMOG,36,TOXIC,40,AMNESIA,42,BELCH,45,GUNKSHOT,47,EXPLOSION","Height":"0.6","Weight":"31.0","Kind":"Trash Bag","Pokedex":"The combination of garbage bags and industrial waste caused the chemical reaction that crated this PokÃ©mon.","WildItemUncommon":"BLACKSLUDGE","WildItemRare":"NUGGET","Evolutions":"GARBODOR,Level,36"},{"Name":"Garbodor","InternalName":"GARBODOR","Type1":"POISON","HiddenAbility":"AFTERMATH","Moves":"1,POUND,1,POISONGAS,1,RECYCLE,1,TOXICSPIKES,3,RECYCLE,7,TOXICSPIKES,12,ACIDSPRAY,14,DOUBLESLAP,18,SLUDGE,23,STOCKPILE,23,SWALLOW,25,BODYSLAM,29,SLUDGEBOMB,34,CLEARSMOG,39,TOXIC,46,AMNESIA,49,BELCH,54,GUNKSHOT,59,EXPLOSION","Height":"1.9","Weight":"107.3","Kind":"Trash Heap","Pokedex":"They absorb garbage and make it part of their bodies. They shoot a poisonous liquid from their right-hand fingertips.","WildItemCommon":"BLACKSLUDGE","WildItemUncommon":"NUGGET","WildItemRare":"BIGNUGGET","Evolutions":null},{"Name":"Zorua","InternalName":"ZORUA","Type1":"DARK","Moves":"1,SCRATCH,1,LEER,5,PURSUIT,9,FAKETEARS,13,FURYSWIPES,17,FEINTATTACK,21,SCARYFACE,25,TAUNT,29,FOULPLAY,33,TORMENT,37,AGILITY,41,EMBARGO,45,PUNISHMENT,49,NASTYPLOT,53,IMPRISON,57,NIGHTDAZE","Height":"0.7","Weight":"12.5","Kind":"Tricky Fox","Pokedex":"To protect themselves from danger, they hide their true identities by transforming into people and PokÃ©mon.","Evolutions":"ZOROARK,Level,30"},{"Name":"Zoroark","InternalName":"ZOROARK","Type1":"DARK","Moves":"1,NIGHTDAZE,1,IMPRISON,1,UTURN,1,SCRATCH,1,LEER,1,PURSUIT,1,HONECLAWS,5,PURSUIT,9,HONECLAWS,13,FURYSWIPES,17,FEINTATTACK,21,SCARYFACE,25,TAUNT,29,FOULPLAY,30,NIGHTSLASH,34,TORMENT,39,AGILITY,44,EMBARGO,49,PUNISHMENT,54,NASTYPLOT,59,IMPRISON,64,NIGHTDAZE","Height":"1.6","Weight":"81.1","Kind":"Illusion Fox","Pokedex":"Each has the ability to fool a large group of people simultaneously. They protect their lair with illusory scenery.","Evolutions":null},{"Name":"Minccino","InternalName":"MINCCINO","Type1":"NORMAL","HiddenAbility":"SKILLLINK","Moves":"1,POUND,3,BABYDOLLEYES,7,HELPINGHAND,9,TICKLE,13,DOUBLESLAP,15,ENCORE,19,SWIFT,21,SING,25,TAILSLAP,27,CHARM,31,WAKEUPSLAP,33,ECHOEDVOICE,37,SLAM,39,CAPTIVATE,43,HYPERVOICE,45,LASTRESORT,49,AFTERYOU","Height":"0.4","Weight":"5.8","Kind":"Chinchilla","Pokedex":"These PokÃ©mon prefer a tidy habitat. They are always sweeping and dusting, using their tails as brooms.","WildItemCommon":"CHESTOBERRY","Evolutions":"CINCCINO,Item,SHINYSTONE"},{"Name":"Cinccino","InternalName":"CINCCINO","Type1":"NORMAL","HiddenAbility":"SKILLLINK","Moves":"1,BULLETSEED,1,ROCKBLAST,1,HELPINGHAND,1,TICKLE,1,SING,1,TAILSLAP","Height":"0.5","Weight":"7.5","Kind":"Scarf","Pokedex":"Their white fur feels amazing to touch. Their fur repels dust and prevents static electricity from building up.","WildItemCommon":"CHESTOBERRY","Evolutions":null},{"Name":"Gothita","InternalName":"GOTHITA","Type1":"PSYCHIC","HiddenAbility":"SHADOWTAG","Moves":"1,POUND,3,CONFUSION,7,TICKLE,8,PLAYNICE,10,FAKETEARS,14,DOUBLESLAP,16,PSYBEAM,19,EMBARGO,24,FEINTATTACK,25,PSYSHOCK,28,FLATTER,31,FUTURESIGHT,33,HEALBLOCK,37,PSYCHIC,40,TELEKINESIS,46,CHARM,48,MAGICROOM","Height":"0.4","Weight":"5.8","Kind":"Fixation","Pokedex":"They intently observe both Trainers and PokÃ©mon. Apparently, they are looking at something that only Gothita can see.","Evolutions":"GOTHORITA,Level,32"},{"Name":"Gothorita","InternalName":"GOTHORITA","Type1":"PSYCHIC","HiddenAbility":"SHADOWTAG","Moves":"1,POUND,1,CONFUSION,1,TICKLE,1,PLAYNICE,3,CONFUSION,7,TICKLE,10,FAKETEARS,14,DOUBLESLAP,16,PSYBEAM,19,EMBARGO,24,FEINTATTACK,25,PSYSHOCK,28,FLATTER,31,FUTURESIGHT,34,HEALBLOCK,39,PSYCHIC,43,TELEKINESIS,50,CHARM,53,MAGICROOM","Height":"0.7","Weight":"18.0","Kind":"Manipulate","Pokedex":"Starlight is the source of their power. At night, they mark star positions by using psychic power to float stones.","Evolutions":"GOTHITELLE,Level,41"},{"Name":"Gothitelle","InternalName":"GOTHITELLE","Type1":"PSYCHIC","HiddenAbility":"SHADOWTAG","Moves":"1,POUND,1,CONFUSION,1,TICKLE,1,PLAYNICE,3,CONFUSION,7,TICKLE,10,FAKETEARS,14,DOUBLESLAP,16,PSYBEAM,19,EMBARGO,24,FEINTATTACK,25,PSYSHOCK,28,FLATTER,31,FUTURESIGHT,34,HEALBLOCK,39,PSYCHIC,45,TELEKINESIS,54,CHARM,59,MAGICROOM","Height":"1.5","Weight":"44.0","Kind":"Astral Body","Pokedex":"They can predict the future from the placement and movement of the stars. They can see Trainers' life spans.","Evolutions":null},{"Name":"Solosis","InternalName":"SOLOSIS","Type1":"PSYCHIC","HiddenAbility":"REGENERATOR","Moves":"1,PSYWAVE,3,REFLECT,7,ROLLOUT,10,SNATCH,14,HIDDENPOWER,16,LIGHTSCREEN,19,CHARM,24,RECOVER,25,PSYSHOCK,28,ENDEAVOR,31,FUTURESIGHT,33,PAINSPLIT,37,PSYCHIC,40,SKILLSWAP,46,HEALBLOCK,48,WONDERROOM","Height":"0.3","Weight":"1.0","Kind":"Cell","Pokedex":"Because their bodies are enveloped in a special liquid, they can survive in any environment.","Evolutions":"DUOSION,Level,32"},{"Name":"Duosion","InternalName":"DUOSION","Type1":"PSYCHIC","HiddenAbility":"REGENERATOR","Moves":"1,PSYWAVE,1,REFLECT,1,ROLLOUT,1,SNATCH,3,REFLECT,7,ROLLOUT,10,SNATCH,14,HIDDENPOWER,16,LIGHTSCREEN,19,CHARM,24,RECOVER,25,PSYSHOCK,28,ENDEAVOR,31,FUTURESIGHT,34,PAINSPLIT,39,PSYCHIC,43,SKILLSWAP,50,HEALBLOCK,53,WONDERROOM","Height":"0.6","Weight":"8.0","Kind":"Mitosis","Pokedex":"When their brains, now divided in two, are thinking the same thoughts, these PokÃ©mon exhibit their maximum power.","Evolutions":"REUNICLUS,Level,41"},{"Name":"Reuniclus","InternalName":"REUNICLUS","Type1":"PSYCHIC","HiddenAbility":"REGENERATOR","Moves":"1,PSYWAVE,1,REFLECT,1,ROLLOUT,1,SNATCH,3,REFLECT,7,ROLLOUT,10,SNATCH,14,HIDDENPOWER,16,LIGHTSCREEN,19,CHARM,24,RECOVER,25,PSYSHOCK,28,ENDEAVOR,31,FUTURESIGHT,34,PAINSPLIT,39,PSYCHIC,41,DIZZYPUNCH,45,SKILLSWAP,54,HEALBLOCK,59,WONDERROOM","Height":"1.0","Weight":"20.1","Kind":"Multiplying","Pokedex":"These remarkably intelligent PokÃ©mon fight by controlling arms that can grip with rock-crushing power.","Evolutions":null},{"Name":"Ducklett","InternalName":"DUCKLETT","Type1":"WATER","Type2":"FLYING","HiddenAbility":"HYDRATION","Moves":"1,WATERGUN,3,WATERSPORT,6,DEFOG,9,WINGATTACK,13,WATERPULSE,15,AERIALACE,19,BUBBLEBEAM,21,FEATHERDANCE,24,AQUARING,27,AIRSLASH,30,ROOST,34,RAINDANCE,37,TAILWIND,41,BRAVEBIRD,46,HURRICANE","Height":"0.5","Weight":"5.5","Kind":"Water Bird","Pokedex":"When attacked, it uses its feathers to splash water, escaping under cover of the spray.","Evolutions":"SWANNA,Level,35"},{"Name":"Swanna","InternalName":"SWANNA","Type1":"WATER","Type2":"FLYING","HiddenAbility":"HYDRATION","Moves":"1,WATERGUN,1,WATERSPORT,1,DEFOG,1,WINGATTACK,3,WATERSPORT,6,DEFOG,9,WINGATTACK,13,WATERPULSE,15,AERIALACE,19,BUBBLEBEAM,21,FEATHERDANCE,24,AQUARING,27,AIRSLASH,30,ROOST,34,RAINDANCE,40,TAILWIND,47,BRAVEBIRD,55,HURRICANE","Height":"1.3","Weight":"24.2","Kind":"White Bird","Pokedex":"It administers sharp, powerful pecks with its bill. It whips its long neck to deliver forceful repeated strikes.","Evolutions":null},{"Name":"Vanillite","InternalName":"VANILLITE","Type1":"ICE","HiddenAbility":"WEAKARMOR","Moves":"1,ICICLESPEAR,4,HARDEN,7,ASTONISH,10,UPROAR,13,ICYWIND,16,MIST,19,AVALANCHE,22,TAUNT,26,MIRRORSHOT,31,ACIDARMOR,35,ICEBEAM,40,HAIL,44,MIRRORCOAT,49,BLIZZARD,53,SHEERCOLD","Height":"0.4","Weight":"5.7","Kind":"Fresh Snow","Pokedex":"This PokÃ©mon formed from icicles bathed in energy from the morning sun. It sleeps buried in snow.","Evolutions":"VANILLISH,Level,35"},{"Name":"Vanillish","InternalName":"VANILLISH","Type1":"ICE","HiddenAbility":"WEAKARMOR","Moves":"1,ICICLESPEAR,1,HARDEN,1,ASTONISH,1,UPROAR,4,HARDEN,7,ASTONISH,10,UPROAR,13,ICYWIND,16,MIST,19,AVALANCHE,22,TAUNT,26,MIRRORSHOT,31,ACIDARMOR,36,ICEBEAM,42,HAIL,47,MIRRORCOAT,53,BLIZZARD,58,SHEERCOLD","Height":"1.1","Weight":"41.0","Kind":"Icy Snow","Pokedex":"It conceals itself from enemy eyes by creating many small ice particles and hiding among them.","Evolutions":"VANILLUXE,Level,47"},{"Name":"Vanilluxe","InternalName":"VANILLUXE","Type1":"ICE","HiddenAbility":"WEAKARMOR","Moves":"1,SHEERCOLD,1,FREEZEDRY,1,WEATHERBALL,1,ICICLESPEAR,1,HARDEN,1,ASTONISH,1,UPROAR,4,HARDEN,7,ASTONISH,10,UPROAR,13,ICYWIND,16,MIST,19,AVALANCHE,22,TAUNT,26,MIRRORSHOT,31,ACIDARMOR,36,ICEBEAM,42,HAIL,50,MIRRORCOAT,59,BLIZZARD,67,SHEERCOLD","Height":"1.3","Weight":"57.5","Kind":"Snowstorm","Pokedex":"If both heads get angry simultaneously, this PokÃ©mon expels a blizzard, burying everything in snow.","Evolutions":null},{"Name":"Deerling","InternalName":"DEERLING","Type1":"NORMAL","Type2":"GRASS","HiddenAbility":"SERENEGRACE","Moves":"1,TACKLE,1,CAMOUFLAGE,4,GROWL,7,SANDATTACK,10,DOUBLEKICK,13,LEECHSEED,16,FEINTATTACK,20,TAKEDOWN,24,JUMPKICK,28,AROMATHERAPY,32,ENERGYBALL,36,CHARM,41,NATUREPOWER,46,DOUBLEEDGE,51,SOLARBEAM","Height":"0.6","Weight":"19.5","Kind":"Season","Pokedex":"The turning of the seasons changes the color and scent of this PokÃ©mon's fur. People use it to mark the seasons.","FormNames":"Spring Form,Summer Form,Autumn Form,Winter Form","Evolutions":"SAWSBUCK,Level,34"},{"Name":"Sawsbuck","InternalName":"SAWSBUCK","Type1":"NORMAL","Type2":"GRASS","HiddenAbility":"SERENEGRACE","Moves":"1,MEGAHORN,1,TACKLE,1,CAMOUFLAGE,1,GROWL,1,SANDATTACK,4,GROWL,7,SANDATTACK,10,DOUBLEKICK,13,LEECHSEED,16,FEINTATTACK,20,TAKEDOWN,24,JUMPKICK,28,AROMATHERAPY,32,ENERGYBALL,36,CHARM,37,HORNLEECH,44,NATUREPOWER,52,DOUBLEEDGE,60,SOLARBEAM","Height":"1.9","Weight":"92.5","Kind":"Season","Pokedex":"The plants growing on its horns change according to the season. The leaders of the herd possess magnificent horns.","FormNames":"Spring Form,Summer Form,Autumn Form,Winter Form","Evolutions":null},{"Name":"Emolga","InternalName":"EMOLGA","Type1":"ELECTRIC","Type2":"FLYING","HiddenAbility":"MOTORDRIVE","Moves":"1,THUNDERSHOCK,4,QUICKATTACK,7,TAILWHIP,10,CHARGE,13,SPARK,15,NUZZLE,16,PURSUIT,19,DOUBLETEAM,22,SHOCKWAVE,26,ELECTROBALL,30,ACROBATICS,34,LIGHTSCREEN,38,ENCORE,42,VOLTSWITCH,46,AGILITY,50,DISCHARGE","Height":"0.4","Weight":"5.0","Kind":"Sky Squirrel","Pokedex":"They live on treetops and glide using the inside of a cape-like membrane while discharging electricity.","WildItemCommon":"CHERIBERRY","WildItemUncommon":"CHERIBERRY","WildItemRare":"CHERIBERRY","Evolutions":null},{"Name":"Karrablast","InternalName":"KARRABLAST","Type1":"BUG","HiddenAbility":"NOGUARD","Moves":"1,PECK,4,LEER,8,ENDURE,13,FURYCUTTER,16,FURYATTACK,20,HEADBUTT,25,FALSESWIPE,28,BUGBUZZ,32,SLASH,37,TAKEDOWN,40,SCARYFACE,44,XSCISSOR,49,FLAIL,52,SWORDSDANCE,56,DOUBLEEDGE","Height":"0.5","Weight":"5.9","Kind":"Clamping","Pokedex":"When they feel threatened, they spit an acidic liquid to drive attackers away. This PokÃ©mon targets Shelmet.","Evolutions":"ESCAVALIER,TradeSpecies,SHELMET"},{"Name":"Escavalier","InternalName":"ESCAVALIER","Type1":"BUG","Type2":"STEEL","HiddenAbility":"OVERCOAT","Moves":"1,DOUBLEEDGE,1,FELLSTINGER,1,PECK,1,LEER,1,QUICKGUARD,1,TWINEEDLE,4,LEER,8,QUICKGUARD,13,TWINEEDLE,16,FURYATTACK,20,HEADBUTT,25,FALSESWIPE,28,BUGBUZZ,32,SLASH,37,IRONHEAD,40,IRONDEFENSE,44,XSCISSOR,49,REVERSAL,52,SWORDSDANCE,56,GIGAIMPACT,60,FELLSTINGER","Height":"1.0","Weight":"33.0","Kind":"Cavalry","Pokedex":"These PokÃ©mon evolve by wearing the shell covering of a Shelmet. The steel armor protects their whole body.","Evolutions":null},{"Name":"Foongus","InternalName":"FOONGUS","Type1":"GRASS","Type2":"POISON","HiddenAbility":"REGENERATOR","Moves":"1,ABSORB,6,GROWTH,8,ASTONISH,12,BIDE,15,MEGADRAIN,18,INGRAIN,20,FEINTATTACK,24,SWEETSCENT,28,GIGADRAIN,32,TOXIC,35,SYNTHESIS,39,CLEARSMOG,43,SOLARBEAM,45,RAGEPOWDER,50,SPORE","Height":"0.2","Weight":"1.0","Kind":"Mushroom","Pokedex":"For some reason, this PokÃ©mon resembles a PokÃ© Ball. They release poison spores to repel those who try to catch them.","WildItemCommon":"TINYMUSHROOM","WildItemUncommon":"BIGMUSHROOM","WildItemRare":"BALMMUSHROOM","Evolutions":"AMOONGUSS,Level,39"},{"Name":"Amoonguss","InternalName":"AMOONGUSS","Type1":"GRASS","Type2":"POISON","HiddenAbility":"REGENERATOR","Moves":"1,ABSORB,1,GROWTH,1,ASTONISH,1,BIDE,6,GROWTH,8,ASTONISH,12,BIDE,15,MEGADRAIN,18,INGRAIN,20,FEINTATTACK,24,SWEETSCENT,28,GIGADRAIN,32,TOXIC,35,SYNTHESIS,43,CLEARSMOG,49,SOLARBEAM,54,RAGEPOWDER,62,SPORE","Height":"0.6","Weight":"10.5","Kind":"Mushroom","Pokedex":"They show off their PokÃ© Ball caps to lure prey, but very few PokÃ©mon are fooled by this.","WildItemCommon":"TINYMUSHROOM","WildItemUncommon":"BIGMUSHROOM","WildItemRare":"BALMMUSHROOM","Evolutions":null},{"Name":"Frillish","InternalName":"FRILLISH","Type1":"WATER","Type2":"GHOST","HiddenAbility":"DAMP","Moves":"1,BUBBLE,1,WATERSPORT,5,ABSORB,9,NIGHTSHADE,13,BUBBLEBEAM,17,RECOVER,22,WATERPULSE,27,OMINOUSWIND,32,BRINE,37,RAINDANCE,43,HEX,49,HYDROPUMP,55,WRINGOUT,61,WATERSPOUT","Height":"1.2","Weight":"33.0","Kind":"Floating","Pokedex":"They paralyze prey with poison, then drag them down to their lairs, five miles below the surface.","Evolutions":"JELLICENT,Level,40"},{"Name":"Jellicent","InternalName":"JELLICENT","Type1":"WATER","Type2":"GHOST","HiddenAbility":"DAMP","Moves":"1,WATERSPOUT,1,WRINGOUT,1,BUBBLE,1,WATERSPORT,1,ABSORB,1,NIGHTSHADE,5,ABSORB,9,NIGHTSHADE,13,BUBBLEBEAM,17,RECOVER,22,WATERPULSE,27,OMINOUSWIND,32,BRINE,37,RAINDANCE,45,HEX,53,HYDROPUMP,61,WRINGOUT,69,WATERSPOUT","Height":"2.2","Weight":"135.0","Kind":"Floating","Pokedex":"They propel themselves by expelling absorbed seawater from their bodies. Their favorite food is life energy.","Evolutions":null},{"Name":"Alomomola","InternalName":"ALOMOMOLA","Type1":"WATER","HiddenAbility":"REGENERATOR","Moves":"1,HYDROPUMP,1,WIDEGUARD,1,HEALINGWISH,1,POUND,1,WATERSPORT,5,AQUARING,9,AQUAJET,13,DOUBLESLAP,17,HEALPULSE,21,PROTECT,25,WATERPULSE,29,WAKEUPSLAP,33,SOAK,37,WISH,41,BRINE,45,SAFEGUARD,49,HELPINGHAND,53,WIDEGUARD,57,HEALINGWISH,61,HYDROPUMP","Height":"1.2","Weight":"31.6","Kind":"Caring","Pokedex":"Floating in the open sea is how they live. When they find a wounded PokÃ©mon, they embrace it and bring it to shore.","Evolutions":null},{"Name":"Joltik","InternalName":"JOLTIK","Type1":"BUG","Type2":"ELECTRIC","HiddenAbility":"SWARM","Moves":"1,STRINGSHOT,1,LEECHLIFE,1,SPIDERWEB,4,THUNDERWAVE,7,SCREECH,12,FURYCUTTER,15,ELECTROWEB,18,BUGBITE,23,GASTROACID,26,SLASH,29,ELECTROBALL,34,SIGNALBEAM,37,AGILITY,40,SUCKERPUNCH,45,DISCHARGE,48,BUGBUZZ","Height":"0.1","Weight":"0.6","Kind":"Attaching","Pokedex":"They attach themselves to large-bodied PokÃ©mon and absorb static electricity, which they store in an electric pouch.","Evolutions":"GALVANTULA,Level,36"},{"Name":"Galvantula","InternalName":"GALVANTULA","Type1":"BUG","Type2":"ELECTRIC","HiddenAbility":"SWARM","Moves":"1,STICKYWEB,1,STRINGSHOT,1,LEECHLIFE,1,SPIDERWEB,1,THUNDERWAVE,4,THUNDERWAVE,7,SCREECH,12,FURYCUTTER,15,ELECTROWEB,18,BUGBITE,23,GASTROACID,26,SLASH,29,ELECTROBALL,34,SIGNALBEAM,40,AGILITY,46,SUCKERPUNCH,54,DISCHARGE,60,BUGBUZZ,65,STICKYWEB","Height":"0.8","Weight":"14.3","Kind":"EleSpider","Pokedex":"They employ an electrically charged web to trap their prey. While it is immobilized by shock, they leisurely consume it.","Evolutions":null},{"Name":"Ferroseed","InternalName":"FERROSEED","Type1":"GRASS","Type2":"STEEL","Moves":"1,TACKLE,1,HARDEN,6,ROLLOUT,9,CURSE,14,METALCLAW,18,PINMISSILE,21,GYROBALL,26,IRONDEFENSE,30,MIRRORSHOT,35,INGRAIN,38,SELFDESTRUCT,43,IRONHEAD,47,PAYBACK,52,FLASHCANNON,55,EXPLOSION","Height":"0.6","Weight":"18.8","Kind":"Thorn Seed","Pokedex":"They stick their spikes into cave walls and absorb the minerals they find in the rock.","WildItemUncommon":"STICKYBARB","Evolutions":"FERROTHORN,Level,40"},{"Name":"Ferrothorn","InternalName":"FERROTHORN","Type1":"GRASS","Type2":"STEEL","Moves":"1,ROCKCLIMB,1,TACKLE,1,HARDEN,1,ROLLOUT,1,CURSE,6,ROLLOUT,9,CURSE,14,METALCLAW,18,PINMISSILE,21,GYROBALL,26,IRONDEFENSE,30,MIRRORSHOT,35,INGRAIN,38,SELFDESTRUCT,40,POWERWHIP,46,IRONHEAD,53,PAYBACK,61,FLASHCANNON,67,EXPLOSION","Height":"1.0","Weight":"110.0","Kind":"Thorn Pod","Pokedex":"They attach themselves to cave ceilings, firing steel spikes at targets passing beneath them.","WildItemUncommon":"STICKYBARB","Evolutions":null},{"Name":"Klink","InternalName":"KLINK","Type1":"STEEL","HiddenAbility":"CLEARBODY","Moves":"1,VICEGRIP,6,CHARGE,11,THUNDERSHOCK,16,GEARGRIND,21,BIND,26,CHARGEBEAM,31,AUTOTOMIZE,36,MIRRORSHOT,39,SCREECH,42,DISCHARGE,45,METALSOUND,48,SHIFTGEAR,50,LOCKON,54,ZAPCANNON,57,HYPERBEAM","Height":"0.3","Weight":"21.0","Kind":"Gear","Pokedex":"Interlocking two bodies and spinning around generates the energy they need to live.","Evolutions":"KLANG,Level,38"},{"Name":"Klang","InternalName":"KLANG","Type1":"STEEL","HiddenAbility":"CLEARBODY","Moves":"1,VICEGRIP,1,CHARGE,1,THUNDERSHOCK,1,GEARGRIND,6,CHARGE,11,THUNDERSHOCK,16,GEARGRIND,21,BIND,26,CHARGEBEAM,31,AUTOTOMIZE,36,MIRRORSHOT,40,SCREECH,44,DISCHARGE,48,METALSOUND,52,SHIFTGEAR,56,LOCKON,60,ZAPCANNON,64,HYPERBEAM","Height":"0.6","Weight":"51.0","Kind":"Gear","Pokedex":"Spinning minigears are rotated at high speed and repeatedly fired away. It is dangerous if the gears don't return.","Evolutions":"KLINKLANG,Level,49"},{"Name":"Klinklang","InternalName":"KLINKLANG","Type1":"STEEL","HiddenAbility":"CLEARBODY","Moves":"1,MAGNETICFLUX,1,ZAPCANNON,1,VICEGRIP,1,CHARGE,1,THUNDERSHOCK,1,GEARGRIND,6,CHARGE,11,THUNDERSHOCK,16,GEARGRIND,21,BIND,25,CHARGEBEAM,31,AUTOTOMIZE,36,MIRRORSHOT,40,SCREECH,44,DISCHARGE,48,METALSOUND,54,SHIFTGEAR,60,LOCKON,66,ZAPCANNON,72,HYPERBEAM,76,MAGNETICFLUX","Height":"0.6","Weight":"81.0","Kind":"Gear","Pokedex":"The gear with the red core is rotated at high speed for a rapid energy charge.","Evolutions":null},{"Name":"Tynamo","InternalName":"TYNAMO","Type1":"ELECTRIC","Moves":"1,TACKLE,1,THUNDERWAVE,1,SPARK,1,CHARGEBEAM","Height":"0.2","Weight":"0.3","Kind":"EleFish","Pokedex":"These PokÃ©mon move in schools. They have an electricity-generating organ, so they discharge electricity if in danger.","Evolutions":"EELEKTRIK,Level,39"},{"Name":"Eelektrik","InternalName":"EELEKTRIK","Type1":"ELECTRIC","Moves":"1,HEADBUTT,1,THUNDERWAVE,1,SPARK,1,CHARGEBEAM,9,BIND,19,ACID,29,DISCHARGE,39,CRUNCH,44,THUNDERBOLT,49,ACIDSPRAY,54,COIL,59,WILDCHARGE,64,GASTROACID,69,ZAPCANNON,74,THRASH","Height":"1.2","Weight":"22.0","Kind":"EleFish","Pokedex":"These PokÃ©mon have a big appetite. When they spot their prey, they attack it and paralyze it with electricity.","Evolutions":"EELEKTROSS,Item,THUNDERSTONE"},{"Name":"Eelektross","InternalName":"EELEKTROSS","Type1":"ELECTRIC","Moves":"1,THRASH,1,ZAPCANNON,1,GASTROACID,1,COIL,1,IONDELUGE,1,CRUSHCLAW,1,HEADBUTT,1,ACID,1,DISCHARGE,1,CRUNCH","Height":"2.1","Weight":"80.5","Kind":"EleFish","Pokedex":"With their sucker mouths, they suck in prey. Then they use their fangs to shock the prey with electricity.","Evolutions":null},{"Name":"Elgyem","InternalName":"ELGYEM","Type1":"PSYCHIC","HiddenAbility":"ANALYTIC","Moves":"1,CONFUSION,4,GROWL,8,HEALBLOCK,11,MIRACLEEYE,15,PSYBEAM,18,HEADBUTT,22,HIDDENPOWER,25,IMPRISON,29,SIMPLEBEAM,32,ZENHEADBUTT,36,PSYCHUP,39,PSYCHIC,43,CALMMIND,46,RECOVER,50,GUARDSPLIT,50,POWERSPLIT,53,SYNCHRONOISE,56,WONDERROOM","Height":"0.5","Weight":"9.0","Kind":"Cerebral","Pokedex":"This PokÃ©mon had never been seen until it appeared from far in the desert 50 years ago.","Evolutions":"BEHEEYEM,Level,42"},{"Name":"Beheeyem","InternalName":"BEHEEYEM","Type1":"PSYCHIC","HiddenAbility":"ANALYTIC","Moves":"1,WONDERROOM,1,SYNCHRONOISE,1,CONFUSION,1,GROWL,1,HEALBLOCK,1,MIRACLEEYE,4,GROWL,8,HEALBLOCK,11,MIRACLEEYE,15,PSYBEAM,18,HEADBUTT,22,HIDDENPOWER,25,IMPRISON,29,SIMPLEBEAM,32,ZENHEADBUTT,36,PSYCHUP,39,PSYCHIC,45,CALMMIND,50,RECOVER,56,GUARDSPLIT,58,POWERSPLIT,63,SYNCHRONOISE,68,WONDERROOM","Height":"1.0","Weight":"34.5","Kind":"Cerebral","Pokedex":"It uses psychic power to control an opponent's brain and tamper with its memories.","Evolutions":null},{"Name":"Litwick","InternalName":"LITWICK","Type1":"GHOST","Type2":"FIRE","HiddenAbility":"SHADOWTAG","Moves":"1,EMBER,1,ASTONISH,3,MINIMIZE,5,SMOG,7,FIRESPIN,10,CONFUSERAY,13,NIGHTSHADE,16,WILLOWISP,20,FLAMEBURST,24,IMPRISON,28,HEX,33,MEMENTO,38,INFERNO,43,CURSE,49,SHADOWBALL,55,PAINSPLIT,61,OVERHEAT","Height":"0.3","Weight":"3.1","Kind":"Candle","Pokedex":"While shining a light and pretending to be a guide, it leeches off the life force of any who follow it.","Evolutions":"LAMPENT,Level,41"},{"Name":"Lampent","InternalName":"LAMPENT","Type1":"GHOST","Type2":"FIRE","HiddenAbility":"SHADOWTAG","Moves":"1,EMBER,1,ASTONISH,1,MINIMIZE,1,SMOG,3,MINIMIZE,5,SMOG,7,FIRESPIN,10,CONFUSERAY,13,NIGHTSHADE,16,WILLOWISP,20,FLAMEBURST,24,IMPRISON,28,HEX,33,MEMENTO,38,INFERNO,45,CURSE,53,SHADOWBALL,61,PAINSPLIT,69,OVERHEAT","Height":"0.6","Weight":"13.0","Kind":"Lamp","Pokedex":"It arrives near the moment of death and steals spirit from the body.","Evolutions":"CHANDELURE,Item,DUSKSTONE"},{"Name":"Chandelure","InternalName":"CHANDELURE","Type1":"GHOST","Type2":"FIRE","HiddenAbility":"SHADOWTAG","Moves":"1,PAINSPLIT,1,SMOG,1,CONFUSERAY,1,FLAMEBURST,1,HEX","Height":"1.0","Weight":"34.3","Kind":"Luring","Pokedex":"Being consumed in Chandelure's flame burns up the spirit, leaving the body behind.","Evolutions":null},{"Name":"Axew","InternalName":"AXEW","Type1":"DRAGON","HiddenAbility":"UNNERVE","Moves":"1,SCRATCH,4,LEER,7,ASSURANCE,10,DRAGONRAGE,13,DUALCHOP,16,SCARYFACE,20,SLASH,24,FALSESWIPE,28,DRAGONCLAW,32,DRAGONDANCE,36,TAUNT,41,DRAGONPULSE,46,SWORDSDANCE,50,GUILLOTINE,56,OUTRAGE,61,GIGAIMPACT","Height":"0.6","Weight":"18.0","Kind":"Tusk","Pokedex":"They mark their territory by leaving gashes in trees with their tusks. If a tusk breaks, a new one grows in quickly.","Evolutions":"FRAXURE,Level,38"},{"Name":"Fraxure","InternalName":"FRAXURE","Type1":"DRAGON","HiddenAbility":"UNNERVE","Moves":"1,SCRATCH,1,LEER,1,ASSURANCE,1,DRAGONRAGE,4,LEER,7,ASSURANCE,10,DRAGONRAGE,13,DUALCHOP,16,SCARYFACE,20,SLASH,24,FALSESWIPE,28,DRAGONCLAW,32,DRAGONDANCE,36,TAUNT,42,DRAGONPULSE,48,SWORDSDANCE,54,GUILLOTINE,60,OUTRAGE,66,GIGAIMPACT","Height":"1.0","Weight":"36.0","Kind":"Axe Jaw","Pokedex":"Their tusks can shatter rocks. Territory battles between Fraxure can be intensely violent.","Evolutions":"HAXORUS,Level,48"},{"Name":"Haxorus","InternalName":"HAXORUS","Type1":"DRAGON","HiddenAbility":"UNNERVE","Moves":"1,OUTRAGE,1,SCRATCH,1,LEER,1,ASSURANCE,1,DRAGONRAGE,4,LEER,7,ASSURANCE,10,DRAGONRAGE,13,DUALCHOP,16,SCARYFACE,20,SLASH,24,FALSESWIPE,28,DRAGONCLAW,32,DRAGONDANCE,36,TAUNT,42,DRAGONPULSE,50,SWORDSDANCE,58,GUILLOTINE,66,OUTRAGE,74,GIGAIMPACT","Height":"1.8","Weight":"105.5","Kind":"Axe Jaw","Pokedex":"Their sturdy tusks will stay sharp even if used to cut steel beams. These PokÃ©mon are covered in hard armor.","Evolutions":null},{"Name":"Cubchoo","InternalName":"CUBCHOO","Type1":"ICE","HiddenAbility":"RATTLED","Moves":"1,GROWL,5,POWDERSNOW,9,BIDE,13,ICYWIND,15,PLAYNICE,17,FURYSWIPES,21,BRINE,25,ENDURE,29,CHARM,33,SLASH,36,FLAIL,41,REST,45,BLIZZARD,49,HAIL,53,THRASH,57,SHEERCOLD","Height":"0.5","Weight":"8.5","Kind":"Chill","Pokedex":"Its nose is always running. It sniffs the snot back up because the mucus provides the raw material for its moves.","WildItemCommon":"ASPEARBERRY","Evolutions":"BEARTIC,Level,37"},{"Name":"Beartic","InternalName":"BEARTIC","Type1":"ICE","HiddenAbility":"SWIFTSWIM","Moves":"1,SHEERCOLD,1,THRASH,1,SUPERPOWER,1,AQUAJET,1,GROWL,1,POWDERSNOW,1,BIDE,1,ICYWIND,9,PLAYNICE,13,ICYWIND,17,FURYSWIPES,21,BRINE,25,ENDURE,29,SWAGGER,33,SLASH,36,FLAIL,37,ICICLECRASH,41,REST,45,BLIZZARD,53,HAIL,59,THRASH,66,SHEERCOLD","Height":"2.6","Weight":"260.0","Kind":"Freezing","Pokedex":"It freezes its breath to create fangs and claws of ice to fight with. Cold northern areas are its habitat.","WildItemCommon":"ASPEARBERRY","Evolutions":null},{"Name":"Cryogonal","InternalName":"CRYOGONAL","Type1":"ICE","Moves":"1,SHEERCOLD,1,NIGHTSLASH,1,ICESHARD,1,MIST,1,HAZE,1,BIND,5,ICESHARD,9,SHARPEN,13,RAPIDSPIN,17,ICYWIND,21,MIST,21,HAZE,25,AURORABEAM,29,ACIDARMOR,33,ICEBEAM,37,LIGHTSCREEN,37,REFLECT,41,SLASH,45,CONFUSERAY,49,RECOVER,50,FREEZEDRY,53,SOLARBEAM,57,NIGHTSLASH,61,SHEERCOLD","Height":"1.1","Weight":"148.0","Kind":"Crystallizing","Pokedex":"They are born in snow clouds. They use chains made of ice crystals to capture prey.","WildItemUncommon":"NEVERMELTICE","Evolutions":null},{"Name":"Shelmet","InternalName":"SHELMET","Type1":"BUG","HiddenAbility":"OVERCOAT","Moves":"1,LEECHLIFE,4,ACID,8,BIDE,13,CURSE,16,STRUGGLEBUG,20,MEGADRAIN,25,YAWN,28,PROTECT,32,ACIDARMOR,37,GIGADRAIN,40,BODYSLAM,44,BUGBUZZ,49,RECOVER,50,GUARDSWAP,56,FINALGAMBIT","Height":"0.4","Weight":"7.7","Kind":"Snail","Pokedex":"It evolves when bathed in an electric-like energy along with Karrablast. The reason is still unknown.","Evolutions":"ACCELGOR,TradeSpecies,KARRABLAST"},{"Name":"Accelgor","InternalName":"ACCELGOR","Type1":"BUG","HiddenAbility":"UNBURDEN","Moves":"1,WATERSHURIKEN,1,FINALGAMBIT,1,POWERSWAP,1,LEECHLIFE,1,ACIDSPRAY,1,DOUBLETEAM,1,QUICKATTACK,4,ACIDSPRAY,8,DOUBLETEAM,13,QUICKATTACK,16,STRUGGLEBUG,20,MEGADRAIN,25,SWIFT,28,MEFIRST,32,AGILITY,37,GIGADRAIN,40,UTURN,44,BUGBUZZ,49,RECOVER,52,POWERSWAP,56,FINALGAMBIT","Height":"0.8","Weight":"25.3","Kind":"Shell Out","Pokedex":"Having removed its heavy shell, it becomes very light and can fight with ninja-like movements.","Evolutions":null},{"Name":"Stunfisk","InternalName":"STUNFISK","Type1":"GROUND","Type2":"ELECTRIC","HiddenAbility":"SANDVEIL","Moves":"1,FISSURE,1,FLAIL,1,TACKLE,1,WATERGUN,1,MUDSLAP,1,MUDSPORT,5,BIDE,9,THUNDERSHOCK,13,MUDSHOT,17,CAMOUFLAGE,21,MUDBOMB,25,DISCHARGE,30,ENDURE,35,BOUNCE,40,MUDDYWATER,45,THUNDERBOLT,50,REVENGE,55,FLAIL,61,FISSURE","Height":"0.7","Weight":"11.0","Kind":"Trap","Pokedex":"It conceals itself in the mud of the seashore. Then it waits. When prey touch it, it delivers a jolt of energy.","WildItemUncommon":"SOFTSAND","Evolutions":null},{"Name":"Mienfoo","InternalName":"MIENFOO","Type1":"FIGHTING","HiddenAbility":"RECKLESS","Moves":"1,POUND,5,MEDITATE,9,DETECT,13,FAKEOUT,17,DOUBLESLAP,21,SWIFT,25,CALMMIND,29,FORCEPALM,33,DRAINPUNCH,37,JUMPKICK,41,UTURN,45,QUICKGUARD,49,BOUNCE,50,HIJUMPKICK,57,REVERSAL,61,AURASPHERE","Height":"0.9","Weight":"20.0","Kind":"Martial Arts","Pokedex":"They have mastered elegant combos. As they concentrate, their battle moves become swifter and more precise.","Evolutions":"MIENSHAO,Level,50"},{"Name":"Mienshao","InternalName":"MIENSHAO","Type1":"FIGHTING","HiddenAbility":"RECKLESS","Moves":"1,AURASPHERE,1,REVERSAL,1,POUND,1,MEDITATE,1,DETECT,1,FAKEOUT,5,MEDITATE,9,DETECT,13,FAKEOUT,17,DOUBLESLAP,21,SWIFT,25,CALMMIND,29,FORCEPALM,33,DRAINPUNCH,37,JUMPKICK,41,UTURN,45,WIDEGUARD,49,BOUNCE,56,HIJUMPKICK,63,REVERSAL,70,AURASPHERE","Height":"1.4","Weight":"35.5","Kind":"Martial Arts","Pokedex":"They use the long fur on their arms as a whip to strike their opponents.","Evolutions":null},{"Name":"Druddigon","InternalName":"DRUDDIGON","Type1":"DRAGON","HiddenAbility":"MOLDBREAKER","Moves":"1,LEER,1,SCRATCH,5,HONECLAWS,9,BITE,13,SCARYFACE,18,DRAGONRAGE,21,SLASH,25,CRUNCH,27,DRAGONCLAW,31,CHIPAWAY,35,REVENGE,40,NIGHTSLASH,45,DRAGONTAIL,49,ROCKCLIMB,55,SUPERPOWER,62,OUTRAGE","Height":"1.6","Weight":"139.0","Kind":"Cave","Pokedex":"It races through narrow caves, using its sharp claws to catch prey. Then skin on its face is harder than a rock.","WildItemUncommon":"DRAGONFANG","Evolutions":null},{"Name":"Golett","InternalName":"GOLETT","Type1":"GROUND","Type2":"GHOST","HiddenAbility":"NOGUARD","Moves":"1,POUND,1,ASTONISH,1,DEFENSECURL,5,MUDSLAP,9,ROLLOUT,13,SHADOWPUNCH,17,IRONDEFENSE,21,MEGAPUNCH,25,MAGNITUDE,30,DYNAMICPUNCH,35,NIGHTSHADE,40,CURSE,45,EARTHQUAKE,50,HAMMERARM,55,FOCUSPUNCH","Height":"1.0","Weight":"92.0","Kind":"Automaton","Pokedex":"These PokÃ©mon are thought to have been created by the science of an ancient and mysterious civilization.","WildItemUncommon":"LIGHTCLAY","Evolutions":"GOLURK,Level,43"},{"Name":"Golurk","InternalName":"GOLURK","Type1":"GROUND","Type2":"GHOST","HiddenAbility":"NOGUARD","Moves":"1,PHANTOMFORCE,1,FOCUSPUNCH,1,POUND,1,ASTONISH,1,DEFENSECURL,1,MUDSLAP,5,MUDSLAP,9,ROLLOUT,13,SHADOWPUNCH,17,IRONDEFENSE,21,MEGAPUNCH,25,MAGNITUDE,30,DYNAMICPUNCH,35,NIGHTSHADE,40,CURSE,43,HEAVYSLAM,50,EARTHQUAKE,60,HAMMERARM,70,FOCUSPUNCH,75,PHANTOMFORCE","Height":"2.8","Weight":"330.0","Kind":"Automaton","Pokedex":"It is said that Golurk were ordered to protect people and PokÃ©mon by the ancient people who made them.","WildItemUncommon":"LIGHTCLAY","Evolutions":null},{"Name":"Pawniard","InternalName":"PAWNIARD","Type1":"DARK","Type2":"STEEL","HiddenAbility":"PRESSURE","Moves":"1,SCRATCH,6,LEER,9,FURYCUTTER,14,TORMENT,17,FEINTATTACK,22,SCARYFACE,25,METALCLAW,30,SLASH,33,ASSURANCE,38,METALSOUND,41,EMBARGO,46,IRONDEFENSE,49,NIGHTSLASH,54,IRONHEAD,57,SWORDSDANCE,62,GUILLOTINE","Height":"0.5","Weight":"10.2","Kind":"Sharp Blade","Pokedex":"They fight at Bisharp's command. They cling to their prey and inflict damage by sinking their blades into it.","Evolutions":"BISHARP,Level,52"},{"Name":"Bisharp","InternalName":"BISHARP","Type1":"DARK","Type2":"STEEL","HiddenAbility":"PRESSURE","Moves":"1,GUILLOTINE,1,IRONHEAD,1,METALBURST,1,SCRATCH,1,LEER,1,FURYCUTTER,1,TORMENT,6,LEER,9,FURYCUTTER,14,TORMENT,17,FEINTATTACK,22,SCARYFACE,25,METALCLAW,30,SLASH,33,ASSURANCE,38,METALSOUND,41,EMBARGO,46,IRONDEFENSE,49,NIGHTSLASH,57,IRONHEAD,63,SWORDSDANCE,71,GUILLOTINE","Height":"1.6","Weight":"70.0","Kind":"Sword Blade","Pokedex":"Bisharp pursues prey in the company of a large group of Pawniard. Then Bisharp finishes off the prey.","Evolutions":null},{"Name":"Bouffalant","InternalName":"BOUFFALANT","Type1":"NORMAL","HiddenAbility":"SOUNDPROOF","Moves":"1,PURSUIT,1,LEER,6,RAGE,11,FURYATTACK,16,HORNATTACK,21,SCARYFACE,26,REVENGE,31,HEADCHARGE,36,FOCUSENERGY,41,MEGAHORN,46,REVERSAL,50,THRASH,56,SWORDSDANCE,61,GIGAIMPACT","Height":"1.6","Weight":"94.6","Kind":"Bash Buffalo","Pokedex":"They charge wildly and headbutt everything. They headbutts have enough destructive force to derail a train.","Evolutions":null},{"Name":"Rufflet","InternalName":"RUFFLET","Type1":"NORMAL","Type2":"FLYING","HiddenAbility":"HUSTLE","Moves":"1,PECK,1,LEER,5,FURYATTACK,10,WINGATTACK,14,HONECLAWS,19,SCARYFACE,23,AERIALACE,28,SLASH,32,DEFOG,37,TAILWIND,41,AIRSLASH,46,CRUSHCLAW,50,SKYDROP,55,WHIRLWIND,59,BRAVEBIRD,64,THRASH","Height":"0.5","Weight":"10.5","Kind":"Eaglet","Pokedex":"They will challenge anything, even strong opponents, without fear. Their frequent fights help them become stronger.","Evolutions":"BRAVIARY,Level,54"},{"Name":"Braviary","InternalName":"BRAVIARY","Type1":"NORMAL","Type2":"FLYING","HiddenAbility":"DEFIANT","Moves":"1,THRASH,1,BRAVEBIRD,1,WHIRLWIND,1,SUPERPOWER,1,PECK,1,LEER,1,FURYATTACK,1,WINGATTACK,5,FURYATTACK,10,WINGATTACK,14,HONECLAWS,19,SCARYFACE,23,AERIALACE,28,SLASH,32,DEFOG,37,TAILWIND,41,AIRSLASH,46,CRUSHCLAW,50,SKYDROP,51,SUPERPOWER,57,WHIRLWIND,63,BRAVEBIRD,70,THRASH","Height":"1.5","Weight":"41.0","Kind":"Valiant","Pokedex":"The more scars they have, the more respect these brave soldiers of the sky get from their peers.","Evolutions":null},{"Name":"Vullaby","InternalName":"VULLABY","Type1":"DARK","Type2":"FLYING","HiddenAbility":"WEAKARMOR","Moves":"1,GUST,1,LEER,5,FURYATTACK,10,PLUCK,14,NASTYPLOT,19,FLATTER,23,FEINTATTACK,28,PUNISHMENT,32,DEFOG,37,TAILWIND,41,AIRSLASH,46,DARKPULSE,50,EMBARGO,55,WHIRLWIND,59,BRAVEBIRD,64,MIRRORMOVE","Height":"0.5","Weight":"9.0","Kind":"Diapered","Pokedex":"They tend to guard their posteriors with suitable bones they have found. They pursue weak PokÃ©mon.","Evolutions":"MANDIBUZZ,Level,54"},{"Name":"Mandibuzz","InternalName":"MANDIBUZZ","Type1":"DARK","Type2":"FLYING","HiddenAbility":"WEAKARMOR","Moves":"1,MIRRORMOVE,1,BRAVEBIRD,1,WHIRLWIND,1,BONERUSH,1,GUST,1,LEER,1,FURYATTACK,1,PLUCK,5,FURYATTACK,10,PLUCK,14,NASTYPLOT,19,FLATTER,23,FEINTATTACK,28,PUNISHMENT,32,DEFOG,37,TAILWIND,41,AIRSLASH,46,DARKPULSE,50,EMBARGO,51,BONERUSH,57,WHIRLWIND,63,BRAVEBIRD,70,MIRRORMOVE","Height":"1.2","Weight":"39.5","Kind":"Bone Vulture","Pokedex":"Watching from the sky, they swoop to strike weakened PokÃ©mon on the ground. They decorate themselves with bones.","Evolutions":null},{"Name":"Heatmor","InternalName":"HEATMOR","Type1":"FIRE","HiddenAbility":"WHITESMOKE","Moves":"1,INFERNO,1,HONECLAWS,1,TACKLE,1,INCINERATE,1,LICK,6,ODORSLEUTH,11,BIND,16,FIRESPIN,21,FURYSWIPES,26,SNATCH,31,FLAMEBURST,36,BUGBITE,41,SLASH,44,AMNESIA,47,FLAMETHROWER,50,STOCKPILE,50,SPITUP,50,SWALLOW,61,INFERNO","Height":"1.4","Weight":"58.0","Kind":"Anteater","Pokedex":"Using their very hot, flame-covered tongues, they burn through Durant's steel bodies and consume their insides.","Evolutions":null},{"Name":"Durant","InternalName":"DURANT","Type1":"BUG","Type2":"STEEL","HiddenAbility":"TRUANT","Moves":"1,GUILLOTINE,1,IRONDEFENSE,1,METALSOUND,1,VICEGRIP,1,SANDATTACK,6,FURYCUTTER,11,BITE,16,AGILITY,21,METALCLAW,26,BUGBITE,31,CRUNCH,36,IRONHEAD,41,DIG,46,ENTRAINMENT,51,XSCISSOR,56,IRONDEFENSE,61,GUILLOTINE,66,METALSOUND","Height":"0.3","Weight":"33.0","Kind":"Iron Ant","Pokedex":"Durant dig nests in mountains. They build their complicated, interconnected tunnels in mazes.","Evolutions":null},{"Name":"Deino","InternalName":"DEINO","Type1":"DARK","Type2":"DRAGON","Moves":"1,TACKLE,1,DRAGONRAGE,4,FOCUSENERGY,9,BITE,12,HEADBUTT,17,DRAGONBREATH,20,ROAR,25,CRUNCH,28,SLAM,32,DRAGONPULSE,38,WORKUP,42,DRAGONRUSH,48,BODYSLAM,50,SCARYFACE,58,HYPERVOICE,62,OUTRAGE","Height":"0.8","Weight":"17.3","Kind":"Irate","Pokedex":"They cannot see, so they tackle and bite to learn about their surroundings. Their bodies are covered in wounds.","Evolutions":"ZWEILOUS,Level,50"},{"Name":"Zweilous","InternalName":"ZWEILOUS","Type1":"DARK","Type2":"DRAGON","Moves":"1,DOUBLEHIT,1,DRAGONRAGE,1,FOCUSENERGY,1,BITE,4,FOCUSENERGY,9,BITE,12,HEADBUTT,17,DRAGONBREATH,20,ROAR,25,CRUNCH,28,SLAM,32,DRAGONPULSE,38,WORKUP,42,DRAGONRUSH,48,BODYSLAM,55,SCARYFACE,64,HYPERVOICE,71,OUTRAGE","Height":"1.4","Weight":"50.0","Kind":"Hostile","Pokedex":"Since their two heads do not get along and compete with each other for food, they always eat too much.","Evolutions":"HYDREIGON,Level,64"},{"Name":"Hydreigon","InternalName":"HYDREIGON","Type1":"DARK","Type2":"DRAGON","Moves":"1,OUTRAGE,1,HYPERVOICE,1,TRIATTACK,1,DRAGONRAGE,1,FOCUSENERGY,1,BITE,4,FOCUSENERGY,9,BITE,12,HEADBUTT,17,DRAGONBREATH,20,ROAR,25,CRUNCH,28,SLAM,32,DRAGONPULSE,38,WORKUP,42,DRAGONRUSH,48,BODYSLAM,55,SCARYFACE,68,HYPERVOICE,79,OUTRAGE","Height":"1.8","Weight":"160.0","Kind":"Brutal","Pokedex":"The heads on their arms do not have brains. They use all three heads to consume and destroy everything.","Evolutions":null},{"Name":"Larvesta","InternalName":"LARVESTA","Type1":"BUG","Type2":"FIRE","HiddenAbility":"SWARM","Moves":"1,EMBER,1,STRINGSHOT,10,LEECHLIFE,20,TAKEDOWN,30,FLAMECHARGE,40,BUGBITE,50,DOUBLEEDGE,60,FLAMEWHEEL,70,BUGBUZZ,80,AMNESIA,90,THRASH,100,FLAREBLITZ","Height":"1.1","Weight":"28.8","Kind":"Torch","Pokedex":"The base of volcanoes is where they make their homes. They shoot fire from their five horns to repel attacking enemies.","Evolutions":"VOLCARONA,Level,59"},{"Name":"Volcarona","InternalName":"VOLCARONA","Type1":"BUG","Type2":"FIRE","HiddenAbility":"SWARM","Moves":"1,FIERYDANCE,1,HURRICANE,1,RAGEPOWDER,1,HEATWAVE,1,QUIVERDANCE,1,FLAREBLITZ,1,THRASH,1,AMNESIA,1,BUGBUZZ,1,FLAMEWHEEL,1,EMBER,1,STRINGSHOT,1,LEECHLIFE,1,GUST,10,LEECHLIFE,20,GUST,30,FIRESPIN,40,WHIRLWIND,50,SILVERWIND,59,QUIVERDANCE,60,HEATWAVE,70,BUGBUZZ,80,RAGEPOWDER,90,HURRICANE,100,FIERYDANCE","Height":"1.6","Weight":"46.0","Kind":"Sun","Pokedex":"A sea of fire engulfs the surroundings of their battles, since they use their six wings to scatter their ember scales.","WildItemCommon":"SILVERPOWDER","WildItemUncommon":"SILVERPOWDER","WildItemRare":"SILVERPOWDER","Evolutions":null},{"Name":"Cobalion","InternalName":"COBALION","Type1":"STEEL","Type2":"FIGHTING","Moves":"1,CLOSECOMBAT,1,METALBURST,1,WORKUP,1,QUICKGUARD,1,QUICKATTACK,1,LEER,7,DOUBLEKICK,13,METALCLAW,19,TAKEDOWN,25,HELPINGHAND,31,RETALIATE,37,IRONHEAD,42,SACREDSWORD,49,SWORDSDANCE,55,QUICKGUARD,61,WORKUP,67,METALBURST,73,CLOSECOMBAT","Height":"2.1","Weight":"250.0","Kind":"Iron Will","Pokedex":"It has a body and heart of steel. Its glare is sufficient to make even an unruly PokÃ©mon obey it.","Evolutions":null},{"Name":"Terrakion","InternalName":"TERRAKION","Type1":"ROCK","Type2":"FIGHTING","Moves":"1,CLOSECOMBAT,1,WORKUP,1,QUICKGUARD,1,QUICKATTACK,1,LEER,7,DOUBLEKICK,13,SMACKDOWN,19,TAKEDOWN,25,HELPINGHAND,31,RETALIATE,37,ROCKSLIDE,42,SACREDSWORD,49,SWORDSDANCE,55,QUICKGUARD,61,WORKUP,67,STONEEDGE,73,CLOSECOMBAT","Height":"1.9","Weight":"260.0","Kind":"Cavern","Pokedex":"Its charge is strong enough to break through a giant castle wall in one blow. This PokÃ©mon is spoken of in legends.","Evolutions":null},{"Name":"Virizion","InternalName":"VIRIZION","Type1":"GRASS","Type2":"FIGHTING","Moves":"1,CLOSECOMBAT,1,LEAFBLADE,1,WORKUP,1,QUICKGUARD,1,QUICKATTACK,1,LEER,7,DOUBLEKICK,13,MAGICALLEAF,19,TAKEDOWN,25,HELPINGHAND,31,RETALIATE,37,GIGADRAIN,42,SACREDSWORD,49,SWORDSDANCE,55,QUICKGUARD,61,WORKUP,67,LEAFBLADE,73,CLOSECOMBAT","Height":"2.0","Weight":"200.0","Kind":"Grassland","Pokedex":"Its head sprouts horns as sharp as blades. Using whirlwind-like movements, it confounds and swiftly cuts opponents.","Evolutions":null},{"Name":"Tornadus","InternalName":"TORNADUS","Type1":"FLYING","HiddenAbility":"DEFIANT","Moves":"1,THRASH,1,HAMMERARM,1,HURRICANE,1,TAILWIND,1,UPROAR,1,ASTONISH,1,GUST,7,SWAGGER,13,BITE,19,REVENGE,25,AIRCUTTER,31,EXTRASENSORY,37,AGILITY,43,AIRSLASH,49,CRUNCH,55,TAILWIND,61,RAINDANCE,67,HURRICANE,73,DARKPULSE,79,HAMMERARM,85,THRASH","Height":"1.5","Weight":"63.0","Kind":"Cyclone","Pokedex":"Tornadus expels massive energy from its tail, causing severe storms. Its power is great enough to blow houses away.","FormNames":"Incarnate Forme,Therian Forme","Evolutions":null},{"Name":"Thundurus","InternalName":"THUNDURUS","Type1":"ELECTRIC","Type2":"FLYING","HiddenAbility":"DEFIANT","Moves":"1,THRASH,1,HAMMERARM,1,NASTYPLOT,1,CHARGE,1,UPROAR,1,ASTONISH,1,THUNDERSHOCK,7,SWAGGER,13,BITE,19,REVENGE,25,SHOCKWAVE,31,HEALBLOCK,37,AGILITY,43,DISCHARGE,49,CRUNCH,55,CHARGE,61,NASTYPLOT,67,THUNDER,73,DARKPULSE,79,HAMMERARM,85,THRASH","Height":"1.5","Weight":"61.0","Kind":"Bolt Strike","Pokedex":"The spikes on its tail discharge immense bolts of lightning. It flies around the Unova region firing off lightning bolts.","FormNames":"Incarnate Forme,Therian Forme","Evolutions":null},{"Name":"Reshiram","InternalName":"RESHIRAM","Type1":"DRAGON","Type2":"FIRE","Moves":"1,FIREFANG,1,DRAGONRAGE,8,IMPRISON,15,ANCIENTPOWER,22,FLAMETHROWER,29,DRAGONBREATH,36,SLASH,43,EXTRASENSORY,50,FUSIONFLARE,54,DRAGONPULSE,64,IMPRISON,71,CRUNCH,78,FIREBLAST,85,OUTRAGE,92,HYPERVOICE,100,BLUEFLARE","Height":"3.2","Weight":"330.0","Kind":"Vast White","Pokedex":"When Reshiram's tail flares, the heat energy moves the atmosphere and changes the world's weather.","Evolutions":null},{"Name":"Zekrom","InternalName":"ZEKROM","Type1":"DRAGON","Type2":"ELECTRIC","Moves":"1,THUNDERFANG,1,DRAGONRAGE,8,IMPRISON,15,ANCIENTPOWER,22,THUNDERBOLT,29,DRAGONBREATH,36,SLASH,43,ZENHEADBUTT,50,FUSIONBOLT,54,DRAGONCLAW,64,IMPRISON,71,CRUNCH,78,THUNDER,85,OUTRAGE,92,HYPERVOICE,100,BOLTSTRIKE","Height":"2.9","Weight":"345.0","Kind":"Deep Black","Pokedex":"This PokÃ©mon appears in legends. In its tail, it has a giant generator that creates electricity.","Evolutions":null},{"Name":"Landorus","InternalName":"LANDORUS","Type1":"GROUND","Type2":"FLYING","HiddenAbility":"SHEERFORCE","Moves":"1,OUTRAGE,1,HAMMERARM,1,FISSURE,1,BLOCK,1,MUDSHOT,1,ROCKTOMB,7,IMPRISON,13,PUNISHMENT,19,BULLDOZE,25,ROCKTHROW,31,EXTRASENSORY,37,SWORDSDANCE,43,EARTHPOWER,49,ROCKSLIDE,55,EARTHQUAKE,61,SANDSTORM,67,FISSURE,73,STONEEDGE,79,HAMMERARM,85,OUTRAGE","Height":"1.5","Weight":"68.0","Kind":"Abundance","Pokedex":"The energy that comes pouring from its tail increases the nutrition in the soil, making crops grow to great size.","FormNames":"Incarnate Forme,Therian Forme","Evolutions":null},{"Name":"Kyurem","InternalName":"KYUREM","Type1":"DRAGON","Type2":"ICE","Moves":"1,ICYWIND,1,DRAGONRAGE,8,IMPRISON,15,ANCIENTPOWER,22,ICEBEAM,29,DRAGONBREATH,36,SLASH,43,SCARYFACE,50,GLACIATE,57,DRAGONPULSE,64,IMPRISON,71,ENDEAVOR,78,BLIZZARD,85,OUTRAGE,92,HYPERVOICE","Height":"3.0","Weight":"325.0","Kind":"Boundary","Pokedex":"It generates a powerful, freezing energy inside itself, but its body became frozen when the energy leaked out.","FormNames":",White Kyurem,Black Kyurem","Evolutions":null},{"Name":"Keldeo","InternalName":"KELDEO","Type1":"WATER","Type2":"FIGHTING","Moves":"1,AQUAJET,1,LEER,7,DOUBLEKICK,13,BUBBLEBEAM,19,TAKEDOWN,25,HELPINGHAND,31,RETALIATE,37,AQUATAIL,43,SACREDSWORD,49,SWORDSDANCE,55,QUICKGUARD,61,WORKUP,67,HYDROPUMP,73,CLOSECOMBAT","Height":"1.4","Weight":"48.5","Kind":"Colt","Pokedex":"It crosses the world, running over the surfaces of oceans and rivers. It appears at scenic waterfronts.","FormNames":"Ordinary Form,Resolute Form","Evolutions":null},{"Name":"Meloetta","InternalName":"MELOETTA","Type1":"NORMAL","Type2":"PSYCHIC","Moves":"1,ROUND,6,QUICKATTACK,11,CONFUSION,16,SING,21,TEETERDANCE,26,ACROBATICS,31,PSYBEAM,36,ECHOEDVOICE,43,UTURN,50,WAKEUPSLAP,57,PSYCHIC,64,HYPERVOICE,71,ROLEPLAY,78,CLOSECOMBAT,85,PERISHSONG","Height":"0.6","Weight":"6.5","Kind":"Melody","Pokedex":"Many famous songs have been inspired by the melodies that Meloetta plays.","FormNames":"Aria Forme,Pirouette Forme","WildItemCommon":"STARPIECE","WildItemUncommon":"STARPIECE","WildItemRare":"STARPIECE","Evolutions":null},{"Name":"Genesect","InternalName":"GENESECT","Type1":"BUG","Type2":"STEEL","Moves":"1,FELLSTINGER,1,TECHNOBLAST,1,QUICKATTACK,1,MAGNETRISE,1,METALCLAW,1,SCREECH,7,FURYCUTTER,11,LOCKON,18,FLAMECHARGE,22,MAGNETBOMB,29,SLASH,33,METALSOUND,40,SIGNALBEAM,44,TRIATTACK,51,XSCISSOR,55,BUGBUZZ,62,SIMPLEBEAM,66,ZAPCANNON,73,HYPERBEAM,77,SELFDESTRUCT","Height":"1.5","Weight":"82.5","Kind":"Paleozoic","Pokedex":"This ancient bug PokÃ©mon was altered by Team Plasma. They upgraded the cannon on its back.","Evolutions":null},{"Name":"Chespin","InternalName":"CHESPIN","Type1":"GRASS","Moves":"1,TACKLE,1,GROWL,5,VINEWHIP,8,ROLLOUT,11,BITE,15,LEECHSEED,18,PINMISSILE,27,TAKEDOWN,32,SEEDBOMB,35,MUDSHOT,39,BULKUP,42,BODYSLAM,45,PAINSPLIT,48,WOODHAMMER","Height":"0.4","Weight":"9.0","Kind":"Spiky Nut","Pokedex":"The quills on its head are usually soft. When it flexes them, the points become so hard and sharp that they can pierce rock.","Evolutions":"QUILLADIN,Level,16"},{"Name":"Quilladin","InternalName":"QUILLADIN","Type1":"GRASS","Moves":"1,TACKLE,1,GROWL,5,VINEWHIP,8,ROLLOUT,11,BITE,15,LEECHSEED,20,PINMISSILE,26,NEEDLEARM,30,TAKEDOWN,35,SEEDBOMB,39,MUDSHOT,44,BULKUP,48,BODYSLAM,52,PAINSPLIT,55,WOODHAMMER","Height":"0.7","Weight":"29.0","Kind":"Spiky Armor","Pokedex":"They strengthen their lower bodies by running into one another. They are very kind and won't start fights.","Evolutions":"CHESNAUGHT,Level,36"},{"Name":"Chesnaught","InternalName":"CHESNAUGHT","Type1":"GRASS","Type2":"FIGHTING","Moves":"1,FEINT,1,HAMMERARM,1,BELLYDRUM,1,TACKLE,1,GROWL,5,VINEWHIP,8,ROLLOUT,11,BITE,15,LEECHSEED,20,PINMISSILE,26,NEEDLEARM,30,TAKEDOWN,35,SEEDBOMB,36,SPIKYSHIELD,41,MUDSHOT,44,BULKUP,48,BODYSLAM,52,PAINSPLIT,55,WOODHAMMER,60,HAMMERARM,70,GIGAIMPACT,75,SPIKYSHIELD","Height":"1.6","Weight":"90.0","Kind":"Spiky Armor","Pokedex":"When it takes a defensive posture with its fists guarding its face, it could withstand a bomb blast.","Evolutions":null},{"Name":"Fennekin","InternalName":"FENNEKIN","Type1":"FIRE","Moves":"1,SCRATCH,1,TAILWHIP,5,EMBER,11,HOWL,14,FLAMECHARGE,17,PSYBEAM,20,FIRESPIN,25,LUCKYCHANT,27,LIGHTSCREEN,31,PSYSHOCK,35,FLAMETHROWER,38,WILLOWISP,41,PSYCHIC,43,SUNNYDAY,46,MAGICROOM,48,FIREBLAST","Height":"0.4","Weight":"9.4","Kind":"Fox","Pokedex":"As it walks, it munches on a twig in place of a snack. It intimidates opponents by puffing hot air out of its ears.","Evolutions":"BRAIXEN,Level,16"},{"Name":"Braixen","InternalName":"BRAIXEN","Type1":"FIRE","Moves":"1,SCRATCH,1,TAILWHIP,5,EMBER,11,HOWL,14,FLAMECHARGE,18,PSYBEAM,22,FIRESPIN,27,LUCKYCHANT,30,LIGHTSCREEN,34,PSYSHOCK,41,FLAMETHROWER,45,WILLOWISP,48,PSYCHIC,51,SUNNYDAY,53,MAGICROOM,55,FIREBLAST","Height":"1.0","Weight":"14.5","Kind":"Fox","Pokedex":"When the twig is plucked from its tail, friction sets the twig alight. The flame is used to send signals to its allies.","Evolutions":"DELPHOX,Level,36"},{"Name":"Delphox","InternalName":"DELPHOX","Type1":"FIRE","Type2":"PSYCHIC","Moves":"1,FUTURESIGHT,1,ROLEPLAY,1,SWITCHEROO,1,SHADOWBALL,1,SCRATCH,1,TAILWHIP,5,EMBER,11,HOWL,14,FLAMECHARGE,18,PSYBEAM,22,FIRESPIN,27,LUCKYCHANT,30,LIGHTSCREEN,34,PSYSHOCK,36,MYSTICALFIRE,42,FLAMETHROWER,47,WILLOWISP,51,PSYCHIC,55,SUNNYDAY,58,MAGICROOM,61,FIREBLAST,69,FUTURESIGHT,75,MYSTICALFIRE","Height":"1.5","Weight":"39.0","Kind":"Fox","Pokedex":"It gazes into the flame at the tip of its branch to achieve a focused state, which allows it to see into the future.","Evolutions":null},{"Name":"Froakie","InternalName":"FROAKIE","Type1":"WATER","Moves":"1,POUND,1,GROWL,5,BUBBLE,8,QUICKATTACK,10,LICK,14,WATERPULSE,18,SMOKESCREEN,21,ROUND,25,FLING,29,SMACKDOWN,35,SUBSTITUTE,39,BOUNCE,43,DOUBLETEAM,48,HYDROPUMP","Height":"0.3","Weight":"7.0","Kind":"Bubble Frog","Pokedex":"It protects its skin by covering its body in delicate bubbles. Beneath its happy-go-lucky air, it keeps a watchful eye on its surroundings.","Evolutions":"FROGADIER,Level,16"},{"Name":"Frogadier","InternalName":"FROGADIER","Type1":"WATER","Moves":"1,POUND,1,GROWL,5,BUBBLE,8,QUICKATTACK,10,LICK,14,WATERPULSE,20,SMOKESCREEN,23,ROUND,28,FLING,33,SMACKDOWN,38,SUBSTITUTE,44,BOUNCE,48,DOUBLETEAM,55,HYDROPUMP","Height":"0.6","Weight":"10.9","Kind":"Bubble Frog","Pokedex":"It can throw bubble-covered pebbles with precise control, hitting empty cans up to a hundred feet away.","Evolutions":"GRENINJA,Level,36"},{"Name":"Greninja","InternalName":"GRENINJA","Type1":"WATER","Type2":"DARK","Moves":"1,NIGHTSLASH,1,ROLEPLAY,1,MATBLOCK,1,POUND,1,GROWL,5,BUBBLE,8,QUICKATTACK,10,LICK,14,WATERPULSE,20,SMOKESCREEN,23,SHADOWSNEAK,28,SPIKES,33,FEINTATTACK,36,WATERSHURIKEN,43,SUBSTITUTE,49,EXTRASENSORY,52,DOUBLETEAM,56,HAZE,60,HYDROPUMP,70,NIGHTSLASH,75,WATERSHURIKEN","Height":"1.5","Weight":"40.0","Kind":"Ninja","Pokedex":"It appears and vanishes with a ninjaâs grace. It toys with its enemies using swift movements, while slicing them with throwing stars of sharpest water.","Evolutions":null},{"Name":"Bunnelby","InternalName":"BUNNELBY","Type1":"NORMAL","HiddenAbility":"HUGEPOWER","Moves":"1,TACKLE,1,AGILITY,1,LEER,7,QUICKATTACK,10,DOUBLESLAP,13,MUDSLAP,15,TAKEDOWN,18,MUDSHOT,20,DOUBLEKICK,25,ODORSLEUTH,29,FLAIL,33,DIG,38,BOUNCE,42,SUPERFANG,47,FACADE,49,EARTHQUAKE","Height":"0.4","Weight":"5.0","Kind":"Digging","Pokedex":"It has ears like shovels. Digging holes strengthens its ears so much that they can sever thick roots effortlessly.","Evolutions":"DIGGERSBY,Level,20"},{"Name":"Diggersby","InternalName":"DIGGERSBY","Type1":"NORMAL","Type2":"GROUND","HiddenAbility":"HUGEPOWER","Moves":"1,HAMMERARM,1,ROTOTILLER,1,BULLDOZE,1,SWORDSDANCE,1,TACKLE,1,AGILITY,1,LEER,7,QUICKATTACK,13,MUDSLAP,15,TAKEDOWN,18,MUDSHOT,20,DOUBLEKICK,26,ODORSLEUTH,31,FLAIL,37,DIG,42,BOUNCE,48,SUPERFANG,53,FACADE,57,EARTHQUAKE,60,HAMMERARM","Height":"1.0","Weight":"42.4","Kind":"Digging","Pokedex":"As powerful as an excavator, its ears can reduce dense bedrock to rubble. When itâs finished digging, it lounges lazily.","Evolutions":null},{"Name":"Fletchling","InternalName":"FLETCHLING","Type1":"NORMAL","Type2":"FLYING","HiddenAbility":"GALEWINGS","Moves":"1,TACKLE,1,GROWL,6,QUICKATTACK,10,PECK,13,AGILITY,16,FLAIL,21,ROOST,25,RAZORWIND,29,NATURALGIFT,34,FLAMECHARGE,39,ACROBATICS,41,MEFIRST,45,TAILWIND,48,STEELWING","Height":"0.3","Weight":"1.7","Kind":"Tiny Robin","Pokedex":"These friendly Pokemon send signals to one another with beautiful chirps and tail-feather movements.","Evolutions":"FLETCHINDER,Level,17"},{"Name":"Fletchinder","InternalName":"FLETCHINDER","Type1":"FIRE","Type2":"FLYING","HiddenAbility":"GALEWINGS","Moves":"1,TACKLE,1,GROWL,6,QUICKATTACK,10,PECK,13,AGILITY,16,FLAIL,17,EMBER,25,ROOST,27,RAZORWIND,31,NATURALGIFT,38,FLAMECHARGE,42,ACROBATICS,46,MEFIRST,51,TAILWIND,55,STEELWING","Height":"0.7","Weight":"16.0","Kind":"Ember","Pokedex":"The hotter the flame sac on its belly, the faster it can fly, but it takes some time to get the fire going.","Evolutions":null},{"Name":"Talonflame","InternalName":"TALONFLAME","Type1":"FIRE","Type2":"FLYING","HiddenAbility":"GALEWINGS","Moves":"1,BRAVEBIRD,1,FLAREBLITZ,1,TACKLE,1,GROWL,6,QUICKATTACK,10,PECK,13,AGILITY,16,FLAIL,17,EMBER,25,ROOST,27,RAZORWIND,31,NATURALGIFT,39,FLAMECHARGE,44,ACROBATICS,49,MEFIRST,55,TAILWIND,60,STEELWING,64,BRAVEBIRD","Height":"1.2","Weight":"24.5","Kind":"Scorching","Pokedex":"In the fever of an exciting battle, it showers embers from the gaps between its feathers and takes to the air.","Evolutions":null},{"Name":"Scatterbug","InternalName":"SCATTERBUG","Type1":"BUG","HiddenAbility":"FRIENDGUARD","Moves":"1,TACKLE,1,STRINGSHOT,6,STUNSPORE,15,BUGBITE","Height":"0.3","Weight":"2.5","Kind":"Scatterdust","Pokedex":"The powder that covers its body regulates its temperature, so it can live in any region or climate.","Evolutions":"SPEWPA,Level,9"},{"Name":"Spewpa","InternalName":"SPEWPA","Type1":"BUG","Moves":"1,HARDEN,9,PROTECT","Height":"0.3","Weight":"8.4","Kind":"Scatterdust","Pokedex":"It lives hidden within thicket shadows. When predators attack, it quickly bristles the fur covering its body in an effort to threaten them.","Evolutions":"VIVILLON,Level,12"},{"Name":"Vivillon","InternalName":"VIVILLON","Type1":"BUG","Type2":"FLYING","HiddenAbility":"FRIENDGUARD","Moves":"1,POWDER,1,SLEEPPOWDER,1,POISONPOWDER,1,STUNSPORE,1,GUST,1,LIGHTSCREEN,12,STRUGGLEBUG,17,PSYBEAM,21,SUPERSONIC,25,DRAININGKISS,31,AROMATHERAPY,35,BUGBUZZ,41,SAFEGUARD,45,QUIVERDANCE,50,HURRICANE,55,POWDER","Height":"1.2","Weight":"17.0","Kind":"Scale","Pokedex":"Vivillon with many different patterns are found all over the world. These patterns are affected by the climate of their habitat.","Evolutions":null},{"Name":"Litleo","InternalName":"LITLEO","Type1":"FIRE","Type2":"NORMAL","HiddenAbility":"MOXIE","Moves":"1,TACKLE,1,LEER,5,EMBER,8,WORKUP,11,HEADBUTT,15,NOBLEROAR,20,TAKEDOWN,23,FIREFANG,28,ENDEAVOR,33,ECHOEDVOICE,36,FLAMETHROWER,39,CRUNCH,43,HYPERVOICE,46,INCINERATE,50,OVERHEAT","Height":"0.6","Weight":"13.5","Kind":"Lion Cub","Pokedex":"They set off on their own from their pride and live by themselves to become stronger. These hot-blooded PokÃ©mon are quick to fight.","Evolutions":"PYROAR,Level,35"},{"Name":"Pyroar","InternalName":"PYROAR","Type1":"FIRE","Type2":"NORMAL","HiddenAbility":"MOXIE","Moves":"1,HYPERBEAM,1,TACKLE,1,LEER,5,EMBER,8,WORKUP,11,HEADBUTT,15,NOBLEROAR,20,TAKEDOWN,23,FIREFANG,28,ENDEAVOR,33,ECHOEDVOICE,38,FLAMETHROWER,42,CRUNCH,48,HYPERVOICE,51,INCINERATE,57,OVERHEAT","Height":"1.5","Weight":"81.5","Kind":"Royal","Pokedex":"With fiery breath of more than 10,000 degrees Fahrenheit, they viciously threaten any challenger. The females protect the prideâs cubs.","Evolutions":null},{"Name":"Flabebe","InternalName":"FLABEBE","Type1":"FAIRY","Moves":"1,TACKLE,1,VINEWHIP,6,FAIRYWIND,10,LUCKYCHANT,15,RAZORLEAF,20,WISH,22,MAGICALLEAF,24,GRASSYTERRAIN,28,PETALBLIZZARD,33,AROMATHERAPY,37,MISTYTERRAIN,41,MOONBLAST,45,PETALDANCE,48,SOLARBEAM","Height":"0.1","Weight":"0.1","Kind":"Single Bloom","Pokedex":"When it finds a flower it likes, it dwells on that flower its whole life long. It floats in the windâs embrace with an untroubled heart.","Evolutions":"FLOETTE,Level,19"},{"Name":"Floette","InternalName":"FLOETTE","Type1":"FAIRY","Moves":"1,TACKLE,1,VINEWHIP,6,FAIRYWIND,10,LUCKYCHANT,15,RAZORLEAF,20,WISH,25,MAGICALLEAF,27,GRASSYTERRAIN,33,PETALBLIZZARD,38,AROMATHERAPY,43,MISTYTERRAIN,46,MOONBLAST,51,PETALDANCE,58,SOLARBEAM","Height":"0.2","Weight":"0.9","Kind":"Single Bloom","Pokedex":"It flutters around fields of flowers and cares for flowers that are starting to wilt. It draws out the power of flowers to battle.","Evolutions":"FLORGES,Item,SHINYSTONE"},{"Name":"Florges","InternalName":"FLORGES","Type1":"FAIRY","Moves":"1,DISARMINGVOICE,1,LUCKYCHANT,1,WISH,1,MAGICALLEAF,1,FLOWERSHIELD,1,GRASSKNOT,1,GRASSYTERRAIN,1,PETALBLIZZARD,1,MISTYTERRAIN,1,MOONBLAST,1,PETALDANCE,1,AROMATHERAPY","Height":"1.1","Weight":"10.0","Kind":"Garden","Pokedex":"It claims exquisite flower gardens as its territory, and it obtains power from basking in the energy emitted by flowering plants.","Evolutions":null},{"Name":"Skiddo","InternalName":"SKIDDO","Type1":"GRASS","Moves":"1,TACKLE,1,GROWTH,7,VINEWHIP,9,TAILWHIP,12,LEECHSEED,13,RAZORLEAF,16,WORRYSEED,20,SYNTHESIS,22,TAKEDOWN,26,BULLDOZE,30,SEEDBOMB,34,BULKUP,38,DOUBLEEDGE,42,HORNLEECH,45,LEAFBLADE,50,MILKDRINK","Height":"0.9","Weight":"31.0","Kind":"Mount","Pokedex":"Thought to be one of the first Pokemon to live in harmony with humans, it has a placid disposition.","Evolutions":"GOGOAT,Level,32"},{"Name":"Gogoat","InternalName":"GOGOAT","Type1":"GRASS","Moves":"1,AERIALACE,1,TACKLE,1,GROWTH,7,VINEWHIP,9,TAILWHIP,12,LEECHSEED,13,RAZORLEAF,16,WORRYSEED,20,SYNTHESIS,22,TAKEDOWN,26,BULLDOZE,30,SEEDBOMB,34,BULKUP,40,DOUBLEEDGE,47,HORNLEECH,55,LEAFBLADE,58,MILKDRINK,60,EARTHQUAKE,65,AERIALACE","Height":"1.7","Weight":"91.0","Kind":"Mount","Pokedex":"They inhabit mountainous regions. The leader of the herd is decided by a battle of clashing horns.","Evolutions":null},{"Name":"Pancham","InternalName":"PANCHAM","Type1":"FIGHTING","HiddenAbility":"SCRAPPY","Moves":"1,TACKLE,1,LEER,7,ARMTHRUST,10,WORKUP,12,KARATECHOP,15,COMETPUNCH,20,SLASH,25,CIRCLETHROW,27,VITALTHROW,33,BODYSLAM,39,CRUNCH,42,ENTRAINMENT,45,PARTINGSHOT,48,SKYUPPERCUT","Height":"0.6","Weight":"8.0","Kind":"Playful","Pokedex":"It does its best to be taken seriously by its enemies, but its glare is not sufficiently intimidating. Chewing on a leaf is its trademark.","Evolutions":"PANGORO,TypeDark,32"},{"Name":"Pangoro","InternalName":"PANGORO","Type1":"FIGHTING","Type2":"DARK","HiddenAbility":"SCRAPPY","Moves":"1,ENTRAINMENT,1,HAMMERARM,1,TACKLE,1,LEER,7,ARMTHRUST,10,WORKUP,12,KARATECHOP,15,COMETPUNCH,20,SLASH,25,CIRCLETHROW,27,VITALTHROW,35,BODYSLAM,42,CRUNCH,45,ENTRAINMENT,48,PARTINGSHOT,52,SKYUPPERCUT,57,HAMMERARM,65,TAUNT,70,LOWSWEEP","Height":"2.1","Weight":"136.0","Kind":"Daunting","Pokedex":"It charges ahead and bashes its opponents like a berserker, uncaring about any hits it might take. Its arms are mighty enough to snap a telephone pole.","Evolutions":null},{"Name":"Furfrou","InternalName":"FURFROU","Type1":"NORMAL","Moves":"1,TACKLE,1,GROWL,5,SANDATTACK,9,BABYDOLLEYES,12,HEADBUTT,15,TAILWHIP,22,BITE,27,ODORSLEUTH,33,RETALIATE,35,TAKEDOWN,38,CHARM,42,SUCKERPUNCH,48,COTTONGUARD","Height":"1.2","Weight":"28.0","Kind":"Poodle","Pokedex":"Historically, in the Kalos region, these Pokemon were the designated guardians of the king.","Evolutions":null},{"Name":"Espurr","InternalName":"ESPURR","Type1":"PSYCHIC","HiddenAbility":"OWNTEMPO","Moves":"1,SCRATCH,1,LEER,5,COVET,9,CONFUSION,13,LIGHTSCREEN,17,PSYBEAM,19,FAKEOUT,22,DISARMINGVOICE,25,PSYSHOCK","Height":"0.3","Weight":"3.5","Kind":"Restraint","Pokedex":"It has enough psychic energy to blast everything within 300 feet of itself, but it has no control over its power.","Evolutions":"MEOWSTIC,Level,25"},{"Name":"Meowstic","InternalName":"MEOWSTIC","Type1":"PSYCHIC","HiddenAbility":"PRANKSTER","Moves":"1,QUICKGUARD,1,MEANLOOK,1,HELPINGHAND,1,SCRATCH,1,LEER,5,COVET,9,CONFUSION,13,LIGHTSCREEN,17,PSYBEAM,19,FAKEOUT,22,DISARMINGVOICE,25,PSYSHOCK,28,CHARM,31,MIRACLEEYE,35,REFLECT,40,PSYCHIC,43,ROLEPLAY,45,IMPRISON,48,SUCKERPUNCH,50,MISTYTERRAIN,53,QUICKGUARD","Height":"0.6","Weight":"8.5","Kind":"Constraint","Pokedex":"When in danger, it raises its ears and releases enough psychic power to grind a 10-ton truck to dust.","FormNames":"Meowstic male,Meowstic female","Evolutions":null},{"Name":"Honedge","InternalName":"HONEDGE","Type1":"STEEL","Type2":"GHOST","Moves":"1,TACKLE,1,SWORDSDANCE,5,FURYCUTTER,8,METALSOUND,13,PURSUIT,18,AUTOTOMIZE,20,SHADOWSNEAK,22,AERIALACE,26,RETALIATE,29,SLASH,32,IRONDEFENSE,35,NIGHTSLASH,39,POWERTRICK,42,IRONHEAD,47,SACREDSWORD","Height":"0.8","Weight":"2.0","Kind":"Sword","Pokedex":"Apparently this Pokemon is born when a departed spirit inhabits a sword. It attaches itself to people and drinks their life force.","Evolutions":"DOUBLADE,Level,35"},{"Name":"Doublade","InternalName":"DOUBLADE","Type1":"STEEL","Type2":"GHOST","Moves":"1,TACKLE,1,SWORDSDANCE,5,FURYCUTTER,8,METALSOUND,13,PURSUIT,18,AUTOTOMIZE,20,SHADOWSNEAK,22,AERIALACE,26,RETALIATE,29,SLASH,32,IRONDEFENSE,36,NIGHTSLASH,41,POWERTRICK,45,IRONHEAD,51,SACREDSWORD","Height":"0.8","Weight":"2.0","Kind":"Sword","Pokedex":"The complex attack patterns of its two swords are unstoppable, even for an opponent greatly accomplished at swordplay.","Evolutions":"AEGISLASH,Item,DUSKSTONE"},{"Name":"Aegislash","InternalName":"AEGISLASH","Type1":"STEEL","Type2":"GHOST","Moves":"1,FURYCUTTER,1,PURSUIT,1,AUTOTOMIZE,1,SHADOWSNEAK,1,SLASH,1,IRONDEFENSE,1,NIGHTSLASH,1,POWERTRICK,1,IRONHEAD,1,HEADSMASH,1,SWORDSDANCE,1,AERIALACE,1,KINGSSHIELD,1,SACREDSWORD","Height":"1.7","Weight":"53.0","Kind":"Royal Sword","Pokedex":"Apparently, it can detect the innate qualities of leadership. According to legend, whoever it recognizes is destined to become king.","FormNames":"Aegislash Attack Stance,Aegislash Defense Stance","Evolutions":null},{"Name":"Spritzee","InternalName":"SPRITZEE","Type1":"FAIRY","Moves":"1,SWEETSCENT,1,FAIRYWIND,6,SWEETKISS,8,ODORSLEUTH,13,ECHOEDVOICE,17,CALMMIND,21,DRAININGKISS,25,AROMATHERAPY,29,ATTRACT,31,MOONBLAST,35,CHARM,38,FLAIL,42,MISTYTERRAIN,44,SKILLSWAP,48,PSYCHIC,50,DISARMINGVOICE","Height":"0.2","Weight":"0.5","Kind":"Perfume","Pokedex":"In the past, rather than using perfume, royal ladies carried a Spritzee that would waft a fragrance they liked.","Evolutions":"AROMATISSE,TradeItem,SACHET"},{"Name":"Aromatisse","InternalName":"AROMATISSE","Type1":"FAIRY","Moves":"1,AROMATICMIST,1,HEALPULSE,1,SWEETSCENT,1,FAIRYWIND,6,SWEETKISS,8,ODORSLEUTH,13,ECHOEDVOICE,17,CALMMIND,21,DRAININGKISS,25,AROMATHERAPY,29,ATTRACT,31,MOONBLAST,35,CHARM,38,FLAIL,42,MISTYTERRAIN,44,SKILLSWAP,48,PSYCHIC,53,DISARMINGVOICE,57,REFLECT,64,PSYCHUP","Height":"0.8","Weight":"15.5","Kind":"Fragrance","Pokedex":"Its scent is so overpowering that, unless a Trainer happens to really enjoy the smell, he or she will have a hard time walking alongside it.","Evolutions":null},{"Name":"Swirlix","InternalName":"SWIRLIX","Type1":"FAIRY","Moves":"1,SWEETSCENT,1,TACKLE,5,FAIRYWIND,8,PLAYNICE,10,FAKETEARS,13,ROUND,17,COTTONSPORE,21,ENDEAVOR,26,AROMATHERAPY,31,DRAININGKISS,36,ENERGYBALL,41,COTTONGUARD,45,WISH,49,PLAYROUGH,58,LIGHTSCREEN,67,SAFEGUARD","Height":"0.4","Weight":"3.5","Kind":"Cotton Candy","Pokedex":"To entangle its opponents in battle, it extrudes white threads as sweet and as sticky as cotton candy.","Evolutions":"SLURPUFF,TradeItem,WHIPPEDDREAM"},{"Name":"Slurpuff","InternalName":"SLURPUFF","Type1":"FAIRY","Moves":"1,SWEETSCENT,1,TACKLE,5,FAIRYWIND,8,PLAYNICE,10,FAKETEARS,13,ROUND,17,COTTONSPORE,21,ENDEAVOR,26,AROMATHERAPY,31,DRAININGKISS,36,ENERGYBALL,41,COTTONGUARD,45,WISH,49,PLAYROUGH,58,LIGHTSCREEN,67,SAFEGUARD","Height":"0.8","Weight":"5.0","Kind":"Meringue","Pokedex":"Its sense of smell is 100 million times better than a humanâs, so even the faintest scent tells it about everything in the area. Itâs like it can see with its nose!","Evolutions":null},{"Name":"Inkay","InternalName":"INKAY","Type1":"DARK","Type2":"PSYCHIC","HiddenAbility":"INFILTRATOR","Moves":"1,TACKLE,1,PECK,1,CONSTRICT,4,REFLECT,8,FOULPLAY,12,SWAGGER,13,PSYWAVE,15,TOPSYTURVY,18,HYPNOSIS,21,PSYBEAM,23,SWITCHEROO,27,PAYBACK,31,LIGHTSCREEN,35,PLUCK,39,PSYCHOCUT,43,SLASH,46,NIGHTSLASH,48,SUPERPOWER","Height":"0.4","Weight":"3.5","Kind":"Revolving","Pokedex":"It flashes the light-emitting spots on its body, which drains its opponentâs will to fight. It takes the opportunity to scuttle away and hide.","Evolutions":"MALAMAR,UpsideDownLevel,30"},{"Name":"Malamar","InternalName":"MALAMAR","Type1":"DARK","Type2":"PSYCHIC","HiddenAbility":"INFILTRATOR","Moves":"1,SUPERPOWER,1,REVERSAL,1,TACKLE,1,PECK,1,CONSTRICT,4,REFLECT,8,FOULPLAY,12,SWAGGER,13,PSYWAVE,15,TOPSYTURVY,18,HYPNOSIS,21,PSYBEAM,23,SWITCHEROO,27,PAYBACK,31,LIGHTSCREEN,35,PLUCK,39,PSYCHOCUT,43,SLASH,46,NIGHTSLASH,48,SUPERPOWER","Height":"1.5","Weight":"47.0","Kind":"Overturning","Pokedex":"It lures its prey close with hypnotic motions, then wraps its tentacles around it before finishing it off with digestive fluids.","Evolutions":null},{"Name":"Binacle","InternalName":"BINACLE","Type1":"ROCK","Type2":"WATER","HiddenAbility":"PICKPOCKET","Moves":"1,SHELLSMASH,1,SCRATCH,1,SANDATTACK,4,WATERGUN,7,WITHDRAW,10,FURYSWIPES,13,SLASH,18,MUDSLAP,20,CLAMP,24,ROCKPOLISH,28,ANCIENTPOWER,32,HONECLAWS,37,FURYCUTTER,41,NIGHTSLASH,45,RAZORSHELL,49,CROSSCHOP","Height":"0.5","Weight":"31.0","Kind":"Two-Handed","Pokedex":"Two Binacle live together on one rock. When they fight, one of them will move to a different rock.","Evolutions":"BARBARACLE,Level,39"},{"Name":"Barbaracle","InternalName":"BARBARACLE","Type1":"ROCK","Type2":"WATER","HiddenAbility":"PICKPOCKET","Moves":"1,STONEEDGE,1,SKULLBASH,1,SHELLSMASH,1,SCRATCH,1,SANDATTACK,4,WATERGUN,7,WITHDRAW,10,FURYSWIPES,13,SLASH,18,MUDSLAP,20,CLAMP,24,ROCKPOLISH,28,ANCIENTPOWER,32,HONECLAWS,37,FURYCUTTER,44,NIGHTSLASH,48,RAZORSHELL,55,CROSSCHOP,60,STONEEDGE,65,SKULLBASH","Height":"1.3","Weight":"96.0","Kind":"Collective","Pokedex":"Barbaracle's legs and hands have minds of their own, and they will move independently. But they usually follow the head's orders.","Evolutions":null},{"Name":"Skrelp","InternalName":"SKRELP","Type1":"POISON","Type2":"WATER","HiddenAbility":"ADAPTABILITY","Moves":"1,TACKLE,1,SMOKESCREEN,1,WATERGUN,5,FEINTATTACK,9,TAILWHIP,12,BUBBLE,15,ACID,19,CAMOUFLAGE,23,POISONTAIL,25,WATERPULSE,28,DOUBLETEAM,32,TOXIC,35,AQUATAIL,38,SLUDGEBOMB,42,HYDROPUMP,49,DRAGONPULSE","Height":"0.5","Weight":"7.3","Kind":"Mock Kelp","Pokedex":"Camouflaged as rotten kelp, they spray liquid poison on prey that approaches unawares and then finish it off.","Evolutions":"DRAGALGE,Level,48"},{"Name":"Dragalge","InternalName":"DRAGALGE","Type1":"POISON","Type2":"DRAGON","HiddenAbility":"ADAPTABILITY","Moves":"1,DRAGONTAIL,1,TWISTER,1,TACKLE,1,SMOKESCREEN,1,WATERGUN,5,FEINTATTACK,9,TAILWHIP,12,BUBBLE,15,ACID,19,CAMOUFLAGE,23,POISONTAIL,25,WATERPULSE,28,DOUBLETEAM,32,TOXIC,35,AQUATAIL,38,SLUDGEBOMB,42,HYDROPUMP,53,DRAGONPULSE,59,DRAGONTAIL,67,TWISTER","Height":"1.8","Weight":"81.5","Kind":"Mock Kelp","Pokedex":"Tales are told of ships that wander into seas where Dragalge live, never to return.","Evolutions":null},{"Name":"Clauncher","InternalName":"CLAUNCHER","Type1":"WATER","Moves":"1,SPLASH,1,WATERGUN,7,WATERSPORT,9,VICEGRIP,12,BUBBLE,16,FLAIL,20,BUBBLEBEAM,25,SWORDSDANCE,30,CRABHAMMER,34,WATERPULSE,39,SMACKDOWN,43,AQUAJET,48,MUDDYWATER","Height":"0.5","Weight":"8.3","Kind":"Water Gun","Pokedex":"They knock down flying prey by firing compressed water from their massive claws like shooting a pistol.","Evolutions":"CLAWITZER,Level,37"},{"Name":"Clawitzer","InternalName":"CLAWITZER","Type1":"WATER","Moves":"1,HEALPULSE,1,DARKPULSE,1,DRAGONPULSE,1,AURASPHERE,1,SPLASH,1,WATERGUN,7,WATERSPORT,9,VICEGRIP,12,BUBBLE,16,FLAIL,20,BUBBLEBEAM,25,SWORDSDANCE,30,CRABHAMMER,34,WATERPULSE,42,SMACKDOWN,47,AQUAJET,53,MUDDYWATER,57,DARKPULSE,63,DRAGONPULSE,67,AURASPHERE","Height":"1.3","Weight":"35.3","Kind":"Howitzer","Pokedex":"Their enormous claws launch cannonballs of water powerful enough to pierce tanker hulls.","Evolutions":null},{"Name":"Helioptile","InternalName":"HELIOPTILE","Type1":"ELECTRIC","Type2":"NORMAL","HiddenAbility":"SOLARPOWER","Moves":"1,POUND,1,TAILWHIP,6,THUNDERSHOCK,11,CHARGE,13,MUDSLAP,17,QUICKATTACK,22,RAZORWIND,25,PARABOLICCHARGE,31,THUNDERWAVE,35,BULLDOZE,40,VOLTSWITCH,45,ELECTRIFY,49,THUNDERBOLT","Height":"0.5","Weight":"6.0","Kind":"Generator","Pokedex":"They make their home in desserts. They can generate their energy from basking in the sun, so eating food is not a requirement.","Evolutions":"HELIOLISK,Item,SUNSTONE"},{"Name":"Heliolisk","InternalName":"HELIOLISK","Type1":"ELECTRIC","Type2":"NORMAL","HiddenAbility":"SOLARPOWER","Moves":"1,EERIEIMPULSE,1,ELECTRIFY,1,RAZORWIND,1,QUICKATTACK,1,THUNDER,1,CHARGE,1,PARABOLICCHARGE","Height":"1.0","Weight":"21.0","Kind":"Generator","Pokedex":"They flare their frills and generate energy. A single Heliolisk can generate sufficiant electricity to power a skyscraper.","Evolutions":null},{"Name":"Tyrunt","InternalName":"TYRUNT","Type1":"ROCK","Type2":"DRAGON","Moves":"1,TAILWHIP,1,TACKLE,6,ROAR,10,STOMP,12,BIDE,15,STEALTHROCK,17,BITE,20,CHARM,26,ANCIENTPOWER,30,DRAGONTAIL,34,CRUNCH,37,DRAGONCLAW,40,THRASH,44,EARTHQUAKE,49,HORNDRILL","Height":"0.8","Weight":"26.0","Kind":"Royal Heir","Pokedex":"Its immense jaws have enough destructive force that it can chew up an automobile It lived 100 million years ago.","Evolutions":"TYRANTRUM,LevelDay,39"},{"Name":"Tyrantrum","InternalName":"TYRANTRUM","Type1":"ROCK","Type2":"DRAGON","Moves":"1,HEADSMASH,1,TAILWHIP,1,TACKLE,6,ROAR,10,STOMP,12,BIDE,15,STEALTHROCK,17,BITE,20,CHARM,26,ANCIENTPOWER,30,DRAGONTAIL,34,CRUNCH,37,DRAGONCLAW,42,THRASH,47,EARTHQUAKE,53,HORNDRILL,58,HEADSMASH,68,ROCKSLIDE,75,GIGAIMPACT","Height":"2.5","Weight":"270.0","Kind":"Despot","Pokedex":"Nothing could stop this Pokemon 100 years ago, so it behaved like a king.","Evolutions":null},{"Name":"Amaura","InternalName":"AMAURA","Type1":"ROCK","Type2":"ICE","Moves":"1,GROWL,1,POWDERSNOW,5,THUNDERWAVE,10,ROCKTHROW,13,ICYWIND,15,TAKEDOWN,18,MIST,20,AURORABEAM,26,ANCIENTPOWER,30,ROUND,34,AVALANCHE,38,HAIL,41,NATUREPOWER,44,ENCORE,47,LIGHTSCREEN,50,ICEBEAM,57,HYPERBEAM,65,BLIZZARD","Height":"1.3","Weight":"25.2","Kind":"Tundra","Pokedex":"This ancient Pokemon was restored from part of its body that had been frozen in ice for over 100 million years.","Evolutions":"AURORUS,LevelNight,39"},{"Name":"Aurorus","InternalName":"AURORUS","Type1":"ROCK","Type2":"ICE","Moves":"1,FREEZEDRY,1,GROWL,1,POWDERSNOW,5,THUNDERWAVE,10,ROCKTHROW,13,ICYWIND,15,TAKEDOWN,18,MIST,20,AURORABEAM,26,ANCIENTPOWER,30,ROUND,34,AVALANCHE,38,HAIL,43,NATUREPOWER,46,ENCORE,50,LIGHTSCREEN,56,ICEBEAM,63,HYPERBEAM,74,BLIZZARD,77,FREEZEDRY","Height":"2.7","Weight":"255.0","Kind":"Tundra","Pokedex":"The diamond-shaped crystals on its body expel air as cold as -240 degrees Fahrenheit, surrounding its enemies and encasing them in ice.","Evolutions":null},{"Name":"Sylveon","InternalName":"SYLVEON","Type1":"FAIRY","HiddenAbility":"PIXILATE","Moves":"1,DISARMINGVOICE,1,TAILWHIP,1,TACKLE,1,HELPINGHAND,5,SANDATTACK,9,FAIRYWIND,13,QUICKATTACK,17,SWIFT,20,DRAININGKISS,25,SKILLSWAP,29,MISTYTERRAIN,33,LIGHTSCREEN,37,MOONBLAST,41,LASTRESORT,45,PSYCHUP","Height":"1.0","Weight":"23.5","Kind":"Intertwining","Pokedex":"It sends a soothing aura from its ribbonlike feelers to calm fights.","Evolutions":null},{"Name":"Hawlucha","InternalName":"HAWLUCHA","Type1":"FIGHTING","Type2":"FLYING","HiddenAbility":"MOLDBREAKER","Moves":"1,DETECT,1,TACKLE,1,HONECLAWS,4,KARATECHOP,8,WINGATTACK,12,ROOST,16,AERIALACE,20,ENCORE,24,FLING,28,FLYINGPRESS,32,BOUNCE,36,ENDEAVOR,40,FEATHERDANCE,44,HIJUMPKICK,48,SKYATTACK,55,SKYDROP,60,SWORDSDANCE","Height":"0.8","Weight":"21.5","Kind":"Wrestling","Pokedex":"Although its body is small, its proficient fighting skills enable it to keep up with big bruisers like Machamp and Hariyama.","Evolutions":null},{"Name":"Dedenne","InternalName":"DEDENNE","Type1":"ELECTRIC","Type2":"FAIRY","HiddenAbility":"PLUS","Moves":"1,TACKLE,1,TAILWHIP,7,THUNDERSHOCK,11,CHARGE,14,CHARM,17,PARABOLICCHARGE,20,NUZZLE,23,THUNDERWAVE,26,VOLTSWITCH,30,REST,31,SNORE,34,CHARGEBEAM,39,ENTRAINMENT,42,PLAYROUGH,45,THUNDER,50,DISCHARGE","Height":"0.2","Weight":"2.2","Kind":"Antenna","Pokedex":"It uses its tail to absorb electricity from power plants or from outlets in houses, and then it fires the electricity from its whiskers.","Evolutions":null},{"Name":"Carbink","InternalName":"CARBINK","Type1":"ROCK","Type2":"FAIRY","Moves":"1,TACKLE,1,HARDEN,5,ROCKTHROW,8,SHARPEN,12,SMACKDOWN,18,REFLECT,21,STEALTHROCK,27,GUARDSPLIT,31,ANCIENTPOWER,35,FLAIL,40,SKILLSWAP,46,POWERGEM,49,STONEEDGE,50,MOONBLAST,60,LIGHTSCREEN,70,SAFEGUARD","Height":"0.3","Weight":"5.7","Kind":"Jewel","Pokedex":"It has slept underground for hundreds of millions of years since its birth. It's occasionally found during the excavation of caves.","Evolutions":null},{"Name":"Goomy","InternalName":"GOOMY","Type1":"DRAGON","HiddenAbility":"GOOEY","Moves":"1,TACKLE,1,BUBBLE,5,ABSORB,9,PROTECT,13,BIDE,18,DRAGONBREATH,25,RAINDANCE,28,FLAIL,32,BODYSLAM,38,MUDDYWATER,42,DRAGONPULSE","Height":"0.3","Weight":"2.8","Kind":"Soft Tissue","Pokedex":"The weakest Dragon-type PokÃ©mon, it lives in damp, shady places, so its body doesn't dry out.","Evolutions":"SLIGGOO,Level,40"},{"Name":"Sliggoo","InternalName":"SLIGGOO","Type1":"DRAGON","HiddenAbility":"GOOEY","Moves":"1,TACKLE,1,BUBBLE,5,ABSORB,9,PROTECT,13,BIDE,18,DRAGONBREATH,25,RAINDANCE,28,FLAIL,32,BODYSLAM,38,MUDDYWATER,47,DRAGONPULSE","Height":"0.8","Weight":"17.5","Kind":"Soft Tissue","Pokedex":"It drives away opponents by excreting a sticky liquid that can dissolve anything. Its eyes devolved, so it can't see anything.","Evolutions":"GOODRA,LevelRain,50"},{"Name":"Goodra","InternalName":"GOODRA","Type1":"DRAGON","HiddenAbility":"GOOEY","Moves":"1,OUTRAGE,1,FEINT,1,TACKLE,1,BUBBLE,5,ABSORB,9,PROTECT,13,BIDE,18,DRAGONBREATH,25,RAINDANCE,28,FLAIL,32,BODYSLAM,38,MUDDYWATER,47,DRAGONPULSE,50,AQUATAIL,55,POWERWHIP,63,OUTRAGE","Height":"2.0","Weight":"150.5","Kind":"Dragon","Pokedex":"This very friendly Dragon-type Pokemon will hug its beloved Trainer, leaving that Trainer covered in sticky slime.","Evolutions":null},{"Name":"Klefki","InternalName":"KLEFKI","Type1":"STEEL","Type2":"FAIRY","Moves":"1,FAIRYLOCK,1,TACKLE,5,FAIRYWIND,8,ASTONISH,12,METALSOUND,15,SPIKES,18,DRAININGKISS,23,CRAFTYSHIELD,27,FOULPLAY,32,TORMENT,34,MIRRORSHOT,36,IMPRISON,40,RECYCLE,43,PLAYROUGH,44,MAGICROOM,50,HEALBLOCK","Height":"0.2","Weight":"3.0","Kind":"Key Ring","Pokedex":"It never lets go of a key that it likes, so people give it the keys to vaults and safes as a way to prevent crime.","Evolutions":null},{"Name":"Phantump","InternalName":"PHANTUMP","Type1":"GHOST","Type2":"GRASS","HiddenAbility":"HARVEST","Moves":"1,TACKLE,1,CONFUSERAY,5,ASTONISH,8,GROWTH,13,INGRAIN,19,FEINTATTACK,23,LEECHSEED,28,CURSE,31,WILLOWISP,35,FORESTSCURSE,39,DESTINYBOND,45,PHANTOMFORCE,49,WOODHAMMER,54,HORNLEECH","Height":"0.4","Weight":"7.0","Kind":"Stump","Pokedex":"According to old tales, these PokÃ©mon are stumps possessed by the spirits of children who died while lost in the forest.","Evolutions":"TREVENANT,Trade,"},{"Name":"Trevenant","InternalName":"TREVENANT","Type1":"GHOST","Type2":"GRASS","HiddenAbility":"HARVEST","Moves":"1,HORNLEECH,1,TACKLE,1,CONFUSERAY,5,ASTONISH,8,GROWTH,13,INGRAIN,19,FEINTATTACK,23,LEECHSEED,28,CURSE,31,WILLOWISP,35,FORESTSCURSE,39,DESTINYBOND,45,PHANTOMFORCE,49,WOODHAMMER,55,SHADOWCLAW,62,HORNLEECH","Height":"1.5","Weight":"71.0","Kind":"Elder Tree","Pokedex":"It can control trees at will. It will trap people who harm the forest, so they can never leave.","Evolutions":null},{"Name":"Pumpkaboo","InternalName":"PUMPKABOO","Type1":"GHOST","Type2":"GRASS","HiddenAbility":"INSOMNIA","Moves":"1,TRICK,1,ASTONISH,1,CONFUSERAY,4,SCARYFACE,6,TRICKORTREAT,11,WORRYSEED,16,RAZORLEAF,20,LEECHSEED,23,TRICKORTREAT,26,BULLETSEED,30,SHADOWSNEAK,36,SHADOWBALL,40,TRICKORTREAT,42,PAINSPLIT,48,SEEDBOMB","Height":"0.8","Weight":"15.0","Kind":"Pumpkin","Pokedex":"The pumpkin body is inhabited by a spirit trapped in this world. As the sun sets, it becomes restless and active.","Evolutions":"GOURGEIST,Trade,"},{"Name":"Gourgeist","InternalName":"GOURGEIST","Type1":"GHOST","Type2":"GRASS","HiddenAbility":"INSOMNIA","Moves":"1,EXPLOSION,1,PHANTOMFORCE,1,TRICK,1,ASTONISH,1,CONFUSERAY,4,SCARYFACE,6,TRICKORTREAT,11,WORRYSEED,16,RAZORLEAF,20,LEECHSEED,23,TRICKORTREAT,26,BULLETSEED,30,SHADOWSNEAK,36,SHADOWBALL,40,TRICKORTREAT,42,PAINSPLIT,48,SEEDBOMB,57,PHANTOMFORCE,63,TRICKORTREAT,70,SHADOWBALL,75,EXPLOSION","Height":"1.7","Weight":"39.0","Kind":"Pumpkin","Pokedex":"It enwraps its prey in its hairlike arms. It sings joyfully as it observes the suffering of its prey.","Evolutions":null},{"Name":"Bergmite","InternalName":"BERGMITE","Type1":"ICE","HiddenAbility":"STURDY","Moves":"1,TACKLE,1,BITE,1,HARDEN,5,POWDERSNOW,10,ICYWIND,15,TAKEDOWN,20,SHARPEN,22,CURSE,26,ICEFANG,30,ICEBALL,35,RAPIDSPIN,39,AVALANCHE,43,BLIZZARD,47,RECOVER,49,DOUBLEEDGE","Height":"1.0","Weight":"99.5","Kind":"Ice Chunk","Pokedex":"It blocks opponents' attacks with the ice that shields its body. It uses cold air to repair any cracks with new ice.","Evolutions":"AVALUGG,Level,37"},{"Name":"Avalugg","InternalName":"AVALUGG","Type1":"ICE","HiddenAbility":"STURDY","Moves":"1,IRONDEFENSE,1,CRUNCH,1,SKULLBASH,1,TACKLE,1,BITE,1,HARDEN,5,POWDERSNOW,10,ICYWIND,15,TAKEDOWN,20,SHARPEN,22,CURSE,26,ICEFANG,30,ICEBALL,35,RAPIDSPIN,42,AVALANCHE,46,BLIZZARD,51,RECOVER,56,DOUBLEEDGE,60,SKULLBASH,65,CRUNCH","Height":"2.0","Weight":"505.0","Kind":"Iceberg","Pokedex":"Its ice-covered body is as hard as steel. Its cumbersome frame crushes anything that stands in its way.","Evolutions":null},{"Name":"Noibat","InternalName":"NOIBAT","Type1":"FLYING","Type2":"DRAGON","HiddenAbility":"TELEPATHY","Moves":"1,SCREECH,1,SUPERSONIC,1,TACKLE,5,LEECHLIFE,11,GUST,13,BITE,16,WINGATTACK,18,AGILITY,23,AIRCUTTER,27,ROOST,31,RAZORWIND,35,TAILWIND,40,WHIRLWIND,43,SUPERFANG,48,AIRSLASH,58,HURRICANE","Height":"0.5","Weight":"8.0","Kind":"Sound Wave","Pokedex":"They live in pitch black caves. Their enormous ears can emit ultrasonic waves of 200,000 hertz.","Evolutions":"NOIVERN,Level,48"},{"Name":"Noivern","InternalName":"NOIVERN","Type1":"FLYING","Type2":"DRAGON","HiddenAbility":"TELEPATHY","Moves":"1,MOONLIGHT,1,BOOMBURST,1,DRAGONPULSE,1,HURRICANE,1,SCREECH,1,SUPERSONIC,1,TACKLE,5,LEECHLIFE,11,GUST,13,BITE,16,WINGATTACK,18,AGILITY,23,AIRCUTTER,27,ROOST,31,RAZORWIND,35,TAILWIND,40,WHIRLWIND,43,SUPERFANG,53,AIRSLASH,62,HURRICANE,70,DRAGONPULSE,75,BOOMBURST","Height":"1.5","Weight":"85.0","Kind":"Sound Wave","Pokedex":"The ultrasonic waves it emits from its ears can reduce a large boulder to pebbles. It swoops out of the dark to attack.","Evolutions":null},{"Name":"Xerneas","InternalName":"XERNEAS","Type1":"FAIRY","Moves":"1,HEALPULSE,1,AROMATHERAPY,1,INGRAIN,1,TAKEDOWN,5,LIGHTSCREEN,10,AURORABEAM,18,GRAVITY,26,GEOMANCY,35,MOONBLAST,44,MEGAHORN,51,NIGHTSLASH,55,HORNLEECH,59,PSYCHUP,63,MISTYTERRAIN,72,NATUREPOWER,80,CLOSECOMBAT,88,GIGAIMPACT,93,OUTRAGE","Height":"3.0","Weight":"215.0","Kind":"Life","Pokedex":"Legends say it can share eternal life. It slept for a thousand years in the form of a tree before its revival.","Evolutions":null},{"Name":"Yveltal","InternalName":"YVELTAL","Type1":"DARK","Type2":"FLYING","Moves":"1,HURRICANE,1,RAZORWIND,1,TAUNT,1,ROOST,5,DOUBLETEAM,10,AIRSLASH,18,SNARL,26,OBLIVIONWING,35,DISABLE,44,DARKPULSE,51,FOULPLAY,55,PHANTOMFORCE,59,PSYCHIC,63,DRAGONRUSH,72,FOCUSBLAST,80,SUCKERPUNCH,88,HYPERBEAM,93,SKYATTACK","Height":"5.8","Weight":"203.0","Kind":"Destruction","Pokedex":"When its life comes to an end, it absorbs the life energy of every living thing and turns into a cocoon once more.","Evolutions":null},{"Name":"Zygarde","InternalName":"ZYGARDE","Type1":"DRAGON","Type2":"GROUND","Moves":"1,GLARE,1,BULLDOZE,1,DRAGONBREATH,1,BITE,5,SAFEGUARD,10,DIG,18,BIND,26,LANDSWRATH,35,SANDSTORM,44,HAZE,51,CRUNCH,55,EARTHQUAKE,59,CAMOUFLAGE,63,DRAGONPULSE,72,DRAGONDANCE,80,COIL,88,EXTREMESPEED,93,OUTRAGE","Height":"5.0","Weight":"305.0","Kind":"Order","Pokedex":"It's hypothesized that it's monitoring those who destroy the ecosystem from deep in the cave where it lives.","Evolutions":null},{"Name":"Diancie","InternalName":"DIANCIE","Type1":"ROCK","Type2":"FAIRY","Moves":"1,TACKLE,1,HARDEN,5,ROCKTHROW,8,SHARPEN,12,SMACKDOWN,18,REFLECT,21,STEALTHROCK,27,GUARDSPLIT,31,ANCIENTPOWER,35,FLAIL,40,SKILLSWAP,46,TRICKROOM,49,STONEEDGE,50,MOONBLAST,50,DIAMONDSTORM,60,LIGHTSCREEN,70,SAFEGUARD","Height":"1.1","Weight":"27.8","Kind":"Jewel","Pokedex":"A sudden transformation of Carbink, its pink, glimmering body is said to be the loveliest sight in the whole world.","Evolutions":null},{"Name":"Hoopa","InternalName":"HOOPA","Type1":"PSYCHIC","Type2":"GHOST","Moves":"1,HYPERSPACEHOLE,1,TRICK,1,DESTINYBOND,1,ALLYSWITCH,1,CONFUSION,6,ASTONISH,10,MAGICCOAT,15,LIGHTSCREEN,19,PSYBEAM,25,SKILLSWAP,29,POWERSPLIT,29,GUARDSPLIT,35,PHANTOMFORCE,46,ZENHEADBUTT,50,WONDERROOM,50,TRICKROOM,55,SHADOWBALL,68,NASTYPLOT,75,PSYCHIC,85,HYPERSPACEHOLE","Height":"0.5","Weight":"9.0","Kind":"Mischief","Pokedex":"It gathers things it likes and pushes them through its loop to teleport them to a secret place.","Evolutions":null},{"Name":"Volcanion","InternalName":"VOLCANION","Type1":"FIRE","Type2":"WATER","Moves":"1,STEAMERUPTION,1,FLAREBLITZ,1,TAKEDOWN,8,MIST,11,HAZE,15,FLAMECHARGE,21,WATERPULSE,28,STOMP,32,SCALD,40,WEATHERBALL,46,BODYSLAM,50,HYDROPUMP,58,FLAREBLITZ,65,OVERHEAT,76,EXPLOSION,85,STEAMERUPTION","Height":"1.7","Weight":"195.0","Kind":"Steam","Pokedex":"It expels its internal steam from the arms on its back. It has enough power to blow away a mountain.","Evolutions":null}];

},{}],5:[function(require,module,exports){
(function (global){
var React = require('react'),
    ReactDOM = require('react-dom'),
    PokemonsData = require('./data/pokedex'),
    PokedexApp = require('./components/app'),
    appNode = document.querySelector('#pokedex-app'),
    pokemonName;

if ('location' in global) {
  pokemonName = global.location.pathname.split('/').pop();
}

ReactDOM.render(React.createElement(PokedexApp, { pokemons: PokemonsData, initialPokemon: pokemonName }), appNode);

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./components/app":1,"./data/pokedex":4,"react":162,"react-dom":7}],6:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = setTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    clearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        setTimeout(drainQueue, 0);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],7:[function(require,module,exports){
'use strict';

module.exports = require('react/lib/ReactDOM');

},{"react/lib/ReactDOM":42}],8:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule AutoFocusUtils
 * @typechecks static-only
 */

'use strict';

var ReactMount = require('./ReactMount');

var findDOMNode = require('./findDOMNode');
var focusNode = require('fbjs/lib/focusNode');

var Mixin = {
  componentDidMount: function () {
    if (this.props.autoFocus) {
      focusNode(findDOMNode(this));
    }
  }
};

var AutoFocusUtils = {
  Mixin: Mixin,

  focusDOMComponent: function () {
    focusNode(ReactMount.getNode(this._rootNodeID));
  }
};

module.exports = AutoFocusUtils;
},{"./ReactMount":72,"./findDOMNode":114,"fbjs/lib/focusNode":144}],9:[function(require,module,exports){
/**
 * Copyright 2013-2015 Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule BeforeInputEventPlugin
 * @typechecks static-only
 */

'use strict';

var EventConstants = require('./EventConstants');
var EventPropagators = require('./EventPropagators');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var FallbackCompositionState = require('./FallbackCompositionState');
var SyntheticCompositionEvent = require('./SyntheticCompositionEvent');
var SyntheticInputEvent = require('./SyntheticInputEvent');

var keyOf = require('fbjs/lib/keyOf');

var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
var START_KEYCODE = 229;

var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;

var documentMode = null;
if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
  documentMode = document.documentMode;
}

// Webkit offers a very useful `textInput` event that can be used to
// directly represent `beforeInput`. The IE `textinput` event is not as
// useful, so we don't use it.
var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();

// In IE9+, we have access to composition events, but the data supplied
// by the native compositionend event may be incorrect. Japanese ideographic
// spaces, for instance (\u3000) are not recorded correctly.
var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);

/**
 * Opera <= 12 includes TextEvent in window, but does not fire
 * text input events. Rely on keypress instead.
 */
function isPresto() {
  var opera = window.opera;
  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
}

var SPACEBAR_CODE = 32;
var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

var topLevelTypes = EventConstants.topLevelTypes;

// Events and their corresponding property names.
var eventTypes = {
  beforeInput: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onBeforeInput: null }),
      captured: keyOf({ onBeforeInputCapture: null })
    },
    dependencies: [topLevelTypes.topCompositionEnd, topLevelTypes.topKeyPress, topLevelTypes.topTextInput, topLevelTypes.topPaste]
  },
  compositionEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onCompositionEnd: null }),
      captured: keyOf({ onCompositionEndCapture: null })
    },
    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionEnd, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
  },
  compositionStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onCompositionStart: null }),
      captured: keyOf({ onCompositionStartCapture: null })
    },
    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionStart, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
  },
  compositionUpdate: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onCompositionUpdate: null }),
      captured: keyOf({ onCompositionUpdateCapture: null })
    },
    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionUpdate, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
  }
};

// Track whether we've ever handled a keypress on the space key.
var hasSpaceKeypress = false;

/**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */
function isKeypressCommand(nativeEvent) {
  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
  !(nativeEvent.ctrlKey && nativeEvent.altKey);
}

/**
 * Translate native top level events into event types.
 *
 * @param {string} topLevelType
 * @return {object}
 */
function getCompositionEventType(topLevelType) {
  switch (topLevelType) {
    case topLevelTypes.topCompositionStart:
      return eventTypes.compositionStart;
    case topLevelTypes.topCompositionEnd:
      return eventTypes.compositionEnd;
    case topLevelTypes.topCompositionUpdate:
      return eventTypes.compositionUpdate;
  }
}

/**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackCompositionStart(topLevelType, nativeEvent) {
  return topLevelType === topLevelTypes.topKeyDown && nativeEvent.keyCode === START_KEYCODE;
}

/**
 * Does our fallback mode think that this event is the end of composition?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackCompositionEnd(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case topLevelTypes.topKeyUp:
      // Command keys insert or clear IME input.
      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
    case topLevelTypes.topKeyDown:
      // Expect IME keyCode on each keydown. If we get any other
      // code we must have exited earlier.
      return nativeEvent.keyCode !== START_KEYCODE;
    case topLevelTypes.topKeyPress:
    case topLevelTypes.topMouseDown:
    case topLevelTypes.topBlur:
      // Events are not possible without cancelling IME.
      return true;
    default:
      return false;
  }
}

/**
 * Google Input Tools provides composition data via a CustomEvent,
 * with the `data` property populated in the `detail` object. If this
 * is available on the event object, use it. If not, this is a plain
 * composition event and we have nothing special to extract.
 *
 * @param {object} nativeEvent
 * @return {?string}
 */
function getDataFromCustomEvent(nativeEvent) {
  var detail = nativeEvent.detail;
  if (typeof detail === 'object' && 'data' in detail) {
    return detail.data;
  }
  return null;
}

// Track the current IME composition fallback object, if any.
var currentComposition = null;

/**
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {DOMEventTarget} topLevelTarget The listening component root node.
 * @param {string} topLevelTargetID ID of `topLevelTarget`.
 * @param {object} nativeEvent Native browser event.
 * @return {?object} A SyntheticCompositionEvent.
 */
function extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
  var eventType;
  var fallbackData;

  if (canUseCompositionEvent) {
    eventType = getCompositionEventType(topLevelType);
  } else if (!currentComposition) {
    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
      eventType = eventTypes.compositionStart;
    }
  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
    eventType = eventTypes.compositionEnd;
  }

  if (!eventType) {
    return null;
  }

  if (useFallbackCompositionData) {
    // The current composition is stored statically and must not be
    // overwritten while composition continues.
    if (!currentComposition && eventType === eventTypes.compositionStart) {
      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);
    } else if (eventType === eventTypes.compositionEnd) {
      if (currentComposition) {
        fallbackData = currentComposition.getData();
      }
    }
  }

  var event = SyntheticCompositionEvent.getPooled(eventType, topLevelTargetID, nativeEvent, nativeEventTarget);

  if (fallbackData) {
    // Inject data generated from fallback path into the synthetic event.
    // This matches the property of native CompositionEventInterface.
    event.data = fallbackData;
  } else {
    var customData = getDataFromCustomEvent(nativeEvent);
    if (customData !== null) {
      event.data = customData;
    }
  }

  EventPropagators.accumulateTwoPhaseDispatches(event);
  return event;
}

/**
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The string corresponding to this `beforeInput` event.
 */
function getNativeBeforeInputChars(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case topLevelTypes.topCompositionEnd:
      return getDataFromCustomEvent(nativeEvent);
    case topLevelTypes.topKeyPress:
      /**
       * If native `textInput` events are available, our goal is to make
       * use of them. However, there is a special case: the spacebar key.
       * In Webkit, preventing default on a spacebar `textInput` event
       * cancels character insertion, but it *also* causes the browser
       * to fall back to its default spacebar behavior of scrolling the
       * page.
       *
       * Tracking at:
       * https://code.google.com/p/chromium/issues/detail?id=355103
       *
       * To avoid this issue, use the keypress event as if no `textInput`
       * event is available.
       */
      var which = nativeEvent.which;
      if (which !== SPACEBAR_CODE) {
        return null;
      }

      hasSpaceKeypress = true;
      return SPACEBAR_CHAR;

    case topLevelTypes.topTextInput:
      // Record the characters to be added to the DOM.
      var chars = nativeEvent.data;

      // If it's a spacebar character, assume that we have already handled
      // it at the keypress level and bail immediately. Android Chrome
      // doesn't give us keycodes, so we need to blacklist it.
      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
        return null;
      }

      return chars;

    default:
      // For other native event types, do nothing.
      return null;
  }
}

/**
 * For browsers that do not provide the `textInput` event, extract the
 * appropriate string to use for SyntheticInputEvent.
 *
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The fallback string for this `beforeInput` event.
 */
function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
  // If we are currently composing (IME) and using a fallback to do so,
  // try to extract the composed characters from the fallback object.
  if (currentComposition) {
    if (topLevelType === topLevelTypes.topCompositionEnd || isFallbackCompositionEnd(topLevelType, nativeEvent)) {
      var chars = currentComposition.getData();
      FallbackCompositionState.release(currentComposition);
      currentComposition = null;
      return chars;
    }
    return null;
  }

  switch (topLevelType) {
    case topLevelTypes.topPaste:
      // If a paste event occurs after a keypress, throw out the input
      // chars. Paste events should not lead to BeforeInput events.
      return null;
    case topLevelTypes.topKeyPress:
      /**
       * As of v27, Firefox may fire keypress events even when no character
       * will be inserted. A few possibilities:
       *
       * - `which` is `0`. Arrow keys, Esc key, etc.
       *
       * - `which` is the pressed key code, but no char is available.
       *   Ex: 'AltGr + d` in Polish. There is no modified character for
       *   this key combination and no character is inserted into the
       *   document, but FF fires the keypress for char code `100` anyway.
       *   No `input` event will occur.
       *
       * - `which` is the pressed key code, but a command combination is
       *   being used. Ex: `Cmd+C`. No character is inserted, and no
       *   `input` event will occur.
       */
      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
        return String.fromCharCode(nativeEvent.which);
      }
      return null;
    case topLevelTypes.topCompositionEnd:
      return useFallbackCompositionData ? null : nativeEvent.data;
    default:
      return null;
  }
}

/**
 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
 * `textInput` or fallback behavior.
 *
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {DOMEventTarget} topLevelTarget The listening component root node.
 * @param {string} topLevelTargetID ID of `topLevelTarget`.
 * @param {object} nativeEvent Native browser event.
 * @return {?object} A SyntheticInputEvent.
 */
function extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
  var chars;

  if (canUseTextInputEvent) {
    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
  } else {
    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
  }

  // If no characters are being inserted, no BeforeInput event should
  // be fired.
  if (!chars) {
    return null;
  }

  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, topLevelTargetID, nativeEvent, nativeEventTarget);

  event.data = chars;
  EventPropagators.accumulateTwoPhaseDispatches(event);
  return event;
}

/**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 *
 * This plugin is also responsible for emitting `composition` events, thus
 * allowing us to share composition fallback code for both `beforeInput` and
 * `composition` event types.
 */
var BeforeInputEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
    return [extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget)];
  }
};

module.exports = BeforeInputEventPlugin;
},{"./EventConstants":21,"./EventPropagators":25,"./FallbackCompositionState":26,"./SyntheticCompositionEvent":97,"./SyntheticInputEvent":101,"fbjs/lib/ExecutionEnvironment":136,"fbjs/lib/keyOf":154}],10:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CSSProperty
 */

'use strict';

/**
 * CSS properties which accept numbers but are not in units of "px".
 */
var isUnitlessNumber = {
  animationIterationCount: true,
  boxFlex: true,
  boxFlexGroup: true,
  boxOrdinalGroup: true,
  columnCount: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  flexOrder: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,

  // SVG-related properties
  fillOpacity: true,
  stopOpacity: true,
  strokeDashoffset: true,
  strokeOpacity: true,
  strokeWidth: true
};

/**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */
function prefixKey(prefix, key) {
  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
}

/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */
var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
// infinite loop, because it iterates over the newly added props too.
Object.keys(isUnitlessNumber).forEach(function (prop) {
  prefixes.forEach(function (prefix) {
    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
  });
});

/**
 * Most style properties can be unset by doing .style[prop] = '' but IE8
 * doesn't like doing that with shorthand properties so for the properties that
 * IE8 breaks on, which are listed here, we instead unset each of the
 * individual properties. See http://bugs.jquery.com/ticket/12385.
 * The 4-value 'clock' properties like margin, padding, border-width seem to
 * behave without any problems. Curiously, list-style works too without any
 * special prodding.
 */
var shorthandPropertyExpansions = {
  background: {
    backgroundAttachment: true,
    backgroundColor: true,
    backgroundImage: true,
    backgroundPositionX: true,
    backgroundPositionY: true,
    backgroundRepeat: true
  },
  backgroundPosition: {
    backgroundPositionX: true,
    backgroundPositionY: true
  },
  border: {
    borderWidth: true,
    borderStyle: true,
    borderColor: true
  },
  borderBottom: {
    borderBottomWidth: true,
    borderBottomStyle: true,
    borderBottomColor: true
  },
  borderLeft: {
    borderLeftWidth: true,
    borderLeftStyle: true,
    borderLeftColor: true
  },
  borderRight: {
    borderRightWidth: true,
    borderRightStyle: true,
    borderRightColor: true
  },
  borderTop: {
    borderTopWidth: true,
    borderTopStyle: true,
    borderTopColor: true
  },
  font: {
    fontStyle: true,
    fontVariant: true,
    fontWeight: true,
    fontSize: true,
    lineHeight: true,
    fontFamily: true
  },
  outline: {
    outlineWidth: true,
    outlineStyle: true,
    outlineColor: true
  }
};

var CSSProperty = {
  isUnitlessNumber: isUnitlessNumber,
  shorthandPropertyExpansions: shorthandPropertyExpansions
};

module.exports = CSSProperty;
},{}],11:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CSSPropertyOperations
 * @typechecks static-only
 */

'use strict';

var CSSProperty = require('./CSSProperty');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var ReactPerf = require('./ReactPerf');

var camelizeStyleName = require('fbjs/lib/camelizeStyleName');
var dangerousStyleValue = require('./dangerousStyleValue');
var hyphenateStyleName = require('fbjs/lib/hyphenateStyleName');
var memoizeStringOnly = require('fbjs/lib/memoizeStringOnly');
var warning = require('fbjs/lib/warning');

var processStyleName = memoizeStringOnly(function (styleName) {
  return hyphenateStyleName(styleName);
});

var hasShorthandPropertyBug = false;
var styleFloatAccessor = 'cssFloat';
if (ExecutionEnvironment.canUseDOM) {
  var tempStyle = document.createElement('div').style;
  try {
    // IE8 throws "Invalid argument." if resetting shorthand style properties.
    tempStyle.font = '';
  } catch (e) {
    hasShorthandPropertyBug = true;
  }
  // IE8 only supports accessing cssFloat (standard) as styleFloat
  if (document.documentElement.style.cssFloat === undefined) {
    styleFloatAccessor = 'styleFloat';
  }
}

if (process.env.NODE_ENV !== 'production') {
  // 'msTransform' is correct, but the other prefixes should be capitalized
  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

  // style values shouldn't contain a semicolon
  var badStyleValueWithSemicolonPattern = /;\s*$/;

  var warnedStyleNames = {};
  var warnedStyleValues = {};

  var warnHyphenatedStyleName = function (name) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?', name, camelizeStyleName(name)) : undefined;
  };

  var warnBadVendoredStyleName = function (name) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1)) : undefined;
  };

  var warnStyleValueWithSemicolon = function (name, value) {
    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
      return;
    }

    warnedStyleValues[value] = true;
    process.env.NODE_ENV !== 'production' ? warning(false, 'Style property values shouldn\'t contain a semicolon. ' + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, '')) : undefined;
  };

  /**
   * @param {string} name
   * @param {*} value
   */
  var warnValidStyle = function (name, value) {
    if (name.indexOf('-') > -1) {
      warnHyphenatedStyleName(name);
    } else if (badVendoredStyleNamePattern.test(name)) {
      warnBadVendoredStyleName(name);
    } else if (badStyleValueWithSemicolonPattern.test(value)) {
      warnStyleValueWithSemicolon(name, value);
    }
  };
}

/**
 * Operations for dealing with CSS properties.
 */
var CSSPropertyOperations = {

  /**
   * Serializes a mapping of style properties for use as inline styles:
   *
   *   > createMarkupForStyles({width: '200px', height: 0})
   *   "width:200px;height:0;"
   *
   * Undefined values are ignored so that declarative programming is easier.
   * The result should be HTML-escaped before insertion into the DOM.
   *
   * @param {object} styles
   * @return {?string}
   */
  createMarkupForStyles: function (styles) {
    var serialized = '';
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      var styleValue = styles[styleName];
      if (process.env.NODE_ENV !== 'production') {
        warnValidStyle(styleName, styleValue);
      }
      if (styleValue != null) {
        serialized += processStyleName(styleName) + ':';
        serialized += dangerousStyleValue(styleName, styleValue) + ';';
      }
    }
    return serialized || null;
  },

  /**
   * Sets the value for multiple styles on a node.  If a value is specified as
   * '' (empty string), the corresponding style property will be unset.
   *
   * @param {DOMElement} node
   * @param {object} styles
   */
  setValueForStyles: function (node, styles) {
    var style = node.style;
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      if (process.env.NODE_ENV !== 'production') {
        warnValidStyle(styleName, styles[styleName]);
      }
      var styleValue = dangerousStyleValue(styleName, styles[styleName]);
      if (styleName === 'float') {
        styleName = styleFloatAccessor;
      }
      if (styleValue) {
        style[styleName] = styleValue;
      } else {
        var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];
        if (expansion) {
          // Shorthand property that IE8 won't like unsetting, so unset each
          // component to placate it
          for (var individualStyleName in expansion) {
            style[individualStyleName] = '';
          }
        } else {
          style[styleName] = '';
        }
      }
    }
  }

};

ReactPerf.measureMethods(CSSPropertyOperations, 'CSSPropertyOperations', {
  setValueForStyles: 'setValueForStyles'
});

module.exports = CSSPropertyOperations;
}).call(this,require('_process'))

},{"./CSSProperty":10,"./ReactPerf":78,"./dangerousStyleValue":111,"_process":6,"fbjs/lib/ExecutionEnvironment":136,"fbjs/lib/camelizeStyleName":138,"fbjs/lib/hyphenateStyleName":149,"fbjs/lib/memoizeStringOnly":156,"fbjs/lib/warning":161}],12:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CallbackQueue
 */

'use strict';

var PooledClass = require('./PooledClass');

var assign = require('./Object.assign');
var invariant = require('fbjs/lib/invariant');

/**
 * A specialized pseudo-event module to help keep track of components waiting to
 * be notified when their DOM representations are available for use.
 *
 * This implements `PooledClass`, so you should never need to instantiate this.
 * Instead, use `CallbackQueue.getPooled()`.
 *
 * @class ReactMountReady
 * @implements PooledClass
 * @internal
 */
function CallbackQueue() {
  this._callbacks = null;
  this._contexts = null;
}

assign(CallbackQueue.prototype, {

  /**
   * Enqueues a callback to be invoked when `notifyAll` is invoked.
   *
   * @param {function} callback Invoked when `notifyAll` is invoked.
   * @param {?object} context Context to call `callback` with.
   * @internal
   */
  enqueue: function (callback, context) {
    this._callbacks = this._callbacks || [];
    this._contexts = this._contexts || [];
    this._callbacks.push(callback);
    this._contexts.push(context);
  },

  /**
   * Invokes all enqueued callbacks and clears the queue. This is invoked after
   * the DOM representation of a component has been created or updated.
   *
   * @internal
   */
  notifyAll: function () {
    var callbacks = this._callbacks;
    var contexts = this._contexts;
    if (callbacks) {
      !(callbacks.length === contexts.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Mismatched list of contexts in callback queue') : invariant(false) : undefined;
      this._callbacks = null;
      this._contexts = null;
      for (var i = 0; i < callbacks.length; i++) {
        callbacks[i].call(contexts[i]);
      }
      callbacks.length = 0;
      contexts.length = 0;
    }
  },

  /**
   * Resets the internal queue.
   *
   * @internal
   */
  reset: function () {
    this._callbacks = null;
    this._contexts = null;
  },

  /**
   * `PooledClass` looks for this.
   */
  destructor: function () {
    this.reset();
  }

});

PooledClass.addPoolingTo(CallbackQueue);

module.exports = CallbackQueue;
}).call(this,require('_process'))

},{"./Object.assign":29,"./PooledClass":30,"_process":6,"fbjs/lib/invariant":150}],13:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ChangeEventPlugin
 */

'use strict';

var EventConstants = require('./EventConstants');
var EventPluginHub = require('./EventPluginHub');
var EventPropagators = require('./EventPropagators');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var ReactUpdates = require('./ReactUpdates');
var SyntheticEvent = require('./SyntheticEvent');

var getEventTarget = require('./getEventTarget');
var isEventSupported = require('./isEventSupported');
var isTextInputElement = require('./isTextInputElement');
var keyOf = require('fbjs/lib/keyOf');

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  change: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onChange: null }),
      captured: keyOf({ onChangeCapture: null })
    },
    dependencies: [topLevelTypes.topBlur, topLevelTypes.topChange, topLevelTypes.topClick, topLevelTypes.topFocus, topLevelTypes.topInput, topLevelTypes.topKeyDown, topLevelTypes.topKeyUp, topLevelTypes.topSelectionChange]
  }
};

/**
 * For IE shims
 */
var activeElement = null;
var activeElementID = null;
var activeElementValue = null;
var activeElementValueProp = null;

/**
 * SECTION: handle `change` event
 */
function shouldUseChangeEvent(elem) {
  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
}

var doesChangeEventBubble = false;
if (ExecutionEnvironment.canUseDOM) {
  // See `handleChange` comment below
  doesChangeEventBubble = isEventSupported('change') && (!('documentMode' in document) || document.documentMode > 8);
}

function manualDispatchChangeEvent(nativeEvent) {
  var event = SyntheticEvent.getPooled(eventTypes.change, activeElementID, nativeEvent, getEventTarget(nativeEvent));
  EventPropagators.accumulateTwoPhaseDispatches(event);

  // If change and propertychange bubbled, we'd just bind to it like all the
  // other events and have it go through ReactBrowserEventEmitter. Since it
  // doesn't, we manually listen for the events and so we have to enqueue and
  // process the abstract event manually.
  //
  // Batching is necessary here in order to ensure that all event handlers run
  // before the next rerender (including event handlers attached to ancestor
  // elements instead of directly on the input). Without this, controlled
  // components don't work properly in conjunction with event bubbling because
  // the component is rerendered and the value reverted before all the event
  // handlers can run. See https://github.com/facebook/react/issues/708.
  ReactUpdates.batchedUpdates(runEventInBatch, event);
}

function runEventInBatch(event) {
  EventPluginHub.enqueueEvents(event);
  EventPluginHub.processEventQueue(false);
}

function startWatchingForChangeEventIE8(target, targetID) {
  activeElement = target;
  activeElementID = targetID;
  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
}

function stopWatchingForChangeEventIE8() {
  if (!activeElement) {
    return;
  }
  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
  activeElement = null;
  activeElementID = null;
}

function getTargetIDForChangeEvent(topLevelType, topLevelTarget, topLevelTargetID) {
  if (topLevelType === topLevelTypes.topChange) {
    return topLevelTargetID;
  }
}
function handleEventsForChangeEventIE8(topLevelType, topLevelTarget, topLevelTargetID) {
  if (topLevelType === topLevelTypes.topFocus) {
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForChangeEventIE8();
    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);
  } else if (topLevelType === topLevelTypes.topBlur) {
    stopWatchingForChangeEventIE8();
  }
}

/**
 * SECTION: handle `input` event
 */
var isInputEventSupported = false;
if (ExecutionEnvironment.canUseDOM) {
  // IE9 claims to support the input event but fails to trigger it when
  // deleting text, so we ignore its input events
  isInputEventSupported = isEventSupported('input') && (!('documentMode' in document) || document.documentMode > 9);
}

/**
 * (For old IE.) Replacement getter/setter for the `value` property that gets
 * set on the active element.
 */
var newValueProp = {
  get: function () {
    return activeElementValueProp.get.call(this);
  },
  set: function (val) {
    // Cast to a string so we can do equality checks.
    activeElementValue = '' + val;
    activeElementValueProp.set.call(this, val);
  }
};

/**
 * (For old IE.) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */
function startWatchingForValueChange(target, targetID) {
  activeElement = target;
  activeElementID = targetID;
  activeElementValue = target.value;
  activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value');

  Object.defineProperty(activeElement, 'value', newValueProp);
  activeElement.attachEvent('onpropertychange', handlePropertyChange);
}

/**
 * (For old IE.) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */
function stopWatchingForValueChange() {
  if (!activeElement) {
    return;
  }

  // delete restores the original property definition
  delete activeElement.value;
  activeElement.detachEvent('onpropertychange', handlePropertyChange);

  activeElement = null;
  activeElementID = null;
  activeElementValue = null;
  activeElementValueProp = null;
}

/**
 * (For old IE.) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */
function handlePropertyChange(nativeEvent) {
  if (nativeEvent.propertyName !== 'value') {
    return;
  }
  var value = nativeEvent.srcElement.value;
  if (value === activeElementValue) {
    return;
  }
  activeElementValue = value;

  manualDispatchChangeEvent(nativeEvent);
}

/**
 * If a `change` event should be fired, returns the target's ID.
 */
function getTargetIDForInputEvent(topLevelType, topLevelTarget, topLevelTargetID) {
  if (topLevelType === topLevelTypes.topInput) {
    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
    // what we want so fall through here and trigger an abstract event
    return topLevelTargetID;
  }
}

// For IE8 and IE9.
function handleEventsForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {
  if (topLevelType === topLevelTypes.topFocus) {
    // In IE8, we can capture almost all .value changes by adding a
    // propertychange handler and looking for events with propertyName
    // equal to 'value'
    // In IE9, propertychange fires for most input events but is buggy and
    // doesn't fire when text is deleted, but conveniently, selectionchange
    // appears to fire in all of the remaining cases so we catch those and
    // forward the event if the value has changed
    // In either case, we don't want to call the event handler if the value
    // is changed from JS so we redefine a setter for `.value` that updates
    // our activeElementValue variable, allowing us to ignore those changes
    //
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForValueChange();
    startWatchingForValueChange(topLevelTarget, topLevelTargetID);
  } else if (topLevelType === topLevelTypes.topBlur) {
    stopWatchingForValueChange();
  }
}

// For IE8 and IE9.
function getTargetIDForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {
  if (topLevelType === topLevelTypes.topSelectionChange || topLevelType === topLevelTypes.topKeyUp || topLevelType === topLevelTypes.topKeyDown) {
    // On the selectionchange event, the target is just document which isn't
    // helpful for us so just check activeElement instead.
    //
    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
    // propertychange on the first input event after setting `value` from a
    // script and fires only keydown, keypress, keyup. Catching keyup usually
    // gets it and catching keydown lets us fire an event for the first
    // keystroke if user does a key repeat (it'll be a little delayed: right
    // before the second keystroke). Other input methods (e.g., paste) seem to
    // fire selectionchange normally.
    if (activeElement && activeElement.value !== activeElementValue) {
      activeElementValue = activeElement.value;
      return activeElementID;
    }
  }
}

/**
 * SECTION: handle `click` event
 */
function shouldUseClickEvent(elem) {
  // Use the `click` event to detect changes to checkbox and radio inputs.
  // This approach works across all browsers, whereas `change` does not fire
  // until `blur` in IE8.
  return elem.nodeName && elem.nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
}

function getTargetIDForClickEvent(topLevelType, topLevelTarget, topLevelTargetID) {
  if (topLevelType === topLevelTypes.topClick) {
    return topLevelTargetID;
  }
}

/**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */
var ChangeEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {

    var getTargetIDFunc, handleEventFunc;
    if (shouldUseChangeEvent(topLevelTarget)) {
      if (doesChangeEventBubble) {
        getTargetIDFunc = getTargetIDForChangeEvent;
      } else {
        handleEventFunc = handleEventsForChangeEventIE8;
      }
    } else if (isTextInputElement(topLevelTarget)) {
      if (isInputEventSupported) {
        getTargetIDFunc = getTargetIDForInputEvent;
      } else {
        getTargetIDFunc = getTargetIDForInputEventIE;
        handleEventFunc = handleEventsForInputEventIE;
      }
    } else if (shouldUseClickEvent(topLevelTarget)) {
      getTargetIDFunc = getTargetIDForClickEvent;
    }

    if (getTargetIDFunc) {
      var targetID = getTargetIDFunc(topLevelType, topLevelTarget, topLevelTargetID);
      if (targetID) {
        var event = SyntheticEvent.getPooled(eventTypes.change, targetID, nativeEvent, nativeEventTarget);
        event.type = 'change';
        EventPropagators.accumulateTwoPhaseDispatches(event);
        return event;
      }
    }

    if (handleEventFunc) {
      handleEventFunc(topLevelType, topLevelTarget, topLevelTargetID);
    }
  }

};

module.exports = ChangeEventPlugin;
},{"./EventConstants":21,"./EventPluginHub":22,"./EventPropagators":25,"./ReactUpdates":90,"./SyntheticEvent":99,"./getEventTarget":120,"./isEventSupported":125,"./isTextInputElement":126,"fbjs/lib/ExecutionEnvironment":136,"fbjs/lib/keyOf":154}],14:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ClientReactRootIndex
 * @typechecks
 */

'use strict';

var nextReactRootIndex = 0;

var ClientReactRootIndex = {
  createReactRootIndex: function () {
    return nextReactRootIndex++;
  }
};

module.exports = ClientReactRootIndex;
},{}],15:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMChildrenOperations
 * @typechecks static-only
 */

'use strict';

var Danger = require('./Danger');
var ReactMultiChildUpdateTypes = require('./ReactMultiChildUpdateTypes');
var ReactPerf = require('./ReactPerf');

var setInnerHTML = require('./setInnerHTML');
var setTextContent = require('./setTextContent');
var invariant = require('fbjs/lib/invariant');

/**
 * Inserts `childNode` as a child of `parentNode` at the `index`.
 *
 * @param {DOMElement} parentNode Parent node in which to insert.
 * @param {DOMElement} childNode Child node to insert.
 * @param {number} index Index at which to insert the child.
 * @internal
 */
function insertChildAt(parentNode, childNode, index) {
  // By exploiting arrays returning `undefined` for an undefined index, we can
  // rely exclusively on `insertBefore(node, null)` instead of also using
  // `appendChild(node)`. However, using `undefined` is not allowed by all
  // browsers so we must replace it with `null`.

  // fix render order error in safari
  // IE8 will throw error when index out of list size.
  var beforeChild = index >= parentNode.childNodes.length ? null : parentNode.childNodes.item(index);

  parentNode.insertBefore(childNode, beforeChild);
}

/**
 * Operations for updating with DOM children.
 */
var DOMChildrenOperations = {

  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,

  updateTextContent: setTextContent,

  /**
   * Updates a component's children by processing a series of updates. The
   * update configurations are each expected to have a `parentNode` property.
   *
   * @param {array<object>} updates List of update configurations.
   * @param {array<string>} markupList List of markup strings.
   * @internal
   */
  processUpdates: function (updates, markupList) {
    var update;
    // Mapping from parent IDs to initial child orderings.
    var initialChildren = null;
    // List of children that will be moved or removed.
    var updatedChildren = null;

    for (var i = 0; i < updates.length; i++) {
      update = updates[i];
      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING || update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {
        var updatedIndex = update.fromIndex;
        var updatedChild = update.parentNode.childNodes[updatedIndex];
        var parentID = update.parentID;

        !updatedChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processUpdates(): Unable to find child %s of element. This ' + 'probably means the DOM was unexpectedly mutated (e.g., by the ' + 'browser), usually due to forgetting a <tbody> when using tables, ' + 'nesting tags like <form>, <p>, or <a>, or using non-SVG elements ' + 'in an <svg> parent. Try inspecting the child nodes of the element ' + 'with React ID `%s`.', updatedIndex, parentID) : invariant(false) : undefined;

        initialChildren = initialChildren || {};
        initialChildren[parentID] = initialChildren[parentID] || [];
        initialChildren[parentID][updatedIndex] = updatedChild;

        updatedChildren = updatedChildren || [];
        updatedChildren.push(updatedChild);
      }
    }

    var renderedMarkup;
    // markupList is either a list of markup or just a list of elements
    if (markupList.length && typeof markupList[0] === 'string') {
      renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);
    } else {
      renderedMarkup = markupList;
    }

    // Remove updated children first so that `toIndex` is consistent.
    if (updatedChildren) {
      for (var j = 0; j < updatedChildren.length; j++) {
        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);
      }
    }

    for (var k = 0; k < updates.length; k++) {
      update = updates[k];
      switch (update.type) {
        case ReactMultiChildUpdateTypes.INSERT_MARKUP:
          insertChildAt(update.parentNode, renderedMarkup[update.markupIndex], update.toIndex);
          break;
        case ReactMultiChildUpdateTypes.MOVE_EXISTING:
          insertChildAt(update.parentNode, initialChildren[update.parentID][update.fromIndex], update.toIndex);
          break;
        case ReactMultiChildUpdateTypes.SET_MARKUP:
          setInnerHTML(update.parentNode, update.content);
          break;
        case ReactMultiChildUpdateTypes.TEXT_CONTENT:
          setTextContent(update.parentNode, update.content);
          break;
        case ReactMultiChildUpdateTypes.REMOVE_NODE:
          // Already removed by the for-loop above.
          break;
      }
    }
  }

};

ReactPerf.measureMethods(DOMChildrenOperations, 'DOMChildrenOperations', {
  updateTextContent: 'updateTextContent'
});

module.exports = DOMChildrenOperations;
}).call(this,require('_process'))

},{"./Danger":18,"./ReactMultiChildUpdateTypes":74,"./ReactPerf":78,"./setInnerHTML":130,"./setTextContent":131,"_process":6,"fbjs/lib/invariant":150}],16:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMProperty
 * @typechecks static-only
 */

'use strict';

var invariant = require('fbjs/lib/invariant');

function checkMask(value, bitmask) {
  return (value & bitmask) === bitmask;
}

var DOMPropertyInjection = {
  /**
   * Mapping from normalized, camelcased property names to a configuration that
   * specifies how the associated DOM property should be accessed or rendered.
   */
  MUST_USE_ATTRIBUTE: 0x1,
  MUST_USE_PROPERTY: 0x2,
  HAS_SIDE_EFFECTS: 0x4,
  HAS_BOOLEAN_VALUE: 0x8,
  HAS_NUMERIC_VALUE: 0x10,
  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,
  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,

  /**
   * Inject some specialized knowledge about the DOM. This takes a config object
   * with the following properties:
   *
   * isCustomAttribute: function that given an attribute name will return true
   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
   * attributes where it's impossible to enumerate all of the possible
   * attribute names,
   *
   * Properties: object mapping DOM property name to one of the
   * DOMPropertyInjection constants or null. If your attribute isn't in here,
   * it won't get written to the DOM.
   *
   * DOMAttributeNames: object mapping React attribute name to the DOM
   * attribute name. Attribute names not specified use the **lowercase**
   * normalized name.
   *
   * DOMAttributeNamespaces: object mapping React attribute name to the DOM
   * attribute namespace URL. (Attribute names not specified use no namespace.)
   *
   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
   * Property names not specified use the normalized name.
   *
   * DOMMutationMethods: Properties that require special mutation methods. If
   * `value` is undefined, the mutation method should unset the property.
   *
   * @param {object} domPropertyConfig the config as described above.
   */
  injectDOMPropertyConfig: function (domPropertyConfig) {
    var Injection = DOMPropertyInjection;
    var Properties = domPropertyConfig.Properties || {};
    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

    if (domPropertyConfig.isCustomAttribute) {
      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
    }

    for (var propName in Properties) {
      !!DOMProperty.properties.hasOwnProperty(propName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' + '\'%s\' which has already been injected. You may be accidentally ' + 'injecting the same DOM property config twice, or you may be ' + 'injecting two configs that have conflicting property names.', propName) : invariant(false) : undefined;

      var lowerCased = propName.toLowerCase();
      var propConfig = Properties[propName];

      var propertyInfo = {
        attributeName: lowerCased,
        attributeNamespace: null,
        propertyName: propName,
        mutationMethod: null,

        mustUseAttribute: checkMask(propConfig, Injection.MUST_USE_ATTRIBUTE),
        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
        hasSideEffects: checkMask(propConfig, Injection.HAS_SIDE_EFFECTS),
        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)
      };

      !(!propertyInfo.mustUseAttribute || !propertyInfo.mustUseProperty) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Cannot require using both attribute and property: %s', propName) : invariant(false) : undefined;
      !(propertyInfo.mustUseProperty || !propertyInfo.hasSideEffects) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Properties that have side effects must use property: %s', propName) : invariant(false) : undefined;
      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or ' + 'numeric value, but not a combination: %s', propName) : invariant(false) : undefined;

      if (process.env.NODE_ENV !== 'production') {
        DOMProperty.getPossibleStandardName[lowerCased] = propName;
      }

      if (DOMAttributeNames.hasOwnProperty(propName)) {
        var attributeName = DOMAttributeNames[propName];
        propertyInfo.attributeName = attributeName;
        if (process.env.NODE_ENV !== 'production') {
          DOMProperty.getPossibleStandardName[attributeName] = propName;
        }
      }

      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
      }

      if (DOMPropertyNames.hasOwnProperty(propName)) {
        propertyInfo.propertyName = DOMPropertyNames[propName];
      }

      if (DOMMutationMethods.hasOwnProperty(propName)) {
        propertyInfo.mutationMethod = DOMMutationMethods[propName];
      }

      DOMProperty.properties[propName] = propertyInfo;
    }
  }
};
var defaultValueCache = {};

/**
 * DOMProperty exports lookup objects that can be used like functions:
 *
 *   > DOMProperty.isValid['id']
 *   true
 *   > DOMProperty.isValid['foobar']
 *   undefined
 *
 * Although this may be confusing, it performs better in general.
 *
 * @see http://jsperf.com/key-exists
 * @see http://jsperf.com/key-missing
 */
var DOMProperty = {

  ID_ATTRIBUTE_NAME: 'data-reactid',

  /**
   * Map from property "standard name" to an object with info about how to set
   * the property in the DOM. Each object contains:
   *
   * attributeName:
   *   Used when rendering markup or with `*Attribute()`.
   * attributeNamespace
   * propertyName:
   *   Used on DOM node instances. (This includes properties that mutate due to
   *   external factors.)
   * mutationMethod:
   *   If non-null, used instead of the property or `setAttribute()` after
   *   initial render.
   * mustUseAttribute:
   *   Whether the property must be accessed and mutated using `*Attribute()`.
   *   (This includes anything that fails `<propName> in <element>`.)
   * mustUseProperty:
   *   Whether the property must be accessed and mutated as an object property.
   * hasSideEffects:
   *   Whether or not setting a value causes side effects such as triggering
   *   resources to be loaded or text selection changes. If true, we read from
   *   the DOM before updating to ensure that the value is only set if it has
   *   changed.
   * hasBooleanValue:
   *   Whether the property should be removed when set to a falsey value.
   * hasNumericValue:
   *   Whether the property must be numeric or parse as a numeric and should be
   *   removed when set to a falsey value.
   * hasPositiveNumericValue:
   *   Whether the property must be positive numeric or parse as a positive
   *   numeric and should be removed when set to a falsey value.
   * hasOverloadedBooleanValue:
   *   Whether the property can be used as a flag as well as with a value.
   *   Removed when strictly equal to false; present without a value when
   *   strictly equal to true; present with a value otherwise.
   */
  properties: {},

  /**
   * Mapping from lowercase property names to the properly cased version, used
   * to warn in the case of missing properties. Available only in __DEV__.
   * @type {Object}
   */
  getPossibleStandardName: process.env.NODE_ENV !== 'production' ? {} : null,

  /**
   * All of the isCustomAttribute() functions that have been injected.
   */
  _isCustomAttributeFunctions: [],

  /**
   * Checks whether a property name is a custom attribute.
   * @method
   */
  isCustomAttribute: function (attributeName) {
    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
      if (isCustomAttributeFn(attributeName)) {
        return true;
      }
    }
    return false;
  },

  /**
   * Returns the default property value for a DOM property (i.e., not an
   * attribute). Most default values are '' or false, but not all. Worse yet,
   * some (in particular, `type`) vary depending on the type of element.
   *
   * TODO: Is it better to grab all the possible properties when creating an
   * element to avoid having to create the same element twice?
   */
  getDefaultValueForProperty: function (nodeName, prop) {
    var nodeDefaults = defaultValueCache[nodeName];
    var testElement;
    if (!nodeDefaults) {
      defaultValueCache[nodeName] = nodeDefaults = {};
    }
    if (!(prop in nodeDefaults)) {
      testElement = document.createElement(nodeName);
      nodeDefaults[prop] = testElement[prop];
    }
    return nodeDefaults[prop];
  },

  injection: DOMPropertyInjection
};

module.exports = DOMProperty;
}).call(this,require('_process'))

},{"_process":6,"fbjs/lib/invariant":150}],17:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMPropertyOperations
 * @typechecks static-only
 */

'use strict';

var DOMProperty = require('./DOMProperty');
var ReactPerf = require('./ReactPerf');

var quoteAttributeValueForBrowser = require('./quoteAttributeValueForBrowser');
var warning = require('fbjs/lib/warning');

// Simplified subset
var VALID_ATTRIBUTE_NAME_REGEX = /^[a-zA-Z_][\w\.\-]*$/;
var illegalAttributeNameCache = {};
var validatedAttributeNameCache = {};

function isAttributeNameSafe(attributeName) {
  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
    return true;
  }
  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
    return false;
  }
  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
    validatedAttributeNameCache[attributeName] = true;
    return true;
  }
  illegalAttributeNameCache[attributeName] = true;
  process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid attribute name: `%s`', attributeName) : undefined;
  return false;
}

function shouldIgnoreValue(propertyInfo, value) {
  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
}

if (process.env.NODE_ENV !== 'production') {
  var reactProps = {
    children: true,
    dangerouslySetInnerHTML: true,
    key: true,
    ref: true
  };
  var warnedProperties = {};

  var warnUnknownProperty = function (name) {
    if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
      return;
    }

    warnedProperties[name] = true;
    var lowerCasedName = name.toLowerCase();

    // data-* attributes should be lowercase; suggest the lowercase version
    var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;

    // For now, only warn when we have a suggested correction. This prevents
    // logging too much when using transferPropsTo.
    process.env.NODE_ENV !== 'production' ? warning(standardName == null, 'Unknown DOM property %s. Did you mean %s?', name, standardName) : undefined;
  };
}

/**
 * Operations for dealing with DOM properties.
 */
var DOMPropertyOperations = {

  /**
   * Creates markup for the ID property.
   *
   * @param {string} id Unescaped ID.
   * @return {string} Markup string.
   */
  createMarkupForID: function (id) {
    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);
  },

  setAttributeForID: function (node, id) {
    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);
  },

  /**
   * Creates markup for a property.
   *
   * @param {string} name
   * @param {*} value
   * @return {?string} Markup string, or null if the property was invalid.
   */
  createMarkupForProperty: function (name, value) {
    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
    if (propertyInfo) {
      if (shouldIgnoreValue(propertyInfo, value)) {
        return '';
      }
      var attributeName = propertyInfo.attributeName;
      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
        return attributeName + '=""';
      }
      return attributeName + '=' + quoteAttributeValueForBrowser(value);
    } else if (DOMProperty.isCustomAttribute(name)) {
      if (value == null) {
        return '';
      }
      return name + '=' + quoteAttributeValueForBrowser(value);
    } else if (process.env.NODE_ENV !== 'production') {
      warnUnknownProperty(name);
    }
    return null;
  },

  /**
   * Creates markup for a custom property.
   *
   * @param {string} name
   * @param {*} value
   * @return {string} Markup string, or empty string if the property was invalid.
   */
  createMarkupForCustomAttribute: function (name, value) {
    if (!isAttributeNameSafe(name) || value == null) {
      return '';
    }
    return name + '=' + quoteAttributeValueForBrowser(value);
  },

  /**
   * Sets the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   * @param {*} value
   */
  setValueForProperty: function (node, name, value) {
    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
    if (propertyInfo) {
      var mutationMethod = propertyInfo.mutationMethod;
      if (mutationMethod) {
        mutationMethod(node, value);
      } else if (shouldIgnoreValue(propertyInfo, value)) {
        this.deleteValueForProperty(node, name);
      } else if (propertyInfo.mustUseAttribute) {
        var attributeName = propertyInfo.attributeName;
        var namespace = propertyInfo.attributeNamespace;
        // `setAttribute` with objects becomes only `[object]` in IE8/9,
        // ('' + value) makes it output the correct toString()-value.
        if (namespace) {
          node.setAttributeNS(namespace, attributeName, '' + value);
        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
          node.setAttribute(attributeName, '');
        } else {
          node.setAttribute(attributeName, '' + value);
        }
      } else {
        var propName = propertyInfo.propertyName;
        // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the
        // property type before comparing; only `value` does and is string.
        if (!propertyInfo.hasSideEffects || '' + node[propName] !== '' + value) {
          // Contrary to `setAttribute`, object properties are properly
          // `toString`ed by IE8/9.
          node[propName] = value;
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      DOMPropertyOperations.setValueForAttribute(node, name, value);
    } else if (process.env.NODE_ENV !== 'production') {
      warnUnknownProperty(name);
    }
  },

  setValueForAttribute: function (node, name, value) {
    if (!isAttributeNameSafe(name)) {
      return;
    }
    if (value == null) {
      node.removeAttribute(name);
    } else {
      node.setAttribute(name, '' + value);
    }
  },

  /**
   * Deletes the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   */
  deleteValueForProperty: function (node, name) {
    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
    if (propertyInfo) {
      var mutationMethod = propertyInfo.mutationMethod;
      if (mutationMethod) {
        mutationMethod(node, undefined);
      } else if (propertyInfo.mustUseAttribute) {
        node.removeAttribute(propertyInfo.attributeName);
      } else {
        var propName = propertyInfo.propertyName;
        var defaultValue = DOMProperty.getDefaultValueForProperty(node.nodeName, propName);
        if (!propertyInfo.hasSideEffects || '' + node[propName] !== defaultValue) {
          node[propName] = defaultValue;
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      node.removeAttribute(name);
    } else if (process.env.NODE_ENV !== 'production') {
      warnUnknownProperty(name);
    }
  }

};

ReactPerf.measureMethods(DOMPropertyOperations, 'DOMPropertyOperations', {
  setValueForProperty: 'setValueForProperty',
  setValueForAttribute: 'setValueForAttribute',
  deleteValueForProperty: 'deleteValueForProperty'
});

module.exports = DOMPropertyOperations;
}).call(this,require('_process'))

},{"./DOMProperty":16,"./ReactPerf":78,"./quoteAttributeValueForBrowser":128,"_process":6,"fbjs/lib/warning":161}],18:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Danger
 * @typechecks static-only
 */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var createNodesFromMarkup = require('fbjs/lib/createNodesFromMarkup');
var emptyFunction = require('fbjs/lib/emptyFunction');
var getMarkupWrap = require('fbjs/lib/getMarkupWrap');
var invariant = require('fbjs/lib/invariant');

var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
var RESULT_INDEX_ATTR = 'data-danger-index';

/**
 * Extracts the `nodeName` from a string of markup.
 *
 * NOTE: Extracting the `nodeName` does not require a regular expression match
 * because we make assumptions about React-generated markup (i.e. there are no
 * spaces surrounding the opening tag and there is at least one attribute).
 *
 * @param {string} markup String of markup.
 * @return {string} Node name of the supplied markup.
 * @see http://jsperf.com/extract-nodename
 */
function getNodeName(markup) {
  return markup.substring(1, markup.indexOf(' '));
}

var Danger = {

  /**
   * Renders markup into an array of nodes. The markup is expected to render
   * into a list of root nodes. Also, the length of `resultList` and
   * `markupList` should be the same.
   *
   * @param {array<string>} markupList List of markup strings to render.
   * @return {array<DOMElement>} List of rendered nodes.
   * @internal
   */
  dangerouslyRenderMarkup: function (markupList) {
    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' + 'thread. Make sure `window` and `document` are available globally ' + 'before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString for server rendering.') : invariant(false) : undefined;
    var nodeName;
    var markupByNodeName = {};
    // Group markup by `nodeName` if a wrap is necessary, else by '*'.
    for (var i = 0; i < markupList.length; i++) {
      !markupList[i] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Missing markup.') : invariant(false) : undefined;
      nodeName = getNodeName(markupList[i]);
      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
      markupByNodeName[nodeName][i] = markupList[i];
    }
    var resultList = [];
    var resultListAssignmentCount = 0;
    for (nodeName in markupByNodeName) {
      if (!markupByNodeName.hasOwnProperty(nodeName)) {
        continue;
      }
      var markupListByNodeName = markupByNodeName[nodeName];

      // This for-in loop skips the holes of the sparse array. The order of
      // iteration should follow the order of assignment, which happens to match
      // numerical index order, but we don't rely on that.
      var resultIndex;
      for (resultIndex in markupListByNodeName) {
        if (markupListByNodeName.hasOwnProperty(resultIndex)) {
          var markup = markupListByNodeName[resultIndex];

          // Push the requested markup with an additional RESULT_INDEX_ATTR
          // attribute.  If the markup does not start with a < character, it
          // will be discarded below (with an appropriate console.error).
          markupListByNodeName[resultIndex] = markup.replace(OPEN_TAG_NAME_EXP,
          // This index will be parsed back out below.
          '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" ');
        }
      }

      // Render each group of markup with similar wrapping `nodeName`.
      var renderNodes = createNodesFromMarkup(markupListByNodeName.join(''), emptyFunction // Do nothing special with <script> tags.
      );

      for (var j = 0; j < renderNodes.length; ++j) {
        var renderNode = renderNodes[j];
        if (renderNode.hasAttribute && renderNode.hasAttribute(RESULT_INDEX_ATTR)) {

          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
          renderNode.removeAttribute(RESULT_INDEX_ATTR);

          !!resultList.hasOwnProperty(resultIndex) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Assigning to an already-occupied result index.') : invariant(false) : undefined;

          resultList[resultIndex] = renderNode;

          // This should match resultList.length and markupList.length when
          // we're done.
          resultListAssignmentCount += 1;
        } else if (process.env.NODE_ENV !== 'production') {
          console.error('Danger: Discarding unexpected node:', renderNode);
        }
      }
    }

    // Although resultList was populated out of order, it should now be a dense
    // array.
    !(resultListAssignmentCount === resultList.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Did not assign to every index of resultList.') : invariant(false) : undefined;

    !(resultList.length === markupList.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Expected markup to render %s nodes, but rendered %s.', markupList.length, resultList.length) : invariant(false) : undefined;

    return resultList;
  },

  /**
   * Replaces a node with a string of markup at its current position within its
   * parent. The markup must render into a single root node.
   *
   * @param {DOMElement} oldChild Child node to replace.
   * @param {string} markup Markup to render in place of the child node.
   * @internal
   */
  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {
    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' + 'worker thread. Make sure `window` and `document` are available ' + 'globally before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString() for server rendering.') : invariant(false) : undefined;
    !markup ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(false) : undefined;
    !(oldChild.tagName.toLowerCase() !== 'html') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' + '<html> node. This is because browser quirks make this unreliable ' + 'and/or slow. If you want to render to the root you must use ' + 'server rendering. See ReactDOMServer.renderToString().') : invariant(false) : undefined;

    var newChild;
    if (typeof markup === 'string') {
      newChild = createNodesFromMarkup(markup, emptyFunction)[0];
    } else {
      newChild = markup;
    }
    oldChild.parentNode.replaceChild(newChild, oldChild);
  }

};

module.exports = Danger;
}).call(this,require('_process'))

},{"_process":6,"fbjs/lib/ExecutionEnvironment":136,"fbjs/lib/createNodesFromMarkup":141,"fbjs/lib/emptyFunction":142,"fbjs/lib/getMarkupWrap":146,"fbjs/lib/invariant":150}],19:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DefaultEventPluginOrder
 */

'use strict';

var keyOf = require('fbjs/lib/keyOf');

/**
 * Module that is injectable into `EventPluginHub`, that specifies a
 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
 * plugins, without having to package every one of them. This is better than
 * having plugins be ordered in the same order that they are injected because
 * that ordering would be influenced by the packaging order.
 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
 */
var DefaultEventPluginOrder = [keyOf({ ResponderEventPlugin: null }), keyOf({ SimpleEventPlugin: null }), keyOf({ TapEventPlugin: null }), keyOf({ EnterLeaveEventPlugin: null }), keyOf({ ChangeEventPlugin: null }), keyOf({ SelectEventPlugin: null }), keyOf({ BeforeInputEventPlugin: null })];

module.exports = DefaultEventPluginOrder;
},{"fbjs/lib/keyOf":154}],20:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EnterLeaveEventPlugin
 * @typechecks static-only
 */

'use strict';

var EventConstants = require('./EventConstants');
var EventPropagators = require('./EventPropagators');
var SyntheticMouseEvent = require('./SyntheticMouseEvent');

var ReactMount = require('./ReactMount');
var keyOf = require('fbjs/lib/keyOf');

var topLevelTypes = EventConstants.topLevelTypes;
var getFirstReactDOM = ReactMount.getFirstReactDOM;

var eventTypes = {
  mouseEnter: {
    registrationName: keyOf({ onMouseEnter: null }),
    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
  },
  mouseLeave: {
    registrationName: keyOf({ onMouseLeave: null }),
    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
  }
};

var extractedEvents = [null, null];

var EnterLeaveEventPlugin = {

  eventTypes: eventTypes,

  /**
   * For almost every interaction we care about, there will be both a top-level
   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
   * we do not extract duplicate events. However, moving the mouse into the
   * browser from outside will not fire a `mouseout` event. In this case, we use
   * the `mouseover` top-level event.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
    if (topLevelType === topLevelTypes.topMouseOver && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
      return null;
    }
    if (topLevelType !== topLevelTypes.topMouseOut && topLevelType !== topLevelTypes.topMouseOver) {
      // Must not be a mouse in or mouse out - ignoring.
      return null;
    }

    var win;
    if (topLevelTarget.window === topLevelTarget) {
      // `topLevelTarget` is probably a window object.
      win = topLevelTarget;
    } else {
      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
      var doc = topLevelTarget.ownerDocument;
      if (doc) {
        win = doc.defaultView || doc.parentWindow;
      } else {
        win = window;
      }
    }

    var from;
    var to;
    var fromID = '';
    var toID = '';
    if (topLevelType === topLevelTypes.topMouseOut) {
      from = topLevelTarget;
      fromID = topLevelTargetID;
      to = getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement);
      if (to) {
        toID = ReactMount.getID(to);
      } else {
        to = win;
      }
      to = to || win;
    } else {
      from = win;
      to = topLevelTarget;
      toID = topLevelTargetID;
    }

    if (from === to) {
      // Nothing pertains to our managed components.
      return null;
    }

    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, fromID, nativeEvent, nativeEventTarget);
    leave.type = 'mouseleave';
    leave.target = from;
    leave.relatedTarget = to;

    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, toID, nativeEvent, nativeEventTarget);
    enter.type = 'mouseenter';
    enter.target = to;
    enter.relatedTarget = from;

    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);

    extractedEvents[0] = leave;
    extractedEvents[1] = enter;

    return extractedEvents;
  }

};

module.exports = EnterLeaveEventPlugin;
},{"./EventConstants":21,"./EventPropagators":25,"./ReactMount":72,"./SyntheticMouseEvent":103,"fbjs/lib/keyOf":154}],21:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventConstants
 */

'use strict';

var keyMirror = require('fbjs/lib/keyMirror');

var PropagationPhases = keyMirror({ bubbled: null, captured: null });

/**
 * Types of raw signals from the browser caught at the top level.
 */
var topLevelTypes = keyMirror({
  topAbort: null,
  topBlur: null,
  topCanPlay: null,
  topCanPlayThrough: null,
  topChange: null,
  topClick: null,
  topCompositionEnd: null,
  topCompositionStart: null,
  topCompositionUpdate: null,
  topContextMenu: null,
  topCopy: null,
  topCut: null,
  topDoubleClick: null,
  topDrag: null,
  topDragEnd: null,
  topDragEnter: null,
  topDragExit: null,
  topDragLeave: null,
  topDragOver: null,
  topDragStart: null,
  topDrop: null,
  topDurationChange: null,
  topEmptied: null,
  topEncrypted: null,
  topEnded: null,
  topError: null,
  topFocus: null,
  topInput: null,
  topKeyDown: null,
  topKeyPress: null,
  topKeyUp: null,
  topLoad: null,
  topLoadedData: null,
  topLoadedMetadata: null,
  topLoadStart: null,
  topMouseDown: null,
  topMouseMove: null,
  topMouseOut: null,
  topMouseOver: null,
  topMouseUp: null,
  topPaste: null,
  topPause: null,
  topPlay: null,
  topPlaying: null,
  topProgress: null,
  topRateChange: null,
  topReset: null,
  topScroll: null,
  topSeeked: null,
  topSeeking: null,
  topSelectionChange: null,
  topStalled: null,
  topSubmit: null,
  topSuspend: null,
  topTextInput: null,
  topTimeUpdate: null,
  topTouchCancel: null,
  topTouchEnd: null,
  topTouchMove: null,
  topTouchStart: null,
  topVolumeChange: null,
  topWaiting: null,
  topWheel: null
});

var EventConstants = {
  topLevelTypes: topLevelTypes,
  PropagationPhases: PropagationPhases
};

module.exports = EventConstants;
},{"fbjs/lib/keyMirror":153}],22:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginHub
 */

'use strict';

var EventPluginRegistry = require('./EventPluginRegistry');
var EventPluginUtils = require('./EventPluginUtils');
var ReactErrorUtils = require('./ReactErrorUtils');

var accumulateInto = require('./accumulateInto');
var forEachAccumulated = require('./forEachAccumulated');
var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

/**
 * Internal store for event listeners
 */
var listenerBank = {};

/**
 * Internal queue of events that have accumulated their dispatches and are
 * waiting to have their dispatches executed.
 */
var eventQueue = null;

/**
 * Dispatches an event and releases it back into the pool, unless persistent.
 *
 * @param {?object} event Synthetic event to be dispatched.
 * @param {boolean} simulated If the event is simulated (changes exn behavior)
 * @private
 */
var executeDispatchesAndRelease = function (event, simulated) {
  if (event) {
    EventPluginUtils.executeDispatchesInOrder(event, simulated);

    if (!event.isPersistent()) {
      event.constructor.release(event);
    }
  }
};
var executeDispatchesAndReleaseSimulated = function (e) {
  return executeDispatchesAndRelease(e, true);
};
var executeDispatchesAndReleaseTopLevel = function (e) {
  return executeDispatchesAndRelease(e, false);
};

/**
 * - `InstanceHandle`: [required] Module that performs logical traversals of DOM
 *   hierarchy given ids of the logical DOM elements involved.
 */
var InstanceHandle = null;

function validateInstanceHandle() {
  var valid = InstanceHandle && InstanceHandle.traverseTwoPhase && InstanceHandle.traverseEnterLeave;
  process.env.NODE_ENV !== 'production' ? warning(valid, 'InstanceHandle not injected before use!') : undefined;
}

/**
 * This is a unified interface for event plugins to be installed and configured.
 *
 * Event plugins can implement the following properties:
 *
 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
 *     Required. When a top-level event is fired, this method is expected to
 *     extract synthetic events that will in turn be queued and dispatched.
 *
 *   `eventTypes` {object}
 *     Optional, plugins that fire events must publish a mapping of registration
 *     names that are used to register listeners. Values of this mapping must
 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
 *
 *   `executeDispatch` {function(object, function, string)}
 *     Optional, allows plugins to override how an event gets dispatched. By
 *     default, the listener is simply invoked.
 *
 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
 *
 * @public
 */
var EventPluginHub = {

  /**
   * Methods for injecting dependencies.
   */
  injection: {

    /**
     * @param {object} InjectedMount
     * @public
     */
    injectMount: EventPluginUtils.injection.injectMount,

    /**
     * @param {object} InjectedInstanceHandle
     * @public
     */
    injectInstanceHandle: function (InjectedInstanceHandle) {
      InstanceHandle = InjectedInstanceHandle;
      if (process.env.NODE_ENV !== 'production') {
        validateInstanceHandle();
      }
    },

    getInstanceHandle: function () {
      if (process.env.NODE_ENV !== 'production') {
        validateInstanceHandle();
      }
      return InstanceHandle;
    },

    /**
     * @param {array} InjectedEventPluginOrder
     * @public
     */
    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

    /**
     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
     */
    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

  },

  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,

  registrationNameModules: EventPluginRegistry.registrationNameModules,

  /**
   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.
   *
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {?function} listener The callback to store.
   */
  putListener: function (id, registrationName, listener) {
    !(typeof listener === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : invariant(false) : undefined;

    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
    bankForRegistrationName[id] = listener;

    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
    if (PluginModule && PluginModule.didPutListener) {
      PluginModule.didPutListener(id, registrationName, listener);
    }
  },

  /**
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @return {?function} The stored callback.
   */
  getListener: function (id, registrationName) {
    var bankForRegistrationName = listenerBank[registrationName];
    return bankForRegistrationName && bankForRegistrationName[id];
  },

  /**
   * Deletes a listener from the registration bank.
   *
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   */
  deleteListener: function (id, registrationName) {
    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
    if (PluginModule && PluginModule.willDeleteListener) {
      PluginModule.willDeleteListener(id, registrationName);
    }

    var bankForRegistrationName = listenerBank[registrationName];
    // TODO: This should never be null -- when is it?
    if (bankForRegistrationName) {
      delete bankForRegistrationName[id];
    }
  },

  /**
   * Deletes all listeners for the DOM element with the supplied ID.
   *
   * @param {string} id ID of the DOM element.
   */
  deleteAllListeners: function (id) {
    for (var registrationName in listenerBank) {
      if (!listenerBank[registrationName][id]) {
        continue;
      }

      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
      if (PluginModule && PluginModule.willDeleteListener) {
        PluginModule.willDeleteListener(id, registrationName);
      }

      delete listenerBank[registrationName][id];
    }
  },

  /**
   * Allows registered plugins an opportunity to extract events from top-level
   * native browser events.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @internal
   */
  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
    var events;
    var plugins = EventPluginRegistry.plugins;
    for (var i = 0; i < plugins.length; i++) {
      // Not every plugin in the ordering may be loaded at runtime.
      var possiblePlugin = plugins[i];
      if (possiblePlugin) {
        var extractedEvents = possiblePlugin.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget);
        if (extractedEvents) {
          events = accumulateInto(events, extractedEvents);
        }
      }
    }
    return events;
  },

  /**
   * Enqueues a synthetic event that should be dispatched when
   * `processEventQueue` is invoked.
   *
   * @param {*} events An accumulation of synthetic events.
   * @internal
   */
  enqueueEvents: function (events) {
    if (events) {
      eventQueue = accumulateInto(eventQueue, events);
    }
  },

  /**
   * Dispatches all synthetic events on the event queue.
   *
   * @internal
   */
  processEventQueue: function (simulated) {
    // Set `eventQueue` to null before processing it so that we can tell if more
    // events get enqueued while processing.
    var processingEventQueue = eventQueue;
    eventQueue = null;
    if (simulated) {
      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
    } else {
      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
    }
    !!eventQueue ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing ' + 'an event queue. Support for this has not yet been implemented.') : invariant(false) : undefined;
    // This would be a good time to rethrow if any of the event handlers threw.
    ReactErrorUtils.rethrowCaughtError();
  },

  /**
   * These are needed for tests only. Do not use!
   */
  __purge: function () {
    listenerBank = {};
  },

  __getListenerBank: function () {
    return listenerBank;
  }

};

module.exports = EventPluginHub;
}).call(this,require('_process'))

},{"./EventPluginRegistry":23,"./EventPluginUtils":24,"./ReactErrorUtils":63,"./accumulateInto":109,"./forEachAccumulated":116,"_process":6,"fbjs/lib/invariant":150,"fbjs/lib/warning":161}],23:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginRegistry
 * @typechecks static-only
 */

'use strict';

var invariant = require('fbjs/lib/invariant');

/**
 * Injectable ordering of event plugins.
 */
var EventPluginOrder = null;

/**
 * Injectable mapping from names to event plugin modules.
 */
var namesToPlugins = {};

/**
 * Recomputes the plugin list using the injected plugins and plugin ordering.
 *
 * @private
 */
function recomputePluginOrdering() {
  if (!EventPluginOrder) {
    // Wait until an `EventPluginOrder` is injected.
    return;
  }
  for (var pluginName in namesToPlugins) {
    var PluginModule = namesToPlugins[pluginName];
    var pluginIndex = EventPluginOrder.indexOf(pluginName);
    !(pluginIndex > -1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in ' + 'the plugin ordering, `%s`.', pluginName) : invariant(false) : undefined;
    if (EventPluginRegistry.plugins[pluginIndex]) {
      continue;
    }
    !PluginModule.extractEvents ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` ' + 'method, but `%s` does not.', pluginName) : invariant(false) : undefined;
    EventPluginRegistry.plugins[pluginIndex] = PluginModule;
    var publishedEvents = PluginModule.eventTypes;
    for (var eventName in publishedEvents) {
      !publishEventForPlugin(publishedEvents[eventName], PluginModule, eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : invariant(false) : undefined;
    }
  }
}

/**
 * Publishes an event so that it can be dispatched by the supplied plugin.
 *
 * @param {object} dispatchConfig Dispatch configuration for the event.
 * @param {object} PluginModule Plugin publishing the event.
 * @return {boolean} True if the event was successfully published.
 * @private
 */
function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'event name, `%s`.', eventName) : invariant(false) : undefined;
  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
  if (phasedRegistrationNames) {
    for (var phaseName in phasedRegistrationNames) {
      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
        var phasedRegistrationName = phasedRegistrationNames[phaseName];
        publishRegistrationName(phasedRegistrationName, PluginModule, eventName);
      }
    }
    return true;
  } else if (dispatchConfig.registrationName) {
    publishRegistrationName(dispatchConfig.registrationName, PluginModule, eventName);
    return true;
  }
  return false;
}

/**
 * Publishes a registration name that is used to identify dispatched events and
 * can be used with `EventPluginHub.putListener` to register listeners.
 *
 * @param {string} registrationName Registration name to add.
 * @param {object} PluginModule Plugin publishing the event.
 * @private
 */
function publishRegistrationName(registrationName, PluginModule, eventName) {
  !!EventPluginRegistry.registrationNameModules[registrationName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'registration name, `%s`.', registrationName) : invariant(false) : undefined;
  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
  EventPluginRegistry.registrationNameDependencies[registrationName] = PluginModule.eventTypes[eventName].dependencies;
}

/**
 * Registers plugins so that they can extract and dispatch events.
 *
 * @see {EventPluginHub}
 */
var EventPluginRegistry = {

  /**
   * Ordered list of injected plugins.
   */
  plugins: [],

  /**
   * Mapping from event name to dispatch config
   */
  eventNameDispatchConfigs: {},

  /**
   * Mapping from registration name to plugin module
   */
  registrationNameModules: {},

  /**
   * Mapping from registration name to event name
   */
  registrationNameDependencies: {},

  /**
   * Injects an ordering of plugins (by plugin name). This allows the ordering
   * to be decoupled from injection of the actual plugins so that ordering is
   * always deterministic regardless of packaging, on-the-fly injection, etc.
   *
   * @param {array} InjectedEventPluginOrder
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginOrder}
   */
  injectEventPluginOrder: function (InjectedEventPluginOrder) {
    !!EventPluginOrder ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than ' + 'once. You are likely trying to load more than one copy of React.') : invariant(false) : undefined;
    // Clone the ordering so it cannot be dynamically mutated.
    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
    recomputePluginOrdering();
  },

  /**
   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
   * in the ordering injected by `injectEventPluginOrder`.
   *
   * Plugins can be injected as part of page initialization or on-the-fly.
   *
   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginsByName}
   */
  injectEventPluginsByName: function (injectedNamesToPlugins) {
    var isOrderingDirty = false;
    for (var pluginName in injectedNamesToPlugins) {
      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
        continue;
      }
      var PluginModule = injectedNamesToPlugins[pluginName];
      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== PluginModule) {
        !!namesToPlugins[pluginName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins ' + 'using the same name, `%s`.', pluginName) : invariant(false) : undefined;
        namesToPlugins[pluginName] = PluginModule;
        isOrderingDirty = true;
      }
    }
    if (isOrderingDirty) {
      recomputePluginOrdering();
    }
  },

  /**
   * Looks up the plugin for the supplied event.
   *
   * @param {object} event A synthetic event.
   * @return {?object} The plugin that created the supplied event.
   * @internal
   */
  getPluginModuleForEvent: function (event) {
    var dispatchConfig = event.dispatchConfig;
    if (dispatchConfig.registrationName) {
      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
    }
    for (var phase in dispatchConfig.phasedRegistrationNames) {
      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
        continue;
      }
      var PluginModule = EventPluginRegistry.registrationNameModules[dispatchConfig.phasedRegistrationNames[phase]];
      if (PluginModule) {
        return PluginModule;
      }
    }
    return null;
  },

  /**
   * Exposed for unit testing.
   * @private
   */
  _resetEventPlugins: function () {
    EventPluginOrder = null;
    for (var pluginName in namesToPlugins) {
      if (namesToPlugins.hasOwnProperty(pluginName)) {
        delete namesToPlugins[pluginName];
      }
    }
    EventPluginRegistry.plugins.length = 0;

    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
    for (var eventName in eventNameDispatchConfigs) {
      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
        delete eventNameDispatchConfigs[eventName];
      }
    }

    var registrationNameModules = EventPluginRegistry.registrationNameModules;
    for (var registrationName in registrationNameModules) {
      if (registrationNameModules.hasOwnProperty(registrationName)) {
        delete registrationNameModules[registrationName];
      }
    }
  }

};

module.exports = EventPluginRegistry;
}).call(this,require('_process'))

},{"_process":6,"fbjs/lib/invariant":150}],24:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginUtils
 */

'use strict';

var EventConstants = require('./EventConstants');
var ReactErrorUtils = require('./ReactErrorUtils');

var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

/**
 * Injected dependencies:
 */

/**
 * - `Mount`: [required] Module that can convert between React dom IDs and
 *   actual node references.
 */
var injection = {
  Mount: null,
  injectMount: function (InjectedMount) {
    injection.Mount = InjectedMount;
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(InjectedMount && InjectedMount.getNode && InjectedMount.getID, 'EventPluginUtils.injection.injectMount(...): Injected Mount ' + 'module is missing getNode or getID.') : undefined;
    }
  }
};

var topLevelTypes = EventConstants.topLevelTypes;

function isEndish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseUp || topLevelType === topLevelTypes.topTouchEnd || topLevelType === topLevelTypes.topTouchCancel;
}

function isMoveish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseMove || topLevelType === topLevelTypes.topTouchMove;
}
function isStartish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseDown || topLevelType === topLevelTypes.topTouchStart;
}

var validateEventDispatches;
if (process.env.NODE_ENV !== 'production') {
  validateEventDispatches = function (event) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchIDs = event._dispatchIDs;

    var listenersIsArr = Array.isArray(dispatchListeners);
    var idsIsArr = Array.isArray(dispatchIDs);
    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;

    process.env.NODE_ENV !== 'production' ? warning(idsIsArr === listenersIsArr && IDsLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : undefined;
  };
}

/**
 * Dispatch the event to the listener.
 * @param {SyntheticEvent} event SyntheticEvent to handle
 * @param {boolean} simulated If the event is simulated (changes exn behavior)
 * @param {function} listener Application-level callback
 * @param {string} domID DOM id to pass to the callback.
 */
function executeDispatch(event, simulated, listener, domID) {
  var type = event.type || 'unknown-event';
  event.currentTarget = injection.Mount.getNode(domID);
  if (simulated) {
    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event, domID);
  } else {
    ReactErrorUtils.invokeGuardedCallback(type, listener, event, domID);
  }
  event.currentTarget = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches.
 */
function executeDispatchesInOrder(event, simulated) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchIDs = event._dispatchIDs;
  if (process.env.NODE_ENV !== 'production') {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and IDs are two parallel arrays that are always in sync.
      executeDispatch(event, simulated, dispatchListeners[i], dispatchIDs[i]);
    }
  } else if (dispatchListeners) {
    executeDispatch(event, simulated, dispatchListeners, dispatchIDs);
  }
  event._dispatchListeners = null;
  event._dispatchIDs = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches, but stops
 * at the first dispatch execution returning true, and returns that id.
 *
 * @return {?string} id of the first dispatch execution who's listener returns
 * true, or null if no listener returned true.
 */
function executeDispatchesInOrderStopAtTrueImpl(event) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchIDs = event._dispatchIDs;
  if (process.env.NODE_ENV !== 'production') {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and IDs are two parallel arrays that are always in sync.
      if (dispatchListeners[i](event, dispatchIDs[i])) {
        return dispatchIDs[i];
      }
    }
  } else if (dispatchListeners) {
    if (dispatchListeners(event, dispatchIDs)) {
      return dispatchIDs;
    }
  }
  return null;
}

/**
 * @see executeDispatchesInOrderStopAtTrueImpl
 */
function executeDispatchesInOrderStopAtTrue(event) {
  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
  event._dispatchIDs = null;
  event._dispatchListeners = null;
  return ret;
}

/**
 * Execution of a "direct" dispatch - there must be at most one dispatch
 * accumulated on the event or it is considered an error. It doesn't really make
 * sense for an event with multiple dispatches (bubbled) to keep track of the
 * return values at each dispatch execution, but it does tend to make sense when
 * dealing with "direct" dispatches.
 *
 * @return {*} The return value of executing the single dispatch.
 */
function executeDirectDispatch(event) {
  if (process.env.NODE_ENV !== 'production') {
    validateEventDispatches(event);
  }
  var dispatchListener = event._dispatchListeners;
  var dispatchID = event._dispatchIDs;
  !!Array.isArray(dispatchListener) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : invariant(false) : undefined;
  var res = dispatchListener ? dispatchListener(event, dispatchID) : null;
  event._dispatchListeners = null;
  event._dispatchIDs = null;
  return res;
}

/**
 * @param {SyntheticEvent} event
 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
 */
function hasDispatches(event) {
  return !!event._dispatchListeners;
}

/**
 * General utilities that are useful in creating custom Event Plugins.
 */
var EventPluginUtils = {
  isEndish: isEndish,
  isMoveish: isMoveish,
  isStartish: isStartish,

  executeDirectDispatch: executeDirectDispatch,
  executeDispatchesInOrder: executeDispatchesInOrder,
  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
  hasDispatches: hasDispatches,

  getNode: function (id) {
    return injection.Mount.getNode(id);
  },
  getID: function (node) {
    return injection.Mount.getID(node);
  },

  injection: injection
};

module.exports = EventPluginUtils;
}).call(this,require('_process'))

},{"./EventConstants":21,"./ReactErrorUtils":63,"_process":6,"fbjs/lib/invariant":150,"fbjs/lib/warning":161}],25:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPropagators
 */

'use strict';

var EventConstants = require('./EventConstants');
var EventPluginHub = require('./EventPluginHub');

var warning = require('fbjs/lib/warning');

var accumulateInto = require('./accumulateInto');
var forEachAccumulated = require('./forEachAccumulated');

var PropagationPhases = EventConstants.PropagationPhases;
var getListener = EventPluginHub.getListener;

/**
 * Some event types have a notion of different registration names for different
 * "phases" of propagation. This finds listeners by a given phase.
 */
function listenerAtPhase(id, event, propagationPhase) {
  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
  return getListener(id, registrationName);
}

/**
 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
 * here, allows us to not have to bind or create functions for each event.
 * Mutating the event's members allows us to not have to create a wrapping
 * "dispatch" object that pairs the event with the listener.
 */
function accumulateDirectionalDispatches(domID, upwards, event) {
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(domID, 'Dispatching id must not be null') : undefined;
  }
  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
  var listener = listenerAtPhase(domID, event, phase);
  if (listener) {
    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
    event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);
  }
}

/**
 * Collect dispatches (must be entirely collected before dispatching - see unit
 * tests). Lazily allocate the array to conserve memory.  We must loop through
 * each event and perform the traversal for each one. We cannot perform a
 * single traversal for the entire collection of events because each event may
 * have a different target.
 */
function accumulateTwoPhaseDispatchesSingle(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(event.dispatchMarker, accumulateDirectionalDispatches, event);
  }
}

/**
 * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
 */
function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    EventPluginHub.injection.getInstanceHandle().traverseTwoPhaseSkipTarget(event.dispatchMarker, accumulateDirectionalDispatches, event);
  }
}

/**
 * Accumulates without regard to direction, does not look for phased
 * registration names. Same as `accumulateDirectDispatchesSingle` but without
 * requiring that the `dispatchMarker` be the same as the dispatched ID.
 */
function accumulateDispatches(id, ignoredDirection, event) {
  if (event && event.dispatchConfig.registrationName) {
    var registrationName = event.dispatchConfig.registrationName;
    var listener = getListener(id, registrationName);
    if (listener) {
      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
      event._dispatchIDs = accumulateInto(event._dispatchIDs, id);
    }
  }
}

/**
 * Accumulates dispatches on an `SyntheticEvent`, but only for the
 * `dispatchMarker`.
 * @param {SyntheticEvent} event
 */
function accumulateDirectDispatchesSingle(event) {
  if (event && event.dispatchConfig.registrationName) {
    accumulateDispatches(event.dispatchMarker, null, event);
  }
}

function accumulateTwoPhaseDispatches(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
}

function accumulateTwoPhaseDispatchesSkipTarget(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
}

function accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {
  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(fromID, toID, accumulateDispatches, leave, enter);
}

function accumulateDirectDispatches(events) {
  forEachAccumulated(events, accumulateDirectDispatchesSingle);
}

/**
 * A small set of propagation patterns, each of which will accept a small amount
 * of information, and generate a set of "dispatch ready event objects" - which
 * are sets of events that have already been annotated with a set of dispatched
 * listener functions/ids. The API is designed this way to discourage these
 * propagation strategies from actually executing the dispatches, since we
 * always want to collect the entire set of dispatches before executing event a
 * single one.
 *
 * @constructor EventPropagators
 */
var EventPropagators = {
  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
  accumulateDirectDispatches: accumulateDirectDispatches,
  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
};

module.exports = EventPropagators;
}).call(this,require('_process'))

},{"./EventConstants":21,"./EventPluginHub":22,"./accumulateInto":109,"./forEachAccumulated":116,"_process":6,"fbjs/lib/warning":161}],26:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule FallbackCompositionState
 * @typechecks static-only
 */

'use strict';

var PooledClass = require('./PooledClass');

var assign = require('./Object.assign');
var getTextContentAccessor = require('./getTextContentAccessor');

/**
 * This helper class stores information about text content of a target node,
 * allowing comparison of content before and after a given event.
 *
 * Identify the node where selection currently begins, then observe
 * both its text content and its current position in the DOM. Since the
 * browser may natively replace the target node during composition, we can
 * use its position to find its replacement.
 *
 * @param {DOMEventTarget} root
 */
function FallbackCompositionState(root) {
  this._root = root;
  this._startText = this.getText();
  this._fallbackText = null;
}

assign(FallbackCompositionState.prototype, {
  destructor: function () {
    this._root = null;
    this._startText = null;
    this._fallbackText = null;
  },

  /**
   * Get current text of input.
   *
   * @return {string}
   */
  getText: function () {
    if ('value' in this._root) {
      return this._root.value;
    }
    return this._root[getTextContentAccessor()];
  },

  /**
   * Determine the differing substring between the initially stored
   * text content and the current content.
   *
   * @return {string}
   */
  getData: function () {
    if (this._fallbackText) {
      return this._fallbackText;
    }

    var start;
    var startValue = this._startText;
    var startLength = startValue.length;
    var end;
    var endValue = this.getText();
    var endLength = endValue.length;

    for (start = 0; start < startLength; start++) {
      if (startValue[start] !== endValue[start]) {
        break;
      }
    }

    var minEnd = startLength - start;
    for (end = 1; end <= minEnd; end++) {
      if (startValue[startLength - end] !== endValue[endLength - end]) {
        break;
      }
    }

    var sliceTail = end > 1 ? 1 - end : undefined;
    this._fallbackText = endValue.slice(start, sliceTail);
    return this._fallbackText;
  }
});

PooledClass.addPoolingTo(FallbackCompositionState);

module.exports = FallbackCompositionState;
},{"./Object.assign":29,"./PooledClass":30,"./getTextContentAccessor":123}],27:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule HTMLDOMPropertyConfig
 */

'use strict';

var DOMProperty = require('./DOMProperty');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

var hasSVG;
if (ExecutionEnvironment.canUseDOM) {
  var implementation = document.implementation;
  hasSVG = implementation && implementation.hasFeature && implementation.hasFeature('http://www.w3.org/TR/SVG11/feature#BasicStructure', '1.1');
}

var HTMLDOMPropertyConfig = {
  isCustomAttribute: RegExp.prototype.test.bind(/^(data|aria)-[a-z_][a-z\d_.\-]*$/),
  Properties: {
    /**
     * Standard Properties
     */
    accept: null,
    acceptCharset: null,
    accessKey: null,
    action: null,
    allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    allowTransparency: MUST_USE_ATTRIBUTE,
    alt: null,
    async: HAS_BOOLEAN_VALUE,
    autoComplete: null,
    // autoFocus is polyfilled/normalized by AutoFocusUtils
    // autoFocus: HAS_BOOLEAN_VALUE,
    autoPlay: HAS_BOOLEAN_VALUE,
    capture: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    cellPadding: null,
    cellSpacing: null,
    charSet: MUST_USE_ATTRIBUTE,
    challenge: MUST_USE_ATTRIBUTE,
    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    classID: MUST_USE_ATTRIBUTE,
    // To set className on SVG elements, it's necessary to use .setAttribute;
    // this works on HTML elements too in all browsers except IE8. Conveniently,
    // IE8 doesn't support SVG and so we can simply use the attribute in
    // browsers that support SVG and the property in browsers that don't,
    // regardless of whether the element is HTML or SVG.
    className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,
    cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    colSpan: null,
    content: null,
    contentEditable: null,
    contextMenu: MUST_USE_ATTRIBUTE,
    controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    coords: null,
    crossOrigin: null,
    data: null, // For `<object />` acts as `src`.
    dateTime: MUST_USE_ATTRIBUTE,
    defer: HAS_BOOLEAN_VALUE,
    dir: null,
    disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    download: HAS_OVERLOADED_BOOLEAN_VALUE,
    draggable: null,
    encType: null,
    form: MUST_USE_ATTRIBUTE,
    formAction: MUST_USE_ATTRIBUTE,
    formEncType: MUST_USE_ATTRIBUTE,
    formMethod: MUST_USE_ATTRIBUTE,
    formNoValidate: HAS_BOOLEAN_VALUE,
    formTarget: MUST_USE_ATTRIBUTE,
    frameBorder: MUST_USE_ATTRIBUTE,
    headers: null,
    height: MUST_USE_ATTRIBUTE,
    hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    high: null,
    href: null,
    hrefLang: null,
    htmlFor: null,
    httpEquiv: null,
    icon: null,
    id: MUST_USE_PROPERTY,
    inputMode: MUST_USE_ATTRIBUTE,
    is: MUST_USE_ATTRIBUTE,
    keyParams: MUST_USE_ATTRIBUTE,
    keyType: MUST_USE_ATTRIBUTE,
    label: null,
    lang: null,
    list: MUST_USE_ATTRIBUTE,
    loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    low: null,
    manifest: MUST_USE_ATTRIBUTE,
    marginHeight: null,
    marginWidth: null,
    max: null,
    maxLength: MUST_USE_ATTRIBUTE,
    media: MUST_USE_ATTRIBUTE,
    mediaGroup: null,
    method: null,
    min: null,
    minLength: MUST_USE_ATTRIBUTE,
    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    name: null,
    noValidate: HAS_BOOLEAN_VALUE,
    open: HAS_BOOLEAN_VALUE,
    optimum: null,
    pattern: null,
    placeholder: null,
    poster: null,
    preload: null,
    radioGroup: null,
    readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    rel: null,
    required: HAS_BOOLEAN_VALUE,
    role: MUST_USE_ATTRIBUTE,
    rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    rowSpan: null,
    sandbox: null,
    scope: null,
    scoped: HAS_BOOLEAN_VALUE,
    scrolling: null,
    seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    shape: null,
    size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    sizes: MUST_USE_ATTRIBUTE,
    span: HAS_POSITIVE_NUMERIC_VALUE,
    spellCheck: null,
    src: null,
    srcDoc: MUST_USE_PROPERTY,
    srcSet: MUST_USE_ATTRIBUTE,
    start: HAS_NUMERIC_VALUE,
    step: null,
    style: null,
    summary: null,
    tabIndex: null,
    target: null,
    title: null,
    type: null,
    useMap: null,
    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
    width: MUST_USE_ATTRIBUTE,
    wmode: MUST_USE_ATTRIBUTE,
    wrap: null,

    /**
     * RDFa Properties
     */
    about: MUST_USE_ATTRIBUTE,
    datatype: MUST_USE_ATTRIBUTE,
    inlist: MUST_USE_ATTRIBUTE,
    prefix: MUST_USE_ATTRIBUTE,
    // property is also supported for OpenGraph in meta tags.
    property: MUST_USE_ATTRIBUTE,
    resource: MUST_USE_ATTRIBUTE,
    'typeof': MUST_USE_ATTRIBUTE,
    vocab: MUST_USE_ATTRIBUTE,

    /**
     * Non-standard Properties
     */
    // autoCapitalize and autoCorrect are supported in Mobile Safari for
    // keyboard hints.
    autoCapitalize: null,
    autoCorrect: null,
    // autoSave allows WebKit/Blink to persist values of input fields on page reloads
    autoSave: null,
    // itemProp, itemScope, itemType are for
    // Microdata support. See http://schema.org/docs/gs.html
    itemProp: MUST_USE_ATTRIBUTE,
    itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    itemType: MUST_USE_ATTRIBUTE,
    // itemID and itemRef are for Microdata support as well but
    // only specified in the the WHATWG spec document. See
    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
    itemID: MUST_USE_ATTRIBUTE,
    itemRef: MUST_USE_ATTRIBUTE,
    // results show looking glass icon and recent searches on input
    // search fields in WebKit/Blink
    results: null,
    // IE-only attribute that specifies security restrictions on an iframe
    // as an alternative to the sandbox attribute on IE<10
    security: MUST_USE_ATTRIBUTE,
    // IE-only attribute that controls focus behavior
    unselectable: MUST_USE_ATTRIBUTE
  },
  DOMAttributeNames: {
    acceptCharset: 'accept-charset',
    className: 'class',
    htmlFor: 'for',
    httpEquiv: 'http-equiv'
  },
  DOMPropertyNames: {
    autoCapitalize: 'autocapitalize',
    autoComplete: 'autocomplete',
    autoCorrect: 'autocorrect',
    autoFocus: 'autofocus',
    autoPlay: 'autoplay',
    autoSave: 'autosave',
    // `encoding` is equivalent to `enctype`, IE8 lacks an `enctype` setter.
    // http://www.w3.org/TR/html5/forms.html#dom-fs-encoding
    encType: 'encoding',
    hrefLang: 'hreflang',
    radioGroup: 'radiogroup',
    spellCheck: 'spellcheck',
    srcDoc: 'srcdoc',
    srcSet: 'srcset'
  }
};

module.exports = HTMLDOMPropertyConfig;
},{"./DOMProperty":16,"fbjs/lib/ExecutionEnvironment":136}],28:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule LinkedValueUtils
 * @typechecks static-only
 */

'use strict';

var ReactPropTypes = require('./ReactPropTypes');
var ReactPropTypeLocations = require('./ReactPropTypeLocations');

var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

var hasReadOnlyValue = {
  'button': true,
  'checkbox': true,
  'image': true,
  'hidden': true,
  'radio': true,
  'reset': true,
  'submit': true
};

function _assertSingleLink(inputProps) {
  !(inputProps.checkedLink == null || inputProps.valueLink == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use ' + 'checkedLink, you probably don\'t want to use valueLink and vice versa.') : invariant(false) : undefined;
}
function _assertValueLink(inputProps) {
  _assertSingleLink(inputProps);
  !(inputProps.value == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want ' + 'to use value or onChange, you probably don\'t want to use valueLink.') : invariant(false) : undefined;
}

function _assertCheckedLink(inputProps) {
  _assertSingleLink(inputProps);
  !(inputProps.checked == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. ' + 'If you want to use checked or onChange, you probably don\'t want to ' + 'use checkedLink') : invariant(false) : undefined;
}

var propTypes = {
  value: function (props, propName, componentName) {
    if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
      return null;
    }
    return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
  },
  checked: function (props, propName, componentName) {
    if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
      return null;
    }
    return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
  },
  onChange: ReactPropTypes.func
};

var loggedTypeFailures = {};
function getDeclarationErrorAddendum(owner) {
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

/**
 * Provide a linked `value` attribute for controlled forms. You should not use
 * this outside of the ReactDOM controlled form components.
 */
var LinkedValueUtils = {
  checkPropTypes: function (tagName, props, owner) {
    for (var propName in propTypes) {
      if (propTypes.hasOwnProperty(propName)) {
        var error = propTypes[propName](props, propName, tagName, ReactPropTypeLocations.prop);
      }
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;

        var addendum = getDeclarationErrorAddendum(owner);
        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : undefined;
      }
    }
  },

  /**
   * @param {object} inputProps Props for form component
   * @return {*} current value of the input either from value prop or link.
   */
  getValue: function (inputProps) {
    if (inputProps.valueLink) {
      _assertValueLink(inputProps);
      return inputProps.valueLink.value;
    }
    return inputProps.value;
  },

  /**
   * @param {object} inputProps Props for form component
   * @return {*} current checked status of the input either from checked prop
   *             or link.
   */
  getChecked: function (inputProps) {
    if (inputProps.checkedLink) {
      _assertCheckedLink(inputProps);
      return inputProps.checkedLink.value;
    }
    return inputProps.checked;
  },

  /**
   * @param {object} inputProps Props for form component
   * @param {SyntheticEvent} event change event to handle
   */
  executeOnChange: function (inputProps, event) {
    if (inputProps.valueLink) {
      _assertValueLink(inputProps);
      return inputProps.valueLink.requestChange(event.target.value);
    } else if (inputProps.checkedLink) {
      _assertCheckedLink(inputProps);
      return inputProps.checkedLink.requestChange(event.target.checked);
    } else if (inputProps.onChange) {
      return inputProps.onChange.call(undefined, event);
    }
  }
};

module.exports = LinkedValueUtils;
}).call(this,require('_process'))

},{"./ReactPropTypeLocations":80,"./ReactPropTypes":81,"_process":6,"fbjs/lib/invariant":150,"fbjs/lib/warning":161}],29:[function(require,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Object.assign
 */

// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign

'use strict';

function assign(target, sources) {
  if (target == null) {
    throw new TypeError('Object.assign target cannot be null or undefined');
  }

  var to = Object(target);
  var hasOwnProperty = Object.prototype.hasOwnProperty;

  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
    var nextSource = arguments[nextIndex];
    if (nextSource == null) {
      continue;
    }

    var from = Object(nextSource);

    // We don't currently support accessors nor proxies. Therefore this
    // copy cannot throw. If we ever supported this then we must handle
    // exceptions and side-effects. We don't support symbols so they won't
    // be transferred.

    for (var key in from) {
      if (hasOwnProperty.call(from, key)) {
        to[key] = from[key];
      }
    }
  }

  return to;
}

module.exports = assign;
},{}],30:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule PooledClass
 */

'use strict';

var invariant = require('fbjs/lib/invariant');

/**
 * Static poolers. Several custom versions for each potential number of
 * arguments. A completely generic pooler is easy to implement, but would
 * require accessing the `arguments` object. In each of these, `this` refers to
 * the Class itself, not an instance. If any others are needed, simply add them
 * here, or in their own files.
 */
var oneArgumentPooler = function (copyFieldsFrom) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, copyFieldsFrom);
    return instance;
  } else {
    return new Klass(copyFieldsFrom);
  }
};

var twoArgumentPooler = function (a1, a2) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2);
    return instance;
  } else {
    return new Klass(a1, a2);
  }
};

var threeArgumentPooler = function (a1, a2, a3) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3);
    return instance;
  } else {
    return new Klass(a1, a2, a3);
  }
};

var fourArgumentPooler = function (a1, a2, a3, a4) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4);
  }
};

var fiveArgumentPooler = function (a1, a2, a3, a4, a5) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4, a5);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4, a5);
  }
};

var standardReleaser = function (instance) {
  var Klass = this;
  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : invariant(false) : undefined;
  instance.destructor();
  if (Klass.instancePool.length < Klass.poolSize) {
    Klass.instancePool.push(instance);
  }
};

var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;

/**
 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
 * itself (statically) not adding any prototypical fields. Any CopyConstructor
 * you give this may have a `poolSize` property, and will look for a
 * prototypical `destructor` on instances (optional).
 *
 * @param {Function} CopyConstructor Constructor that can be used to reset.
 * @param {Function} pooler Customizable pooler.
 */
var addPoolingTo = function (CopyConstructor, pooler) {
  var NewKlass = CopyConstructor;
  NewKlass.instancePool = [];
  NewKlass.getPooled = pooler || DEFAULT_POOLER;
  if (!NewKlass.poolSize) {
    NewKlass.poolSize = DEFAULT_POOL_SIZE;
  }
  NewKlass.release = standardReleaser;
  return NewKlass;
};

var PooledClass = {
  addPoolingTo: addPoolingTo,
  oneArgumentPooler: oneArgumentPooler,
  twoArgumentPooler: twoArgumentPooler,
  threeArgumentPooler: threeArgumentPooler,
  fourArgumentPooler: fourArgumentPooler,
  fiveArgumentPooler: fiveArgumentPooler
};

module.exports = PooledClass;
}).call(this,require('_process'))

},{"_process":6,"fbjs/lib/invariant":150}],31:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule React
 */

'use strict';

var ReactDOM = require('./ReactDOM');
var ReactDOMServer = require('./ReactDOMServer');
var ReactIsomorphic = require('./ReactIsomorphic');

var assign = require('./Object.assign');
var deprecated = require('./deprecated');

// `version` will be added here by ReactIsomorphic.
var React = {};

assign(React, ReactIsomorphic);

assign(React, {
  // ReactDOM
  findDOMNode: deprecated('findDOMNode', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.findDOMNode),
  render: deprecated('render', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.render),
  unmountComponentAtNode: deprecated('unmountComponentAtNode', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.unmountComponentAtNode),

  // ReactDOMServer
  renderToString: deprecated('renderToString', 'ReactDOMServer', 'react-dom/server', ReactDOMServer, ReactDOMServer.renderToString),
  renderToStaticMarkup: deprecated('renderToStaticMarkup', 'ReactDOMServer', 'react-dom/server', ReactDOMServer, ReactDOMServer.renderToStaticMarkup)
});

React.__SECRET_DOM_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactDOM;

module.exports = React;
},{"./Object.assign":29,"./ReactDOM":42,"./ReactDOMServer":52,"./ReactIsomorphic":70,"./deprecated":112}],32:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactBrowserComponentMixin
 */

'use strict';

var ReactInstanceMap = require('./ReactInstanceMap');

var findDOMNode = require('./findDOMNode');
var warning = require('fbjs/lib/warning');

var didWarnKey = '_getDOMNodeDidWarn';

var ReactBrowserComponentMixin = {
  /**
   * Returns the DOM node rendered by this component.
   *
   * @return {DOMElement} The root node of this component.
   * @final
   * @protected
   */
  getDOMNode: function () {
    process.env.NODE_ENV !== 'production' ? warning(this.constructor[didWarnKey], '%s.getDOMNode(...) is deprecated. Please use ' + 'ReactDOM.findDOMNode(instance) instead.', ReactInstanceMap.get(this).getName() || this.tagName || 'Unknown') : undefined;
    this.constructor[didWarnKey] = true;
    return findDOMNode(this);
  }
};

module.exports = ReactBrowserComponentMixin;
}).call(this,require('_process'))

},{"./ReactInstanceMap":69,"./findDOMNode":114,"_process":6,"fbjs/lib/warning":161}],33:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactBrowserEventEmitter
 * @typechecks static-only
 */

'use strict';

var EventConstants = require('./EventConstants');
var EventPluginHub = require('./EventPluginHub');
var EventPluginRegistry = require('./EventPluginRegistry');
var ReactEventEmitterMixin = require('./ReactEventEmitterMixin');
var ReactPerf = require('./ReactPerf');
var ViewportMetrics = require('./ViewportMetrics');

var assign = require('./Object.assign');
var isEventSupported = require('./isEventSupported');

/**
 * Summary of `ReactBrowserEventEmitter` event handling:
 *
 *  - Top-level delegation is used to trap most native browser events. This
 *    may only occur in the main thread and is the responsibility of
 *    ReactEventListener, which is injected and can therefore support pluggable
 *    event sources. This is the only work that occurs in the main thread.
 *
 *  - We normalize and de-duplicate events to account for browser quirks. This
 *    may be done in the worker thread.
 *
 *  - Forward these native events (with the associated top-level type used to
 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
 *    to extract any synthetic events.
 *
 *  - The `EventPluginHub` will then process each event by annotating them with
 *    "dispatches", a sequence of listeners and IDs that care about that event.
 *
 *  - The `EventPluginHub` then dispatches the events.
 *
 * Overview of React and the event system:
 *
 * +------------+    .
 * |    DOM     |    .
 * +------------+    .
 *       |           .
 *       v           .
 * +------------+    .
 * | ReactEvent |    .
 * |  Listener  |    .
 * +------------+    .                         +-----------+
 *       |           .               +--------+|SimpleEvent|
 *       |           .               |         |Plugin     |
 * +-----|------+    .               v         +-----------+
 * |     |      |    .    +--------------+                    +------------+
 * |     +-----------.--->|EventPluginHub|                    |    Event   |
 * |            |    .    |              |     +-----------+  | Propagators|
 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
 * |            |    .    |              |     +-----------+  |  utilities |
 * |     +-----------.--->|              |                    +------------+
 * |     |      |    .    +--------------+
 * +-----|------+    .                ^        +-----------+
 *       |           .                |        |Enter/Leave|
 *       +           .                +-------+|Plugin     |
 * +-------------+   .                         +-----------+
 * | application |   .
 * |-------------|   .
 * |             |   .
 * |             |   .
 * +-------------+   .
 *                   .
 *    React Core     .  General Purpose Event Plugin System
 */

var alreadyListeningTo = {};
var isMonitoringScrollValue = false;
var reactTopListenersCounter = 0;

// For events like 'submit' which don't consistently bubble (which we trap at a
// lower node than `document`), binding at `document` would cause duplicate
// events so we don't include them here
var topEventMapping = {
  topAbort: 'abort',
  topBlur: 'blur',
  topCanPlay: 'canplay',
  topCanPlayThrough: 'canplaythrough',
  topChange: 'change',
  topClick: 'click',
  topCompositionEnd: 'compositionend',
  topCompositionStart: 'compositionstart',
  topCompositionUpdate: 'compositionupdate',
  topContextMenu: 'contextmenu',
  topCopy: 'copy',
  topCut: 'cut',
  topDoubleClick: 'dblclick',
  topDrag: 'drag',
  topDragEnd: 'dragend',
  topDragEnter: 'dragenter',
  topDragExit: 'dragexit',
  topDragLeave: 'dragleave',
  topDragOver: 'dragover',
  topDragStart: 'dragstart',
  topDrop: 'drop',
  topDurationChange: 'durationchange',
  topEmptied: 'emptied',
  topEncrypted: 'encrypted',
  topEnded: 'ended',
  topError: 'error',
  topFocus: 'focus',
  topInput: 'input',
  topKeyDown: 'keydown',
  topKeyPress: 'keypress',
  topKeyUp: 'keyup',
  topLoadedData: 'loadeddata',
  topLoadedMetadata: 'loadedmetadata',
  topLoadStart: 'loadstart',
  topMouseDown: 'mousedown',
  topMouseMove: 'mousemove',
  topMouseOut: 'mouseout',
  topMouseOver: 'mouseover',
  topMouseUp: 'mouseup',
  topPaste: 'paste',
  topPause: 'pause',
  topPlay: 'play',
  topPlaying: 'playing',
  topProgress: 'progress',
  topRateChange: 'ratechange',
  topScroll: 'scroll',
  topSeeked: 'seeked',
  topSeeking: 'seeking',
  topSelectionChange: 'selectionchange',
  topStalled: 'stalled',
  topSuspend: 'suspend',
  topTextInput: 'textInput',
  topTimeUpdate: 'timeupdate',
  topTouchCancel: 'touchcancel',
  topTouchEnd: 'touchend',
  topTouchMove: 'touchmove',
  topTouchStart: 'touchstart',
  topVolumeChange: 'volumechange',
  topWaiting: 'waiting',
  topWheel: 'wheel'
};

/**
 * To ensure no conflicts with other potential React instances on the page
 */
var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);

function getListeningForDocument(mountAt) {
  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
  // directly.
  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
    mountAt[topListenersIDKey] = reactTopListenersCounter++;
    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
  }
  return alreadyListeningTo[mountAt[topListenersIDKey]];
}

/**
 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
 * example:
 *
 *   ReactBrowserEventEmitter.putListener('myID', 'onClick', myFunction);
 *
 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
 *
 * @internal
 */
var ReactBrowserEventEmitter = assign({}, ReactEventEmitterMixin, {

  /**
   * Injectable event backend
   */
  ReactEventListener: null,

  injection: {
    /**
     * @param {object} ReactEventListener
     */
    injectReactEventListener: function (ReactEventListener) {
      ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);
      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
    }
  },

  /**
   * Sets whether or not any created callbacks should be enabled.
   *
   * @param {boolean} enabled True if callbacks should be enabled.
   */
  setEnabled: function (enabled) {
    if (ReactBrowserEventEmitter.ReactEventListener) {
      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
    }
  },

  /**
   * @return {boolean} True if callbacks are enabled.
   */
  isEnabled: function () {
    return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());
  },

  /**
   * We listen for bubbled touch events on the document object.
   *
   * Firefox v8.01 (and possibly others) exhibited strange behavior when
   * mounting `onmousemove` events at some node that was not the document
   * element. The symptoms were that if your mouse is not moving over something
   * contained within that mount point (for example on the background) the
   * top-level listeners for `onmousemove` won't be called. However, if you
   * register the `mousemove` on the document object, then it will of course
   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
   * top-level listeners to the document object only, at least for these
   * movement types of events and possibly all events.
   *
   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
   *
   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
   * they bubble to document.
   *
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {object} contentDocumentHandle Document which owns the container
   */
  listenTo: function (registrationName, contentDocumentHandle) {
    var mountAt = contentDocumentHandle;
    var isListening = getListeningForDocument(mountAt);
    var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];

    var topLevelTypes = EventConstants.topLevelTypes;
    for (var i = 0; i < dependencies.length; i++) {
      var dependency = dependencies[i];
      if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
        if (dependency === topLevelTypes.topWheel) {
          if (isEventSupported('wheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'wheel', mountAt);
          } else if (isEventSupported('mousewheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'mousewheel', mountAt);
          } else {
            // Firefox needs to capture a different mouse scroll event.
            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'DOMMouseScroll', mountAt);
          }
        } else if (dependency === topLevelTypes.topScroll) {

          if (isEventSupported('scroll', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topScroll, 'scroll', mountAt);
          } else {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topScroll, 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);
          }
        } else if (dependency === topLevelTypes.topFocus || dependency === topLevelTypes.topBlur) {

          if (isEventSupported('focus', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topFocus, 'focus', mountAt);
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topBlur, 'blur', mountAt);
          } else if (isEventSupported('focusin')) {
            // IE has `focusin` and `focusout` events which bubble.
            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topFocus, 'focusin', mountAt);
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topBlur, 'focusout', mountAt);
          }

          // to make sure blur and focus event listeners are only attached once
          isListening[topLevelTypes.topBlur] = true;
          isListening[topLevelTypes.topFocus] = true;
        } else if (topEventMapping.hasOwnProperty(dependency)) {
          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);
        }

        isListening[dependency] = true;
      }
    }
  },

  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);
  },

  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);
  },

  /**
   * Listens to window scroll and resize events. We cache scroll values so that
   * application code can access them without triggering reflows.
   *
   * NOTE: Scroll events do not bubble.
   *
   * @see http://www.quirksmode.org/dom/events/scroll.html
   */
  ensureScrollValueMonitoring: function () {
    if (!isMonitoringScrollValue) {
      var refresh = ViewportMetrics.refreshScrollValues;
      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
      isMonitoringScrollValue = true;
    }
  },

  eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,

  registrationNameModules: EventPluginHub.registrationNameModules,

  putListener: EventPluginHub.putListener,

  getListener: EventPluginHub.getListener,

  deleteListener: EventPluginHub.deleteListener,

  deleteAllListeners: EventPluginHub.deleteAllListeners

});

ReactPerf.measureMethods(ReactBrowserEventEmitter, 'ReactBrowserEventEmitter', {
  putListener: 'putListener',
  deleteListener: 'deleteListener'
});

module.exports = ReactBrowserEventEmitter;
},{"./EventConstants":21,"./EventPluginHub":22,"./EventPluginRegistry":23,"./Object.assign":29,"./ReactEventEmitterMixin":64,"./ReactPerf":78,"./ViewportMetrics":108,"./isEventSupported":125}],34:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactChildReconciler
 * @typechecks static-only
 */

'use strict';

var ReactReconciler = require('./ReactReconciler');

var instantiateReactComponent = require('./instantiateReactComponent');
var shouldUpdateReactComponent = require('./shouldUpdateReactComponent');
var traverseAllChildren = require('./traverseAllChildren');
var warning = require('fbjs/lib/warning');

function instantiateChild(childInstances, child, name) {
  // We found a component instance.
  var keyUnique = childInstances[name] === undefined;
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', name) : undefined;
  }
  if (child != null && keyUnique) {
    childInstances[name] = instantiateReactComponent(child, null);
  }
}

/**
 * ReactChildReconciler provides helpers for initializing or updating a set of
 * children. Its output is suitable for passing it onto ReactMultiChild which
 * does diffed reordering and insertion.
 */
var ReactChildReconciler = {
  /**
   * Generates a "mount image" for each of the supplied children. In the case
   * of `ReactDOMComponent`, a mount image is a string of markup.
   *
   * @param {?object} nestedChildNodes Nested child maps.
   * @return {?object} A set of child instances.
   * @internal
   */
  instantiateChildren: function (nestedChildNodes, transaction, context) {
    if (nestedChildNodes == null) {
      return null;
    }
    var childInstances = {};
    traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);
    return childInstances;
  },

  /**
   * Updates the rendered children and returns a new set of children.
   *
   * @param {?object} prevChildren Previously initialized set of children.
   * @param {?object} nextChildren Flat child element maps.
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   * @return {?object} A new set of child instances.
   * @internal
   */
  updateChildren: function (prevChildren, nextChildren, transaction, context) {
    // We currently don't have a way to track moves here but if we use iterators
    // instead of for..in we can zip the iterators and check if an item has
    // moved.
    // TODO: If nothing has changed, return the prevChildren object so that we
    // can quickly bailout if nothing has changed.
    if (!nextChildren && !prevChildren) {
      return null;
    }
    var name;
    for (name in nextChildren) {
      if (!nextChildren.hasOwnProperty(name)) {
        continue;
      }
      var prevChild = prevChildren && prevChildren[name];
      var prevElement = prevChild && prevChild._currentElement;
      var nextElement = nextChildren[name];
      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {
        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);
        nextChildren[name] = prevChild;
      } else {
        if (prevChild) {
          ReactReconciler.unmountComponent(prevChild, name);
        }
        // The child must be instantiated before it's mounted.
        var nextChildInstance = instantiateReactComponent(nextElement, null);
        nextChildren[name] = nextChildInstance;
      }
    }
    // Unmount children that are no longer present.
    for (name in prevChildren) {
      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
        ReactReconciler.unmountComponent(prevChildren[name]);
      }
    }
    return nextChildren;
  },

  /**
   * Unmounts all rendered children. This should be used to clean up children
   * when this component is unmounted.
   *
   * @param {?object} renderedChildren Previously initialized set of children.
   * @internal
   */
  unmountChildren: function (renderedChildren) {
    for (var name in renderedChildren) {
      if (renderedChildren.hasOwnProperty(name)) {
        var renderedChild = renderedChildren[name];
        ReactReconciler.unmountComponent(renderedChild);
      }
    }
  }

};

module.exports = ReactChildReconciler;
}).call(this,require('_process'))

},{"./ReactReconciler":83,"./instantiateReactComponent":124,"./shouldUpdateReactComponent":132,"./traverseAllChildren":133,"_process":6,"fbjs/lib/warning":161}],35:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactChildren
 */

'use strict';

var PooledClass = require('./PooledClass');
var ReactElement = require('./ReactElement');

var emptyFunction = require('fbjs/lib/emptyFunction');
var traverseAllChildren = require('./traverseAllChildren');

var twoArgumentPooler = PooledClass.twoArgumentPooler;
var fourArgumentPooler = PooledClass.fourArgumentPooler;

var userProvidedKeyEscapeRegex = /\/(?!\/)/g;
function escapeUserProvidedKey(text) {
  return ('' + text).replace(userProvidedKeyEscapeRegex, '//');
}

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * traversal. Allows avoiding binding callbacks.
 *
 * @constructor ForEachBookKeeping
 * @param {!function} forEachFunction Function to perform traversal with.
 * @param {?*} forEachContext Context to perform context with.
 */
function ForEachBookKeeping(forEachFunction, forEachContext) {
  this.func = forEachFunction;
  this.context = forEachContext;
  this.count = 0;
}
ForEachBookKeeping.prototype.destructor = function () {
  this.func = null;
  this.context = null;
  this.count = 0;
};
PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

function forEachSingleChild(bookKeeping, child, name) {
  var func = bookKeeping.func;
  var context = bookKeeping.context;

  func.call(context, child, bookKeeping.count++);
}

/**
 * Iterates through children that are typically specified as `props.children`.
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc
 * @param {*} forEachContext Context for forEachContext.
 */
function forEachChildren(children, forEachFunc, forEachContext) {
  if (children == null) {
    return children;
  }
  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
  traverseAllChildren(children, forEachSingleChild, traverseContext);
  ForEachBookKeeping.release(traverseContext);
}

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * mapping. Allows avoiding binding callbacks.
 *
 * @constructor MapBookKeeping
 * @param {!*} mapResult Object containing the ordered map of results.
 * @param {!function} mapFunction Function to perform mapping with.
 * @param {?*} mapContext Context to perform mapping with.
 */
function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
  this.result = mapResult;
  this.keyPrefix = keyPrefix;
  this.func = mapFunction;
  this.context = mapContext;
  this.count = 0;
}
MapBookKeeping.prototype.destructor = function () {
  this.result = null;
  this.keyPrefix = null;
  this.func = null;
  this.context = null;
  this.count = 0;
};
PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);

function mapSingleChildIntoContext(bookKeeping, child, childKey) {
  var result = bookKeeping.result;
  var keyPrefix = bookKeeping.keyPrefix;
  var func = bookKeeping.func;
  var context = bookKeeping.context;

  var mappedChild = func.call(context, child, bookKeeping.count++);
  if (Array.isArray(mappedChild)) {
    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
  } else if (mappedChild != null) {
    if (ReactElement.isValidElement(mappedChild)) {
      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
      // Keep both the (mapped) and old keys if they differ, just as
      // traverseAllChildren used to do for objects as children
      keyPrefix + (mappedChild !== child ? escapeUserProvidedKey(mappedChild.key || '') + '/' : '') + childKey);
    }
    result.push(mappedChild);
  }
}

function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
  var escapedPrefix = '';
  if (prefix != null) {
    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
  }
  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
  MapBookKeeping.release(traverseContext);
}

/**
 * Maps children that are typically specified as `props.children`.
 *
 * The provided mapFunction(child, key, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} func The map function.
 * @param {*} context Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */
function mapChildren(children, func, context) {
  if (children == null) {
    return children;
  }
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
  return result;
}

function forEachSingleChildDummy(traverseContext, child, name) {
  return null;
}

/**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */
function countChildren(children, context) {
  return traverseAllChildren(children, forEachSingleChildDummy, null);
}

/**
 * Flatten a children object (typically specified as `props.children`) and
 * return an array with appropriately re-keyed children.
 */
function toArray(children) {
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
  return result;
}

var ReactChildren = {
  forEach: forEachChildren,
  map: mapChildren,
  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
  count: countChildren,
  toArray: toArray
};

module.exports = ReactChildren;
},{"./PooledClass":30,"./ReactElement":59,"./traverseAllChildren":133,"fbjs/lib/emptyFunction":142}],36:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactClass
 */

'use strict';

var ReactComponent = require('./ReactComponent');
var ReactElement = require('./ReactElement');
var ReactPropTypeLocations = require('./ReactPropTypeLocations');
var ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');
var ReactNoopUpdateQueue = require('./ReactNoopUpdateQueue');

var assign = require('./Object.assign');
var emptyObject = require('fbjs/lib/emptyObject');
var invariant = require('fbjs/lib/invariant');
var keyMirror = require('fbjs/lib/keyMirror');
var keyOf = require('fbjs/lib/keyOf');
var warning = require('fbjs/lib/warning');

var MIXINS_KEY = keyOf({ mixins: null });

/**
 * Policies that describe methods in `ReactClassInterface`.
 */
var SpecPolicy = keyMirror({
  /**
   * These methods may be defined only once by the class specification or mixin.
   */
  DEFINE_ONCE: null,
  /**
   * These methods may be defined by both the class specification and mixins.
   * Subsequent definitions will be chained. These methods must return void.
   */
  DEFINE_MANY: null,
  /**
   * These methods are overriding the base class.
   */
  OVERRIDE_BASE: null,
  /**
   * These methods are similar to DEFINE_MANY, except we assume they return
   * objects. We try to merge the keys of the return values of all the mixed in
   * functions. If there is a key conflict we throw.
   */
  DEFINE_MANY_MERGED: null
});

var injectedMixins = [];

var warnedSetProps = false;
function warnSetProps() {
  if (!warnedSetProps) {
    warnedSetProps = true;
    process.env.NODE_ENV !== 'production' ? warning(false, 'setProps(...) and replaceProps(...) are deprecated. ' + 'Instead, call render again at the top level.') : undefined;
  }
}

/**
 * Composite components are higher-level components that compose other composite
 * or native components.
 *
 * To create a new type of `ReactClass`, pass a specification of
 * your new class to `React.createClass`. The only requirement of your class
 * specification is that you implement a `render` method.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return <div>Hello World</div>;
 *     }
 *   });
 *
 * The class specification supports a specific protocol of methods that have
 * special meaning (e.g. `render`). See `ReactClassInterface` for
 * more the comprehensive protocol. Any other properties and methods in the
 * class specification will be available on the prototype.
 *
 * @interface ReactClassInterface
 * @internal
 */
var ReactClassInterface = {

  /**
   * An array of Mixin objects to include when defining your component.
   *
   * @type {array}
   * @optional
   */
  mixins: SpecPolicy.DEFINE_MANY,

  /**
   * An object containing properties and methods that should be defined on
   * the component's constructor instead of its prototype (static methods).
   *
   * @type {object}
   * @optional
   */
  statics: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of prop types for this component.
   *
   * @type {object}
   * @optional
   */
  propTypes: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of context types for this component.
   *
   * @type {object}
   * @optional
   */
  contextTypes: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of context types this component sets for its children.
   *
   * @type {object}
   * @optional
   */
  childContextTypes: SpecPolicy.DEFINE_MANY,

  // ==== Definition methods ====

  /**
   * Invoked when the component is mounted. Values in the mapping will be set on
   * `this.props` if that prop is not specified (i.e. using an `in` check).
   *
   * This method is invoked before `getInitialState` and therefore cannot rely
   * on `this.state` or use `this.setState`.
   *
   * @return {object}
   * @optional
   */
  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * Invoked once before the component is mounted. The return value will be used
   * as the initial value of `this.state`.
   *
   *   getInitialState: function() {
   *     return {
   *       isOn: false,
   *       fooBaz: new BazFoo()
   *     }
   *   }
   *
   * @return {object}
   * @optional
   */
  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * @return {object}
   * @optional
   */
  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * Uses props from `this.props` and state from `this.state` to render the
   * structure of the component.
   *
   * No guarantees are made about when or how often this method is invoked, so
   * it must not have side effects.
   *
   *   render: function() {
   *     var name = this.props.name;
   *     return <div>Hello, {name}!</div>;
   *   }
   *
   * @return {ReactComponent}
   * @nosideeffects
   * @required
   */
  render: SpecPolicy.DEFINE_ONCE,

  // ==== Delegate methods ====

  /**
   * Invoked when the component is initially created and about to be mounted.
   * This may have side effects, but any external subscriptions or data created
   * by this method must be cleaned up in `componentWillUnmount`.
   *
   * @optional
   */
  componentWillMount: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component has been mounted and has a DOM representation.
   * However, there is no guarantee that the DOM node is in the document.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been mounted (initialized and rendered) for the first time.
   *
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidMount: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked before the component receives new props.
   *
   * Use this as an opportunity to react to a prop transition by updating the
   * state using `this.setState`. Current props are accessed via `this.props`.
   *
   *   componentWillReceiveProps: function(nextProps, nextContext) {
   *     this.setState({
   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
   *     });
   *   }
   *
   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
   * transition may cause a state change, but the opposite is not true. If you
   * need it, you are probably looking for `componentWillUpdate`.
   *
   * @param {object} nextProps
   * @optional
   */
  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked while deciding if the component should be updated as a result of
   * receiving new props, state and/or context.
   *
   * Use this as an opportunity to `return false` when you're certain that the
   * transition to the new props/state/context will not require a component
   * update.
   *
   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
   *     return !equal(nextProps, this.props) ||
   *       !equal(nextState, this.state) ||
   *       !equal(nextContext, this.context);
   *   }
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @return {boolean} True if the component should update.
   * @optional
   */
  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,

  /**
   * Invoked when the component is about to update due to a transition from
   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
   * and `nextContext`.
   *
   * Use this as an opportunity to perform preparation before an update occurs.
   *
   * NOTE: You **cannot** use `this.setState()` in this method.
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @param {ReactReconcileTransaction} transaction
   * @optional
   */
  componentWillUpdate: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component's DOM representation has been updated.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been updated.
   *
   * @param {object} prevProps
   * @param {?object} prevState
   * @param {?object} prevContext
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidUpdate: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component is about to be removed from its parent and have
   * its DOM representation destroyed.
   *
   * Use this as an opportunity to deallocate any external resources.
   *
   * NOTE: There is no `componentDidUnmount` since your component will have been
   * destroyed by that point.
   *
   * @optional
   */
  componentWillUnmount: SpecPolicy.DEFINE_MANY,

  // ==== Advanced methods ====

  /**
   * Updates the component's currently mounted DOM representation.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   * @overridable
   */
  updateComponent: SpecPolicy.OVERRIDE_BASE

};

/**
 * Mapping from class specification keys to special processing functions.
 *
 * Although these are declared like instance properties in the specification
 * when defining classes using `React.createClass`, they are actually static
 * and are accessible on the constructor instead of the prototype. Despite
 * being static, they must be defined outside of the "statics" key under
 * which all other static methods are defined.
 */
var RESERVED_SPEC_KEYS = {
  displayName: function (Constructor, displayName) {
    Constructor.displayName = displayName;
  },
  mixins: function (Constructor, mixins) {
    if (mixins) {
      for (var i = 0; i < mixins.length; i++) {
        mixSpecIntoComponent(Constructor, mixins[i]);
      }
    }
  },
  childContextTypes: function (Constructor, childContextTypes) {
    if (process.env.NODE_ENV !== 'production') {
      validateTypeDef(Constructor, childContextTypes, ReactPropTypeLocations.childContext);
    }
    Constructor.childContextTypes = assign({}, Constructor.childContextTypes, childContextTypes);
  },
  contextTypes: function (Constructor, contextTypes) {
    if (process.env.NODE_ENV !== 'production') {
      validateTypeDef(Constructor, contextTypes, ReactPropTypeLocations.context);
    }
    Constructor.contextTypes = assign({}, Constructor.contextTypes, contextTypes);
  },
  /**
   * Special case getDefaultProps which should move into statics but requires
   * automatic merging.
   */
  getDefaultProps: function (Constructor, getDefaultProps) {
    if (Constructor.getDefaultProps) {
      Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);
    } else {
      Constructor.getDefaultProps = getDefaultProps;
    }
  },
  propTypes: function (Constructor, propTypes) {
    if (process.env.NODE_ENV !== 'production') {
      validateTypeDef(Constructor, propTypes, ReactPropTypeLocations.prop);
    }
    Constructor.propTypes = assign({}, Constructor.propTypes, propTypes);
  },
  statics: function (Constructor, statics) {
    mixStaticSpecIntoComponent(Constructor, statics);
  },
  autobind: function () {} };

// noop
function validateTypeDef(Constructor, typeDef, location) {
  for (var propName in typeDef) {
    if (typeDef.hasOwnProperty(propName)) {
      // use a warning instead of an invariant so components
      // don't show up in prod but not in __DEV__
      process.env.NODE_ENV !== 'production' ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : undefined;
    }
  }
}

function validateMethodOverride(proto, name) {
  var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;

  // Disallow overriding of base class methods unless explicitly allowed.
  if (ReactClassMixin.hasOwnProperty(name)) {
    !(specPolicy === SpecPolicy.OVERRIDE_BASE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to override ' + '`%s` from your class specification. Ensure that your method names ' + 'do not overlap with React methods.', name) : invariant(false) : undefined;
  }

  // Disallow defining methods more than once unless explicitly allowed.
  if (proto.hasOwnProperty(name)) {
    !(specPolicy === SpecPolicy.DEFINE_MANY || specPolicy === SpecPolicy.DEFINE_MANY_MERGED) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to define ' + '`%s` on your component more than once. This conflict may be due ' + 'to a mixin.', name) : invariant(false) : undefined;
  }
}

/**
 * Mixin helper which handles policy validation and reserved
 * specification keys when building React classses.
 */
function mixSpecIntoComponent(Constructor, spec) {
  if (!spec) {
    return;
  }

  !(typeof spec !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to ' + 'use a component class as a mixin. Instead, just use a regular object.') : invariant(false) : undefined;
  !!ReactElement.isValidElement(spec) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to ' + 'use a component as a mixin. Instead, just use a regular object.') : invariant(false) : undefined;

  var proto = Constructor.prototype;

  // By handling mixins before any other properties, we ensure the same
  // chaining order is applied to methods with DEFINE_MANY policy, whether
  // mixins are listed before or after these methods in the spec.
  if (spec.hasOwnProperty(MIXINS_KEY)) {
    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
  }

  for (var name in spec) {
    if (!spec.hasOwnProperty(name)) {
      continue;
    }

    if (name === MIXINS_KEY) {
      // We have already handled mixins in a special case above.
      continue;
    }

    var property = spec[name];
    validateMethodOverride(proto, name);

    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
      RESERVED_SPEC_KEYS[name](Constructor, property);
    } else {
      // Setup methods on prototype:
      // The following member methods should not be automatically bound:
      // 1. Expected ReactClass methods (in the "interface").
      // 2. Overridden methods (that were mixed in).
      var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
      var isAlreadyDefined = proto.hasOwnProperty(name);
      var isFunction = typeof property === 'function';
      var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;

      if (shouldAutoBind) {
        if (!proto.__reactAutoBindMap) {
          proto.__reactAutoBindMap = {};
        }
        proto.__reactAutoBindMap[name] = property;
        proto[name] = property;
      } else {
        if (isAlreadyDefined) {
          var specPolicy = ReactClassInterface[name];

          // These cases should already be caught by validateMethodOverride.
          !(isReactClassMethod && (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s ' + 'when mixing in component specs.', specPolicy, name) : invariant(false) : undefined;

          // For methods which are defined more than once, call the existing
          // methods before calling the new property, merging if appropriate.
          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
            proto[name] = createMergedResultFunction(proto[name], property);
          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
            proto[name] = createChainedFunction(proto[name], property);
          }
        } else {
          proto[name] = property;
          if (process.env.NODE_ENV !== 'production') {
            // Add verbose displayName to the function, which helps when looking
            // at profiling tools.
            if (typeof property === 'function' && spec.displayName) {
              proto[name].displayName = spec.displayName + '_' + name;
            }
          }
        }
      }
    }
  }
}

function mixStaticSpecIntoComponent(Constructor, statics) {
  if (!statics) {
    return;
  }
  for (var name in statics) {
    var property = statics[name];
    if (!statics.hasOwnProperty(name)) {
      continue;
    }

    var isReserved = (name in RESERVED_SPEC_KEYS);
    !!isReserved ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define a reserved ' + 'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' + 'as an instance property instead; it will still be accessible on the ' + 'constructor.', name) : invariant(false) : undefined;

    var isInherited = (name in Constructor);
    !!isInherited ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define ' + '`%s` on your component more than once. This conflict may be ' + 'due to a mixin.', name) : invariant(false) : undefined;
    Constructor[name] = property;
  }
}

/**
 * Merge two objects, but throw if both contain the same key.
 *
 * @param {object} one The first object, which is mutated.
 * @param {object} two The second object
 * @return {object} one after it has been mutated to contain everything in two.
 */
function mergeIntoWithNoDuplicateKeys(one, two) {
  !(one && two && typeof one === 'object' && typeof two === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : invariant(false) : undefined;

  for (var key in two) {
    if (two.hasOwnProperty(key)) {
      !(one[key] === undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): ' + 'Tried to merge two objects with the same key: `%s`. This conflict ' + 'may be due to a mixin; in particular, this may be caused by two ' + 'getInitialState() or getDefaultProps() methods returning objects ' + 'with clashing keys.', key) : invariant(false) : undefined;
      one[key] = two[key];
    }
  }
  return one;
}

/**
 * Creates a function that invokes two functions and merges their return values.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createMergedResultFunction(one, two) {
  return function mergedResult() {
    var a = one.apply(this, arguments);
    var b = two.apply(this, arguments);
    if (a == null) {
      return b;
    } else if (b == null) {
      return a;
    }
    var c = {};
    mergeIntoWithNoDuplicateKeys(c, a);
    mergeIntoWithNoDuplicateKeys(c, b);
    return c;
  };
}

/**
 * Creates a function that invokes two functions and ignores their return vales.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createChainedFunction(one, two) {
  return function chainedFunction() {
    one.apply(this, arguments);
    two.apply(this, arguments);
  };
}

/**
 * Binds a method to the component.
 *
 * @param {object} component Component whose method is going to be bound.
 * @param {function} method Method to be bound.
 * @return {function} The bound method.
 */
function bindAutoBindMethod(component, method) {
  var boundMethod = method.bind(component);
  if (process.env.NODE_ENV !== 'production') {
    boundMethod.__reactBoundContext = component;
    boundMethod.__reactBoundMethod = method;
    boundMethod.__reactBoundArguments = null;
    var componentName = component.constructor.displayName;
    var _bind = boundMethod.bind;
    /* eslint-disable block-scoped-var, no-undef */
    boundMethod.bind = function (newThis) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      // User is trying to bind() an autobound method; we effectively will
      // ignore the value of "this" that the user is trying to use, so
      // let's warn.
      if (newThis !== component && newThis !== null) {
        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : undefined;
      } else if (!args.length) {
        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : undefined;
        return boundMethod;
      }
      var reboundMethod = _bind.apply(boundMethod, arguments);
      reboundMethod.__reactBoundContext = component;
      reboundMethod.__reactBoundMethod = method;
      reboundMethod.__reactBoundArguments = args;
      return reboundMethod;
      /* eslint-enable */
    };
  }
  return boundMethod;
}

/**
 * Binds all auto-bound methods in a component.
 *
 * @param {object} component Component whose method is going to be bound.
 */
function bindAutoBindMethods(component) {
  for (var autoBindKey in component.__reactAutoBindMap) {
    if (component.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
      var method = component.__reactAutoBindMap[autoBindKey];
      component[autoBindKey] = bindAutoBindMethod(component, method);
    }
  }
}

/**
 * Add more to the ReactClass base class. These are all legacy features and
 * therefore not already part of the modern ReactComponent.
 */
var ReactClassMixin = {

  /**
   * TODO: This will be deprecated because state should always keep a consistent
   * type signature and the only use case for this, is to avoid that.
   */
  replaceState: function (newState, callback) {
    this.updater.enqueueReplaceState(this, newState);
    if (callback) {
      this.updater.enqueueCallback(this, callback);
    }
  },

  /**
   * Checks whether or not this composite component is mounted.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function () {
    return this.updater.isMounted(this);
  },

  /**
   * Sets a subset of the props.
   *
   * @param {object} partialProps Subset of the next props.
   * @param {?function} callback Called after props are updated.
   * @final
   * @public
   * @deprecated
   */
  setProps: function (partialProps, callback) {
    if (process.env.NODE_ENV !== 'production') {
      warnSetProps();
    }
    this.updater.enqueueSetProps(this, partialProps);
    if (callback) {
      this.updater.enqueueCallback(this, callback);
    }
  },

  /**
   * Replace all the props.
   *
   * @param {object} newProps Subset of the next props.
   * @param {?function} callback Called after props are updated.
   * @final
   * @public
   * @deprecated
   */
  replaceProps: function (newProps, callback) {
    if (process.env.NODE_ENV !== 'production') {
      warnSetProps();
    }
    this.updater.enqueueReplaceProps(this, newProps);
    if (callback) {
      this.updater.enqueueCallback(this, callback);
    }
  }
};

var ReactClassComponent = function () {};
assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);

/**
 * Module for creating composite components.
 *
 * @class ReactClass
 */
var ReactClass = {

  /**
   * Creates a composite component class given a class specification.
   *
   * @param {object} spec Class specification (which must define `render`).
   * @return {function} Component constructor function.
   * @public
   */
  createClass: function (spec) {
    var Constructor = function (props, context, updater) {
      // This constructor is overridden by mocks. The argument is used
      // by mocks to assert on what gets mounted.

      if (process.env.NODE_ENV !== 'production') {
        process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : undefined;
      }

      // Wire up auto-binding
      if (this.__reactAutoBindMap) {
        bindAutoBindMethods(this);
      }

      this.props = props;
      this.context = context;
      this.refs = emptyObject;
      this.updater = updater || ReactNoopUpdateQueue;

      this.state = null;

      // ReactClasses doesn't have constructors. Instead, they use the
      // getInitialState and componentWillMount methods for initialization.

      var initialState = this.getInitialState ? this.getInitialState() : null;
      if (process.env.NODE_ENV !== 'production') {
        // We allow auto-mocks to proceed as if they're returning null.
        if (typeof initialState === 'undefined' && this.getInitialState._isMockFunction) {
          // This is probably bad practice. Consider warning here and
          // deprecating this convenience.
          initialState = null;
        }
      }
      !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : invariant(false) : undefined;

      this.state = initialState;
    };
    Constructor.prototype = new ReactClassComponent();
    Constructor.prototype.constructor = Constructor;

    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));

    mixSpecIntoComponent(Constructor, spec);

    // Initialize the defaultProps property after all mixins have been merged.
    if (Constructor.getDefaultProps) {
      Constructor.defaultProps = Constructor.getDefaultProps();
    }

    if (process.env.NODE_ENV !== 'production') {
      // This is a tag to indicate that the use of these method names is ok,
      // since it's used with createClass. If it's not, then it's likely a
      // mistake so we'll warn you to use the static property, property
      // initializer or constructor respectively.
      if (Constructor.getDefaultProps) {
        Constructor.getDefaultProps.isReactClassApproved = {};
      }
      if (Constructor.prototype.getInitialState) {
        Constructor.prototype.getInitialState.isReactClassApproved = {};
      }
    }

    !Constructor.prototype.render ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : invariant(false) : undefined;

    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : undefined;
      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : undefined;
    }

    // Reduce time spent doing lookups by setting these on the prototype.
    for (var methodName in ReactClassInterface) {
      if (!Constructor.prototype[methodName]) {
        Constructor.prototype[methodName] = null;
      }
    }

    return Constructor;
  },

  injection: {
    injectMixin: function (mixin) {
      injectedMixins.push(mixin);
    }
  }

};

module.exports = ReactClass;
}).call(this,require('_process'))

},{"./Object.assign":29,"./ReactComponent":37,"./ReactElement":59,"./ReactNoopUpdateQueue":76,"./ReactPropTypeLocationNames":79,"./ReactPropTypeLocations":80,"_process":6,"fbjs/lib/emptyObject":143,"fbjs/lib/invariant":150,"fbjs/lib/keyMirror":153,"fbjs/lib/keyOf":154,"fbjs/lib/warning":161}],37:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponent
 */

'use strict';

var ReactNoopUpdateQueue = require('./ReactNoopUpdateQueue');

var emptyObject = require('fbjs/lib/emptyObject');
var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

/**
 * Base class helpers for the updating state of a component.
 */
function ReactComponent(props, context, updater) {
  this.props = props;
  this.context = context;
  this.refs = emptyObject;
  // We initialize the default updater but the real one gets injected by the
  // renderer.
  this.updater = updater || ReactNoopUpdateQueue;
}

ReactComponent.prototype.isReactComponent = {};

/**
 * Sets a subset of the state. Always use this to mutate
 * state. You should treat `this.state` as immutable.
 *
 * There is no guarantee that `this.state` will be immediately updated, so
 * accessing `this.state` after calling this method may return the old value.
 *
 * There is no guarantee that calls to `setState` will run synchronously,
 * as they may eventually be batched together.  You can provide an optional
 * callback that will be executed when the call to setState is actually
 * completed.
 *
 * When a function is provided to setState, it will be called at some point in
 * the future (not synchronously). It will be called with the up to date
 * component arguments (state, props, context). These values can be different
 * from this.* because your function may be called after receiveProps but before
 * shouldComponentUpdate, and this new state, props, and context will not yet be
 * assigned to this.
 *
 * @param {object|function} partialState Next partial state or function to
 *        produce next partial state to be merged with current state.
 * @param {?function} callback Called after state is updated.
 * @final
 * @protected
 */
ReactComponent.prototype.setState = function (partialState, callback) {
  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a ' + 'function which returns an object of state variables.') : invariant(false) : undefined;
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : undefined;
  }
  this.updater.enqueueSetState(this, partialState);
  if (callback) {
    this.updater.enqueueCallback(this, callback);
  }
};

/**
 * Forces an update. This should only be invoked when it is known with
 * certainty that we are **not** in a DOM transaction.
 *
 * You may want to call this when you know that some deeper aspect of the
 * component's state has changed but `setState` was not called.
 *
 * This will not invoke `shouldComponentUpdate`, but it will invoke
 * `componentWillUpdate` and `componentDidUpdate`.
 *
 * @param {?function} callback Called after update is complete.
 * @final
 * @protected
 */
ReactComponent.prototype.forceUpdate = function (callback) {
  this.updater.enqueueForceUpdate(this);
  if (callback) {
    this.updater.enqueueCallback(this, callback);
  }
};

/**
 * Deprecated APIs. These APIs used to exist on classic React classes but since
 * we would like to deprecate them, we're not going to move them over to this
 * modern base class. Instead, we define a getter that warns if it's accessed.
 */
if (process.env.NODE_ENV !== 'production') {
  var deprecatedAPIs = {
    getDOMNode: ['getDOMNode', 'Use ReactDOM.findDOMNode(component) instead.'],
    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
    replaceProps: ['replaceProps', 'Instead, call render again at the top level.'],
    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).'],
    setProps: ['setProps', 'Instead, call render again at the top level.']
  };
  var defineDeprecationWarning = function (methodName, info) {
    try {
      Object.defineProperty(ReactComponent.prototype, methodName, {
        get: function () {
          process.env.NODE_ENV !== 'production' ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : undefined;
          return undefined;
        }
      });
    } catch (x) {
      // IE will fail on defineProperty (es5-shim/sham too)
    }
  };
  for (var fnName in deprecatedAPIs) {
    if (deprecatedAPIs.hasOwnProperty(fnName)) {
      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    }
  }
}

module.exports = ReactComponent;
}).call(this,require('_process'))

},{"./ReactNoopUpdateQueue":76,"_process":6,"fbjs/lib/emptyObject":143,"fbjs/lib/invariant":150,"fbjs/lib/warning":161}],38:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponentBrowserEnvironment
 */

'use strict';

var ReactDOMIDOperations = require('./ReactDOMIDOperations');
var ReactMount = require('./ReactMount');

/**
 * Abstracts away all functionality of the reconciler that requires knowledge of
 * the browser context. TODO: These callers should be refactored to avoid the
 * need for this injection.
 */
var ReactComponentBrowserEnvironment = {

  processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,

  replaceNodeWithMarkupByID: ReactDOMIDOperations.dangerouslyReplaceNodeWithMarkupByID,

  /**
   * If a particular environment requires that some resources be cleaned up,
   * specify this in the injected Mixin. In the DOM, we would likely want to
   * purge any cached node ID lookups.
   *
   * @private
   */
  unmountIDFromEnvironment: function (rootNodeID) {
    ReactMount.purgeID(rootNodeID);
  }

};

module.exports = ReactComponentBrowserEnvironment;
},{"./ReactDOMIDOperations":47,"./ReactMount":72}],39:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponentEnvironment
 */

'use strict';

var invariant = require('fbjs/lib/invariant');

var injected = false;

var ReactComponentEnvironment = {

  /**
   * Optionally injectable environment dependent cleanup hook. (server vs.
   * browser etc). Example: A browser system caches DOM nodes based on component
   * ID and must remove that cache entry when this instance is unmounted.
   */
  unmountIDFromEnvironment: null,

  /**
   * Optionally injectable hook for swapping out mount images in the middle of
   * the tree.
   */
  replaceNodeWithMarkupByID: null,

  /**
   * Optionally injectable hook for processing a queue of child updates. Will
   * later move into MultiChildComponents.
   */
  processChildrenUpdates: null,

  injection: {
    injectEnvironment: function (environment) {
      !!injected ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : invariant(false) : undefined;
      ReactComponentEnvironment.unmountIDFromEnvironment = environment.unmountIDFromEnvironment;
      ReactComponentEnvironment.replaceNodeWithMarkupByID = environment.replaceNodeWithMarkupByID;
      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;
      injected = true;
    }
  }

};

module.exports = ReactComponentEnvironment;
}).call(this,require('_process'))

},{"_process":6,"fbjs/lib/invariant":150}],40:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactCompositeComponent
 */

'use strict';

var ReactComponentEnvironment = require('./ReactComponentEnvironment');
var ReactCurrentOwner = require('./ReactCurrentOwner');
var ReactElement = require('./ReactElement');
var ReactInstanceMap = require('./ReactInstanceMap');
var ReactPerf = require('./ReactPerf');
var ReactPropTypeLocations = require('./ReactPropTypeLocations');
var ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');
var ReactReconciler = require('./ReactReconciler');
var ReactUpdateQueue = require('./ReactUpdateQueue');

var assign = require('./Object.assign');
var emptyObject = require('fbjs/lib/emptyObject');
var invariant = require('fbjs/lib/invariant');
var shouldUpdateReactComponent = require('./shouldUpdateReactComponent');
var warning = require('fbjs/lib/warning');

function getDeclarationErrorAddendum(component) {
  var owner = component._currentElement._owner || null;
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

function StatelessComponent(Component) {}
StatelessComponent.prototype.render = function () {
  var Component = ReactInstanceMap.get(this)._currentElement.type;
  return Component(this.props, this.context, this.updater);
};

/**
 * ------------------ The Life-Cycle of a Composite Component ------------------
 *
 * - constructor: Initialization of state. The instance is now retained.
 *   - componentWillMount
 *   - render
 *   - [children's constructors]
 *     - [children's componentWillMount and render]
 *     - [children's componentDidMount]
 *     - componentDidMount
 *
 *       Update Phases:
 *       - componentWillReceiveProps (only called if parent updated)
 *       - shouldComponentUpdate
 *         - componentWillUpdate
 *           - render
 *           - [children's constructors or receive props phases]
 *         - componentDidUpdate
 *
 *     - componentWillUnmount
 *     - [children's componentWillUnmount]
 *   - [children destroyed]
 * - (destroyed): The instance is now blank, released by React and ready for GC.
 *
 * -----------------------------------------------------------------------------
 */

/**
 * An incrementing ID assigned to each component when it is mounted. This is
 * used to enforce the order in which `ReactUpdates` updates dirty components.
 *
 * @private
 */
var nextMountID = 1;

/**
 * @lends {ReactCompositeComponent.prototype}
 */
var ReactCompositeComponentMixin = {

  /**
   * Base constructor for all composite component.
   *
   * @param {ReactElement} element
   * @final
   * @internal
   */
  construct: function (element) {
    this._currentElement = element;
    this._rootNodeID = null;
    this._instance = null;

    // See ReactUpdateQueue
    this._pendingElement = null;
    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;

    this._renderedComponent = null;

    this._context = null;
    this._mountOrder = 0;
    this._topLevelWrapper = null;

    // See ReactUpdates and ReactUpdateQueue.
    this._pendingCallbacks = null;
  },

  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {string} rootID DOM ID of the root node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: function (rootID, transaction, context) {
    this._context = context;
    this._mountOrder = nextMountID++;
    this._rootNodeID = rootID;

    var publicProps = this._processProps(this._currentElement.props);
    var publicContext = this._processContext(context);

    var Component = this._currentElement.type;

    // Initialize the public class
    var inst;
    var renderedElement;

    // This is a way to detect if Component is a stateless arrow function
    // component, which is not newable. It might not be 100% reliable but is
    // something we can do until we start detecting that Component extends
    // React.Component. We already assume that typeof Component === 'function'.
    var canInstantiate = ('prototype' in Component);

    if (canInstantiate) {
      if (process.env.NODE_ENV !== 'production') {
        ReactCurrentOwner.current = this;
        try {
          inst = new Component(publicProps, publicContext, ReactUpdateQueue);
        } finally {
          ReactCurrentOwner.current = null;
        }
      } else {
        inst = new Component(publicProps, publicContext, ReactUpdateQueue);
      }
    }

    if (!canInstantiate || inst === null || inst === false || ReactElement.isValidElement(inst)) {
      renderedElement = inst;
      inst = new StatelessComponent(Component);
    }

    if (process.env.NODE_ENV !== 'production') {
      // This will throw later in _renderValidatedComponent, but add an early
      // warning now to help debugging
      if (inst.render == null) {
        process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`, returned ' + 'null/false from a stateless component, or tried to render an ' + 'element whose type is a function that isn\'t a React component.', Component.displayName || Component.name || 'Component') : undefined;
      } else {
        // We support ES6 inheriting from React.Component, the module pattern,
        // and stateless components, but not ES6 classes that don't extend
        process.env.NODE_ENV !== 'production' ? warning(Component.prototype && Component.prototype.isReactComponent || !canInstantiate || !(inst instanceof Component), '%s(...): React component classes must extend React.Component.', Component.displayName || Component.name || 'Component') : undefined;
      }
    }

    // These should be set up in the constructor, but as a convenience for
    // simpler class abstractions, we set them up after the fact.
    inst.props = publicProps;
    inst.context = publicContext;
    inst.refs = emptyObject;
    inst.updater = ReactUpdateQueue;

    this._instance = inst;

    // Store a reference from the instance back to the internal representation
    ReactInstanceMap.set(inst, this);

    if (process.env.NODE_ENV !== 'production') {
      // Since plain JS classes are defined without any special initialization
      // logic, we can not catch common errors early. Therefore, we have to
      // catch them here, at initialization time, instead.
      process.env.NODE_ENV !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : undefined;
      process.env.NODE_ENV !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : undefined;
      process.env.NODE_ENV !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : undefined;
      process.env.NODE_ENV !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : undefined;
      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : undefined;
      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : undefined;
      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : undefined;
    }

    var initialState = inst.state;
    if (initialState === undefined) {
      inst.state = initialState = null;
    }
    !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;

    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;

    if (inst.componentWillMount) {
      inst.componentWillMount();
      // When mounting, calls to `setState` by `componentWillMount` will set
      // `this._pendingStateQueue` without triggering a re-render.
      if (this._pendingStateQueue) {
        inst.state = this._processPendingState(inst.props, inst.context);
      }
    }

    // If not a stateless component, we now render
    if (renderedElement === undefined) {
      renderedElement = this._renderValidatedComponent();
    }

    this._renderedComponent = this._instantiateReactComponent(renderedElement);

    var markup = ReactReconciler.mountComponent(this._renderedComponent, rootID, transaction, this._processChildContext(context));
    if (inst.componentDidMount) {
      transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
    }

    return markup;
  },

  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function () {
    var inst = this._instance;

    if (inst.componentWillUnmount) {
      inst.componentWillUnmount();
    }

    ReactReconciler.unmountComponent(this._renderedComponent);
    this._renderedComponent = null;
    this._instance = null;

    // Reset pending fields
    // Even if this component is scheduled for another update in ReactUpdates,
    // it would still be ignored because these fields are reset.
    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;
    this._pendingCallbacks = null;
    this._pendingElement = null;

    // These fields do not really need to be reset since this object is no
    // longer accessible.
    this._context = null;
    this._rootNodeID = null;
    this._topLevelWrapper = null;

    // Delete the reference from the instance to this internal representation
    // which allow the internals to be properly cleaned up even if the user
    // leaks a reference to the public instance.
    ReactInstanceMap.remove(inst);

    // Some existing components rely on inst.props even after they've been
    // destroyed (in event handlers).
    // TODO: inst.props = null;
    // TODO: inst.state = null;
    // TODO: inst.context = null;
  },

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _maskContext: function (context) {
    var maskedContext = null;
    var Component = this._currentElement.type;
    var contextTypes = Component.contextTypes;
    if (!contextTypes) {
      return emptyObject;
    }
    maskedContext = {};
    for (var contextName in contextTypes) {
      maskedContext[contextName] = context[contextName];
    }
    return maskedContext;
  },

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`, and asserts that they are valid.
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _processContext: function (context) {
    var maskedContext = this._maskContext(context);
    if (process.env.NODE_ENV !== 'production') {
      var Component = this._currentElement.type;
      if (Component.contextTypes) {
        this._checkPropTypes(Component.contextTypes, maskedContext, ReactPropTypeLocations.context);
      }
    }
    return maskedContext;
  },

  /**
   * @param {object} currentContext
   * @return {object}
   * @private
   */
  _processChildContext: function (currentContext) {
    var Component = this._currentElement.type;
    var inst = this._instance;
    var childContext = inst.getChildContext && inst.getChildContext();
    if (childContext) {
      !(typeof Component.childContextTypes === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;
      if (process.env.NODE_ENV !== 'production') {
        this._checkPropTypes(Component.childContextTypes, childContext, ReactPropTypeLocations.childContext);
      }
      for (var name in childContext) {
        !(name in Component.childContextTypes) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : invariant(false) : undefined;
      }
      return assign({}, currentContext, childContext);
    }
    return currentContext;
  },

  /**
   * Processes props by setting default values for unspecified props and
   * asserting that the props are valid. Does not mutate its argument; returns
   * a new props object with defaults merged in.
   *
   * @param {object} newProps
   * @return {object}
   * @private
   */
  _processProps: function (newProps) {
    if (process.env.NODE_ENV !== 'production') {
      var Component = this._currentElement.type;
      if (Component.propTypes) {
        this._checkPropTypes(Component.propTypes, newProps, ReactPropTypeLocations.prop);
      }
    }
    return newProps;
  },

  /**
   * Assert that the props are valid
   *
   * @param {object} propTypes Map of prop name to a ReactPropType
   * @param {object} props
   * @param {string} location e.g. "prop", "context", "child context"
   * @private
   */
  _checkPropTypes: function (propTypes, props, location) {
    // TODO: Stop validating prop types here and only use the element
    // validation.
    var componentName = this.getName();
    for (var propName in propTypes) {
      if (propTypes.hasOwnProperty(propName)) {
        var error;
        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          !(typeof propTypes[propName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually ' + 'from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : undefined;
          error = propTypes[propName](props, propName, componentName, location);
        } catch (ex) {
          error = ex;
        }
        if (error instanceof Error) {
          // We may want to extend this logic for similar errors in
          // top-level render calls, so I'm abstracting it away into
          // a function to minimize refactoring in the future
          var addendum = getDeclarationErrorAddendum(this);

          if (location === ReactPropTypeLocations.prop) {
            // Preface gives us something to blacklist in warning module
            process.env.NODE_ENV !== 'production' ? warning(false, 'Failed Composite propType: %s%s', error.message, addendum) : undefined;
          } else {
            process.env.NODE_ENV !== 'production' ? warning(false, 'Failed Context Types: %s%s', error.message, addendum) : undefined;
          }
        }
      }
    }
  },

  receiveComponent: function (nextElement, transaction, nextContext) {
    var prevElement = this._currentElement;
    var prevContext = this._context;

    this._pendingElement = null;

    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
  },

  /**
   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
   * is set, update the component.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  performUpdateIfNecessary: function (transaction) {
    if (this._pendingElement != null) {
      ReactReconciler.receiveComponent(this, this._pendingElement || this._currentElement, transaction, this._context);
    }

    if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);
    }
  },

  /**
   * Perform an update to a mounted component. The componentWillReceiveProps and
   * shouldComponentUpdate methods are called, then (assuming the update isn't
   * skipped) the remaining update lifecycle methods are called and the DOM
   * representation is updated.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevParentElement
   * @param {ReactElement} nextParentElement
   * @internal
   * @overridable
   */
  updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
    var inst = this._instance;

    var nextContext = this._context === nextUnmaskedContext ? inst.context : this._processContext(nextUnmaskedContext);
    var nextProps;

    // Distinguish between a props update versus a simple state update
    if (prevParentElement === nextParentElement) {
      // Skip checking prop types again -- we don't read inst.props to avoid
      // warning for DOM component props in this upgrade
      nextProps = nextParentElement.props;
    } else {
      nextProps = this._processProps(nextParentElement.props);
      // An update here will schedule an update but immediately set
      // _pendingStateQueue which will ensure that any state updates gets
      // immediately reconciled instead of waiting for the next batch.

      if (inst.componentWillReceiveProps) {
        inst.componentWillReceiveProps(nextProps, nextContext);
      }
    }

    var nextState = this._processPendingState(nextProps, nextContext);

    var shouldUpdate = this._pendingForceUpdate || !inst.shouldComponentUpdate || inst.shouldComponentUpdate(nextProps, nextState, nextContext);

    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(typeof shouldUpdate !== 'undefined', '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : undefined;
    }

    if (shouldUpdate) {
      this._pendingForceUpdate = false;
      // Will set `this.props`, `this.state` and `this.context`.
      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
    } else {
      // If it's determined that a component should not update, we still want
      // to set props and state but we shortcut the rest of the update.
      this._currentElement = nextParentElement;
      this._context = nextUnmaskedContext;
      inst.props = nextProps;
      inst.state = nextState;
      inst.context = nextContext;
    }
  },

  _processPendingState: function (props, context) {
    var inst = this._instance;
    var queue = this._pendingStateQueue;
    var replace = this._pendingReplaceState;
    this._pendingReplaceState = false;
    this._pendingStateQueue = null;

    if (!queue) {
      return inst.state;
    }

    if (replace && queue.length === 1) {
      return queue[0];
    }

    var nextState = assign({}, replace ? queue[0] : inst.state);
    for (var i = replace ? 1 : 0; i < queue.length; i++) {
      var partial = queue[i];
      assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);
    }

    return nextState;
  },

  /**
   * Merges new props and state, notifies delegate methods of update and
   * performs update.
   *
   * @param {ReactElement} nextElement Next element
   * @param {object} nextProps Next public object to set as properties.
   * @param {?object} nextState Next object to set as state.
   * @param {?object} nextContext Next public object to set as context.
   * @param {ReactReconcileTransaction} transaction
   * @param {?object} unmaskedContext
   * @private
   */
  _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
    var inst = this._instance;

    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
    var prevProps;
    var prevState;
    var prevContext;
    if (hasComponentDidUpdate) {
      prevProps = inst.props;
      prevState = inst.state;
      prevContext = inst.context;
    }

    if (inst.componentWillUpdate) {
      inst.componentWillUpdate(nextProps, nextState, nextContext);
    }

    this._currentElement = nextElement;
    this._context = unmaskedContext;
    inst.props = nextProps;
    inst.state = nextState;
    inst.context = nextContext;

    this._updateRenderedComponent(transaction, unmaskedContext);

    if (hasComponentDidUpdate) {
      transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);
    }
  },

  /**
   * Call the component's `render` method and update the DOM accordingly.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  _updateRenderedComponent: function (transaction, context) {
    var prevComponentInstance = this._renderedComponent;
    var prevRenderedElement = prevComponentInstance._currentElement;
    var nextRenderedElement = this._renderValidatedComponent();
    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
    } else {
      // These two IDs are actually the same! But nothing should rely on that.
      var thisID = this._rootNodeID;
      var prevComponentID = prevComponentInstance._rootNodeID;
      ReactReconciler.unmountComponent(prevComponentInstance);

      this._renderedComponent = this._instantiateReactComponent(nextRenderedElement);
      var nextMarkup = ReactReconciler.mountComponent(this._renderedComponent, thisID, transaction, this._processChildContext(context));
      this._replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
    }
  },

  /**
   * @protected
   */
  _replaceNodeWithMarkupByID: function (prevComponentID, nextMarkup) {
    ReactComponentEnvironment.replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
  },

  /**
   * @protected
   */
  _renderValidatedComponentWithoutOwnerOrContext: function () {
    var inst = this._instance;
    var renderedComponent = inst.render();
    if (process.env.NODE_ENV !== 'production') {
      // We allow auto-mocks to proceed as if they're returning null.
      if (typeof renderedComponent === 'undefined' && inst.render._isMockFunction) {
        // This is probably bad practice. Consider warning here and
        // deprecating this convenience.
        renderedComponent = null;
      }
    }

    return renderedComponent;
  },

  /**
   * @private
   */
  _renderValidatedComponent: function () {
    var renderedComponent;
    ReactCurrentOwner.current = this;
    try {
      renderedComponent = this._renderValidatedComponentWithoutOwnerOrContext();
    } finally {
      ReactCurrentOwner.current = null;
    }
    !(
    // TODO: An `isValidNode` function would probably be more appropriate
    renderedComponent === null || renderedComponent === false || ReactElement.isValidElement(renderedComponent)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.render(): A valid ReactComponent must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;
    return renderedComponent;
  },

  /**
   * Lazily allocates the refs object and stores `component` as `ref`.
   *
   * @param {string} ref Reference name.
   * @param {component} component Component to store as `ref`.
   * @final
   * @private
   */
  attachRef: function (ref, component) {
    var inst = this.getPublicInstance();
    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Stateless function components cannot have refs.') : invariant(false) : undefined;
    var publicComponentInstance = component.getPublicInstance();
    if (process.env.NODE_ENV !== 'production') {
      var componentName = component && component.getName ? component.getName() : 'a component';
      process.env.NODE_ENV !== 'production' ? warning(publicComponentInstance != null, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : undefined;
    }
    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
    refs[ref] = publicComponentInstance;
  },

  /**
   * Detaches a reference name.
   *
   * @param {string} ref Name to dereference.
   * @final
   * @private
   */
  detachRef: function (ref) {
    var refs = this.getPublicInstance().refs;
    delete refs[ref];
  },

  /**
   * Get a text description of the component that can be used to identify it
   * in error messages.
   * @return {string} The name or null.
   * @internal
   */
  getName: function () {
    var type = this._currentElement.type;
    var constructor = this._instance && this._instance.constructor;
    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
  },

  /**
   * Get the publicly accessible representation of this component - i.e. what
   * is exposed by refs and returned by render. Can be null for stateless
   * components.
   *
   * @return {ReactComponent} the public component instance.
   * @internal
   */
  getPublicInstance: function () {
    var inst = this._instance;
    if (inst instanceof StatelessComponent) {
      return null;
    }
    return inst;
  },

  // Stub
  _instantiateReactComponent: null

};

ReactPerf.measureMethods(ReactCompositeComponentMixin, 'ReactCompositeComponent', {
  mountComponent: 'mountComponent',
  updateComponent: 'updateComponent',
  _renderValidatedComponent: '_renderValidatedComponent'
});

var ReactCompositeComponent = {

  Mixin: ReactCompositeComponentMixin

};

module.exports = ReactCompositeComponent;
}).call(this,require('_process'))

},{"./Object.assign":29,"./ReactComponentEnvironment":39,"./ReactCurrentOwner":41,"./ReactElement":59,"./ReactInstanceMap":69,"./ReactPerf":78,"./ReactPropTypeLocationNames":79,"./ReactPropTypeLocations":80,"./ReactReconciler":83,"./ReactUpdateQueue":89,"./shouldUpdateReactComponent":132,"_process":6,"fbjs/lib/emptyObject":143,"fbjs/lib/invariant":150,"fbjs/lib/warning":161}],41:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactCurrentOwner
 */

'use strict';

/**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 */
var ReactCurrentOwner = {

  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null

};

module.exports = ReactCurrentOwner;
},{}],42:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOM
 */

/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/

'use strict';

var ReactCurrentOwner = require('./ReactCurrentOwner');
var ReactDOMTextComponent = require('./ReactDOMTextComponent');
var ReactDefaultInjection = require('./ReactDefaultInjection');
var ReactInstanceHandles = require('./ReactInstanceHandles');
var ReactMount = require('./ReactMount');
var ReactPerf = require('./ReactPerf');
var ReactReconciler = require('./ReactReconciler');
var ReactUpdates = require('./ReactUpdates');
var ReactVersion = require('./ReactVersion');

var findDOMNode = require('./findDOMNode');
var renderSubtreeIntoContainer = require('./renderSubtreeIntoContainer');
var warning = require('fbjs/lib/warning');

ReactDefaultInjection.inject();

var render = ReactPerf.measure('React', 'render', ReactMount.render);

var React = {
  findDOMNode: findDOMNode,
  render: render,
  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
  version: ReactVersion,

  /* eslint-disable camelcase */
  unstable_batchedUpdates: ReactUpdates.batchedUpdates,
  unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer
};

// Inject the runtime into a devtools global hook regardless of browser.
// Allows for debugging when the hook is injected on the page.
/* eslint-enable camelcase */
if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
    CurrentOwner: ReactCurrentOwner,
    InstanceHandles: ReactInstanceHandles,
    Mount: ReactMount,
    Reconciler: ReactReconciler,
    TextComponent: ReactDOMTextComponent
  });
}

if (process.env.NODE_ENV !== 'production') {
  var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {

    // First check if devtools is not installed
    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
      // If we're in Chrome or Firefox, provide a download link if not installed.
      if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
        console.debug('Download the React DevTools for a better development experience: ' + 'https://fb.me/react-devtools');
      }
    }

    // If we're in IE8, check to see if we are in compatibility mode and provide
    // information on preventing compatibility mode
    var ieCompatibilityMode = document.documentMode && document.documentMode < 8;

    process.env.NODE_ENV !== 'production' ? warning(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv="X-UA-Compatible" content="IE=edge" />') : undefined;

    var expectedFeatures = [
    // shims
    Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.split, String.prototype.trim,

    // shams
    Object.create, Object.freeze];

    for (var i = 0; i < expectedFeatures.length; i++) {
      if (!expectedFeatures[i]) {
        console.error('One or more ES5 shim/shams expected by React are not available: ' + 'https://fb.me/react-warning-polyfills');
        break;
      }
    }
  }
}

module.exports = React;
}).call(this,require('_process'))

},{"./ReactCurrentOwner":41,"./ReactDOMTextComponent":53,"./ReactDefaultInjection":56,"./ReactInstanceHandles":68,"./ReactMount":72,"./ReactPerf":78,"./ReactReconciler":83,"./ReactUpdates":90,"./ReactVersion":91,"./findDOMNode":114,"./renderSubtreeIntoContainer":129,"_process":6,"fbjs/lib/ExecutionEnvironment":136,"fbjs/lib/warning":161}],43:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMButton
 */

'use strict';

var mouseListenerNames = {
  onClick: true,
  onDoubleClick: true,
  onMouseDown: true,
  onMouseMove: true,
  onMouseUp: true,

  onClickCapture: true,
  onDoubleClickCapture: true,
  onMouseDownCapture: true,
  onMouseMoveCapture: true,
  onMouseUpCapture: true
};

/**
 * Implements a <button> native component that does not receive mouse events
 * when `disabled` is set.
 */
var ReactDOMButton = {
  getNativeProps: function (inst, props, context) {
    if (!props.disabled) {
      return props;
    }

    // Copy the props, except the mouse listeners
    var nativeProps = {};
    for (var key in props) {
      if (props.hasOwnProperty(key) && !mouseListenerNames[key]) {
        nativeProps[key] = props[key];
      }
    }

    return nativeProps;
  }
};

module.exports = ReactDOMButton;
},{}],44:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMComponent
 * @typechecks static-only
 */

/* global hasOwnProperty:true */

'use strict';

var AutoFocusUtils = require('./AutoFocusUtils');
var CSSPropertyOperations = require('./CSSPropertyOperations');
var DOMProperty = require('./DOMProperty');
var DOMPropertyOperations = require('./DOMPropertyOperations');
var EventConstants = require('./EventConstants');
var ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');
var ReactComponentBrowserEnvironment = require('./ReactComponentBrowserEnvironment');
var ReactDOMButton = require('./ReactDOMButton');
var ReactDOMInput = require('./ReactDOMInput');
var ReactDOMOption = require('./ReactDOMOption');
var ReactDOMSelect = require('./ReactDOMSelect');
var ReactDOMTextarea = require('./ReactDOMTextarea');
var ReactMount = require('./ReactMount');
var ReactMultiChild = require('./ReactMultiChild');
var ReactPerf = require('./ReactPerf');
var ReactUpdateQueue = require('./ReactUpdateQueue');

var assign = require('./Object.assign');
var escapeTextContentForBrowser = require('./escapeTextContentForBrowser');
var invariant = require('fbjs/lib/invariant');
var isEventSupported = require('./isEventSupported');
var keyOf = require('fbjs/lib/keyOf');
var setInnerHTML = require('./setInnerHTML');
var setTextContent = require('./setTextContent');
var shallowEqual = require('fbjs/lib/shallowEqual');
var validateDOMNesting = require('./validateDOMNesting');
var warning = require('fbjs/lib/warning');

var deleteListener = ReactBrowserEventEmitter.deleteListener;
var listenTo = ReactBrowserEventEmitter.listenTo;
var registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;

// For quickly matching children type, to test if can be treated as content.
var CONTENT_TYPES = { 'string': true, 'number': true };

var STYLE = keyOf({ style: null });

var ELEMENT_NODE_TYPE = 1;

var canDefineProperty = false;
try {
  Object.defineProperty({}, 'test', { get: function () {} });
  canDefineProperty = true;
} catch (e) {}

function getDeclarationErrorAddendum(internalInstance) {
  if (internalInstance) {
    var owner = internalInstance._currentElement._owner || null;
    if (owner) {
      var name = owner.getName();
      if (name) {
        return ' This DOM node was rendered by `' + name + '`.';
      }
    }
  }
  return '';
}

var legacyPropsDescriptor;
if (process.env.NODE_ENV !== 'production') {
  legacyPropsDescriptor = {
    props: {
      enumerable: false,
      get: function () {
        var component = this._reactInternalComponent;
        process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .props of a DOM node; instead, ' + 'recreate the props as `render` did originally or read the DOM ' + 'properties/attributes directly from this node (e.g., ' + 'this.refs.box.className).%s', getDeclarationErrorAddendum(component)) : undefined;
        return component._currentElement.props;
      }
    }
  };
}

function legacyGetDOMNode() {
  if (process.env.NODE_ENV !== 'production') {
    var component = this._reactInternalComponent;
    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .getDOMNode() of a DOM node; ' + 'instead, use the node directly.%s', getDeclarationErrorAddendum(component)) : undefined;
  }
  return this;
}

function legacyIsMounted() {
  var component = this._reactInternalComponent;
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .isMounted() of a DOM node.%s', getDeclarationErrorAddendum(component)) : undefined;
  }
  return !!component;
}

function legacySetStateEtc() {
  if (process.env.NODE_ENV !== 'production') {
    var component = this._reactInternalComponent;
    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .setState(), .replaceState(), or ' + '.forceUpdate() of a DOM node. This is a no-op.%s', getDeclarationErrorAddendum(component)) : undefined;
  }
}

function legacySetProps(partialProps, callback) {
  var component = this._reactInternalComponent;
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .setProps() of a DOM node. ' + 'Instead, call ReactDOM.render again at the top level.%s', getDeclarationErrorAddendum(component)) : undefined;
  }
  if (!component) {
    return;
  }
  ReactUpdateQueue.enqueueSetPropsInternal(component, partialProps);
  if (callback) {
    ReactUpdateQueue.enqueueCallbackInternal(component, callback);
  }
}

function legacyReplaceProps(partialProps, callback) {
  var component = this._reactInternalComponent;
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .replaceProps() of a DOM node. ' + 'Instead, call ReactDOM.render again at the top level.%s', getDeclarationErrorAddendum(component)) : undefined;
  }
  if (!component) {
    return;
  }
  ReactUpdateQueue.enqueueReplacePropsInternal(component, partialProps);
  if (callback) {
    ReactUpdateQueue.enqueueCallbackInternal(component, callback);
  }
}

function friendlyStringify(obj) {
  if (typeof obj === 'object') {
    if (Array.isArray(obj)) {
      return '[' + obj.map(friendlyStringify).join(', ') + ']';
    } else {
      var pairs = [];
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key) ? key : JSON.stringify(key);
          pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));
        }
      }
      return '{' + pairs.join(', ') + '}';
    }
  } else if (typeof obj === 'string') {
    return JSON.stringify(obj);
  } else if (typeof obj === 'function') {
    return '[function object]';
  }
  // Differs from JSON.stringify in that undefined becauses undefined and that
  // inf and nan don't become null
  return String(obj);
}

var styleMutationWarning = {};

function checkAndWarnForMutatedStyle(style1, style2, component) {
  if (style1 == null || style2 == null) {
    return;
  }
  if (shallowEqual(style1, style2)) {
    return;
  }

  var componentName = component._tag;
  var owner = component._currentElement._owner;
  var ownerName;
  if (owner) {
    ownerName = owner.getName();
  }

  var hash = ownerName + '|' + componentName;

  if (styleMutationWarning.hasOwnProperty(hash)) {
    return;
  }

  styleMutationWarning[hash] = true;

  process.env.NODE_ENV !== 'production' ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : undefined;
}

/**
 * @param {object} component
 * @param {?object} props
 */
function assertValidProps(component, props) {
  if (!props) {
    return;
  }
  // Note the use of `==` which checks for null or undefined.
  if (process.env.NODE_ENV !== 'production') {
    if (voidElementTags[component._tag]) {
      process.env.NODE_ENV !== 'production' ? warning(props.children == null && props.dangerouslySetInnerHTML == null, '%s is a void element tag and must not have `children` or ' + 'use `props.dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : undefined;
    }
  }
  if (props.dangerouslySetInnerHTML != null) {
    !(props.children == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : invariant(false) : undefined;
    !(typeof props.dangerouslySetInnerHTML === 'object' && '__html' in props.dangerouslySetInnerHTML) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' + 'Please visit https://fb.me/react-invariant-dangerously-set-inner-html ' + 'for more information.') : invariant(false) : undefined;
  }
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : undefined;
    process.env.NODE_ENV !== 'production' ? warning(!props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : undefined;
  }
  !(props.style == null || typeof props.style === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'The `style` prop expects a mapping from style properties to values, ' + 'not a string. For example, style={{marginRight: spacing + \'em\'}} when ' + 'using JSX.%s', getDeclarationErrorAddendum(component)) : invariant(false) : undefined;
}

function enqueuePutListener(id, registrationName, listener, transaction) {
  if (process.env.NODE_ENV !== 'production') {
    // IE8 has no API for event capturing and the `onScroll` event doesn't
    // bubble.
    process.env.NODE_ENV !== 'production' ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), 'This browser doesn\'t support the `onScroll` event') : undefined;
  }
  var container = ReactMount.findReactContainerForID(id);
  if (container) {
    var doc = container.nodeType === ELEMENT_NODE_TYPE ? container.ownerDocument : container;
    listenTo(registrationName, doc);
  }
  transaction.getReactMountReady().enqueue(putListener, {
    id: id,
    registrationName: registrationName,
    listener: listener
  });
}

function putListener() {
  var listenerToPut = this;
  ReactBrowserEventEmitter.putListener(listenerToPut.id, listenerToPut.registrationName, listenerToPut.listener);
}

// There are so many media events, it makes sense to just
// maintain a list rather than create a `trapBubbledEvent` for each
var mediaEvents = {
  topAbort: 'abort',
  topCanPlay: 'canplay',
  topCanPlayThrough: 'canplaythrough',
  topDurationChange: 'durationchange',
  topEmptied: 'emptied',
  topEncrypted: 'encrypted',
  topEnded: 'ended',
  topError: 'error',
  topLoadedData: 'loadeddata',
  topLoadedMetadata: 'loadedmetadata',
  topLoadStart: 'loadstart',
  topPause: 'pause',
  topPlay: 'play',
  topPlaying: 'playing',
  topProgress: 'progress',
  topRateChange: 'ratechange',
  topSeeked: 'seeked',
  topSeeking: 'seeking',
  topStalled: 'stalled',
  topSuspend: 'suspend',
  topTimeUpdate: 'timeupdate',
  topVolumeChange: 'volumechange',
  topWaiting: 'waiting'
};

function trapBubbledEventsLocal() {
  var inst = this;
  // If a component renders to null or if another component fatals and causes
  // the state of the tree to be corrupted, `node` here can be null.
  !inst._rootNodeID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Must be mounted to trap events') : invariant(false) : undefined;
  var node = ReactMount.getNode(inst._rootNodeID);
  !node ? process.env.NODE_ENV !== 'production' ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : invariant(false) : undefined;

  switch (inst._tag) {
    case 'iframe':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];
      break;
    case 'video':
    case 'audio':

      inst._wrapperState.listeners = [];
      // create listener for each media event
      for (var event in mediaEvents) {
        if (mediaEvents.hasOwnProperty(event)) {
          inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes[event], mediaEvents[event], node));
        }
      }

      break;
    case 'img':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];
      break;
    case 'form':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit', node)];
      break;
  }
}

function mountReadyInputWrapper() {
  ReactDOMInput.mountReadyWrapper(this);
}

function postUpdateSelectWrapper() {
  ReactDOMSelect.postUpdateWrapper(this);
}

// For HTML, certain tags should omit their close tag. We keep a whitelist for
// those special cased tags.

var omittedCloseTags = {
  'area': true,
  'base': true,
  'br': true,
  'col': true,
  'embed': true,
  'hr': true,
  'img': true,
  'input': true,
  'keygen': true,
  'link': true,
  'meta': true,
  'param': true,
  'source': true,
  'track': true,
  'wbr': true
};

// NOTE: menuitem's close tag should be omitted, but that causes problems.
var newlineEatingTags = {
  'listing': true,
  'pre': true,
  'textarea': true
};

// For HTML, certain tags cannot have children. This has the same purpose as
// `omittedCloseTags` except that `menuitem` should still have its closing tag.

var voidElementTags = assign({
  'menuitem': true
}, omittedCloseTags);

// We accept any tag to be rendered but since this gets injected into arbitrary
// HTML, we want to make sure that it's a safe tag.
// http://www.w3.org/TR/REC-xml/#NT-Name

var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
var validatedTagCache = {};
var hasOwnProperty = ({}).hasOwnProperty;

function validateDangerousTag(tag) {
  if (!hasOwnProperty.call(validatedTagCache, tag)) {
    !VALID_TAG_REGEX.test(tag) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid tag: %s', tag) : invariant(false) : undefined;
    validatedTagCache[tag] = true;
  }
}

function processChildContextDev(context, inst) {
  // Pass down our tag name to child components for validation purposes
  context = assign({}, context);
  var info = context[validateDOMNesting.ancestorInfoContextKey];
  context[validateDOMNesting.ancestorInfoContextKey] = validateDOMNesting.updatedAncestorInfo(info, inst._tag, inst);
  return context;
}

function isCustomComponent(tagName, props) {
  return tagName.indexOf('-') >= 0 || props.is != null;
}

/**
 * Creates a new React class that is idempotent and capable of containing other
 * React components. It accepts event listeners and DOM properties that are
 * valid according to `DOMProperty`.
 *
 *  - Event listeners: `onClick`, `onMouseDown`, etc.
 *  - DOM properties: `className`, `name`, `title`, etc.
 *
 * The `style` property functions differently from the DOM API. It accepts an
 * object mapping of style properties to values.
 *
 * @constructor ReactDOMComponent
 * @extends ReactMultiChild
 */
function ReactDOMComponent(tag) {
  validateDangerousTag(tag);
  this._tag = tag.toLowerCase();
  this._renderedChildren = null;
  this._previousStyle = null;
  this._previousStyleCopy = null;
  this._rootNodeID = null;
  this._wrapperState = null;
  this._topLevelWrapper = null;
  this._nodeWithLegacyProperties = null;
  if (process.env.NODE_ENV !== 'production') {
    this._unprocessedContextDev = null;
    this._processedContextDev = null;
  }
}

ReactDOMComponent.displayName = 'ReactDOMComponent';

ReactDOMComponent.Mixin = {

  construct: function (element) {
    this._currentElement = element;
  },

  /**
   * Generates root tag markup then recurses. This method has side effects and
   * is not idempotent.
   *
   * @internal
   * @param {string} rootID The root DOM ID for this node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} context
   * @return {string} The computed markup.
   */
  mountComponent: function (rootID, transaction, context) {
    this._rootNodeID = rootID;

    var props = this._currentElement.props;

    switch (this._tag) {
      case 'iframe':
      case 'img':
      case 'form':
      case 'video':
      case 'audio':
        this._wrapperState = {
          listeners: null
        };
        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
        break;
      case 'button':
        props = ReactDOMButton.getNativeProps(this, props, context);
        break;
      case 'input':
        ReactDOMInput.mountWrapper(this, props, context);
        props = ReactDOMInput.getNativeProps(this, props, context);
        break;
      case 'option':
        ReactDOMOption.mountWrapper(this, props, context);
        props = ReactDOMOption.getNativeProps(this, props, context);
        break;
      case 'select':
        ReactDOMSelect.mountWrapper(this, props, context);
        props = ReactDOMSelect.getNativeProps(this, props, context);
        context = ReactDOMSelect.processChildContext(this, props, context);
        break;
      case 'textarea':
        ReactDOMTextarea.mountWrapper(this, props, context);
        props = ReactDOMTextarea.getNativeProps(this, props, context);
        break;
    }

    assertValidProps(this, props);
    if (process.env.NODE_ENV !== 'production') {
      if (context[validateDOMNesting.ancestorInfoContextKey]) {
        validateDOMNesting(this._tag, this, context[validateDOMNesting.ancestorInfoContextKey]);
      }
    }

    if (process.env.NODE_ENV !== 'production') {
      this._unprocessedContextDev = context;
      this._processedContextDev = processChildContextDev(context, this);
      context = this._processedContextDev;
    }

    var mountImage;
    if (transaction.useCreateElement) {
      var ownerDocument = context[ReactMount.ownerDocumentContextKey];
      var el = ownerDocument.createElement(this._currentElement.type);
      DOMPropertyOperations.setAttributeForID(el, this._rootNodeID);
      // Populate node cache
      ReactMount.getID(el);
      this._updateDOMProperties({}, props, transaction, el);
      this._createInitialChildren(transaction, props, context, el);
      mountImage = el;
    } else {
      var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);
      var tagContent = this._createContentMarkup(transaction, props, context);
      if (!tagContent && omittedCloseTags[this._tag]) {
        mountImage = tagOpen + '/>';
      } else {
        mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';
      }
    }

    switch (this._tag) {
      case 'input':
        transaction.getReactMountReady().enqueue(mountReadyInputWrapper, this);
      // falls through
      case 'button':
      case 'select':
      case 'textarea':
        if (props.autoFocus) {
          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
        }
        break;
    }

    return mountImage;
  },

  /**
   * Creates markup for the open tag and all attributes.
   *
   * This method has side effects because events get registered.
   *
   * Iterating over object properties is faster than iterating over arrays.
   * @see http://jsperf.com/obj-vs-arr-iteration
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} props
   * @return {string} Markup of opening tag.
   */
  _createOpenTagMarkupAndPutListeners: function (transaction, props) {
    var ret = '<' + this._currentElement.type;

    for (var propKey in props) {
      if (!props.hasOwnProperty(propKey)) {
        continue;
      }
      var propValue = props[propKey];
      if (propValue == null) {
        continue;
      }
      if (registrationNameModules.hasOwnProperty(propKey)) {
        if (propValue) {
          enqueuePutListener(this._rootNodeID, propKey, propValue, transaction);
        }
      } else {
        if (propKey === STYLE) {
          if (propValue) {
            if (process.env.NODE_ENV !== 'production') {
              // See `_updateDOMProperties`. style block
              this._previousStyle = propValue;
            }
            propValue = this._previousStyleCopy = assign({}, props.style);
          }
          propValue = CSSPropertyOperations.createMarkupForStyles(propValue);
        }
        var markup = null;
        if (this._tag != null && isCustomComponent(this._tag, props)) {
          markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);
        } else {
          markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
        }
        if (markup) {
          ret += ' ' + markup;
        }
      }
    }

    // For static pages, no need to put React ID and checksum. Saves lots of
    // bytes.
    if (transaction.renderToStaticMarkup) {
      return ret;
    }

    var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);
    return ret + ' ' + markupForID;
  },

  /**
   * Creates markup for the content between the tags.
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} props
   * @param {object} context
   * @return {string} Content markup.
   */
  _createContentMarkup: function (transaction, props, context) {
    var ret = '';

    // Intentional use of != to avoid catching zero/false.
    var innerHTML = props.dangerouslySetInnerHTML;
    if (innerHTML != null) {
      if (innerHTML.__html != null) {
        ret = innerHTML.__html;
      }
    } else {
      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
      var childrenToUse = contentToUse != null ? null : props.children;
      if (contentToUse != null) {
        // TODO: Validate that text is allowed as a child of this node
        ret = escapeTextContentForBrowser(contentToUse);
      } else if (childrenToUse != null) {
        var mountImages = this.mountChildren(childrenToUse, transaction, context);
        ret = mountImages.join('');
      }
    }
    if (newlineEatingTags[this._tag] && ret.charAt(0) === '\n') {
      // text/html ignores the first character in these tags if it's a newline
      // Prefer to break application/xml over text/html (for now) by adding
      // a newline specifically to get eaten by the parser. (Alternately for
      // textareas, replacing "^\n" with "\r\n" doesn't get eaten, and the first
      // \r is normalized out by HTMLTextAreaElement#value.)
      // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>
      // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>
      // See: <http://www.w3.org/TR/html5/syntax.html#newlines>
      // See: Parsing of "textarea" "listing" and "pre" elements
      //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>
      return '\n' + ret;
    } else {
      return ret;
    }
  },

  _createInitialChildren: function (transaction, props, context, el) {
    // Intentional use of != to avoid catching zero/false.
    var innerHTML = props.dangerouslySetInnerHTML;
    if (innerHTML != null) {
      if (innerHTML.__html != null) {
        setInnerHTML(el, innerHTML.__html);
      }
    } else {
      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
      var childrenToUse = contentToUse != null ? null : props.children;
      if (contentToUse != null) {
        // TODO: Validate that text is allowed as a child of this node
        setTextContent(el, contentToUse);
      } else if (childrenToUse != null) {
        var mountImages = this.mountChildren(childrenToUse, transaction, context);
        for (var i = 0; i < mountImages.length; i++) {
          el.appendChild(mountImages[i]);
        }
      }
    }
  },

  /**
   * Receives a next element and updates the component.
   *
   * @internal
   * @param {ReactElement} nextElement
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} context
   */
  receiveComponent: function (nextElement, transaction, context) {
    var prevElement = this._currentElement;
    this._currentElement = nextElement;
    this.updateComponent(transaction, prevElement, nextElement, context);
  },

  /**
   * Updates a native DOM component after it has already been allocated and
   * attached to the DOM. Reconciles the root DOM node, then recurses.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevElement
   * @param {ReactElement} nextElement
   * @internal
   * @overridable
   */
  updateComponent: function (transaction, prevElement, nextElement, context) {
    var lastProps = prevElement.props;
    var nextProps = this._currentElement.props;

    switch (this._tag) {
      case 'button':
        lastProps = ReactDOMButton.getNativeProps(this, lastProps);
        nextProps = ReactDOMButton.getNativeProps(this, nextProps);
        break;
      case 'input':
        ReactDOMInput.updateWrapper(this);
        lastProps = ReactDOMInput.getNativeProps(this, lastProps);
        nextProps = ReactDOMInput.getNativeProps(this, nextProps);
        break;
      case 'option':
        lastProps = ReactDOMOption.getNativeProps(this, lastProps);
        nextProps = ReactDOMOption.getNativeProps(this, nextProps);
        break;
      case 'select':
        lastProps = ReactDOMSelect.getNativeProps(this, lastProps);
        nextProps = ReactDOMSelect.getNativeProps(this, nextProps);
        break;
      case 'textarea':
        ReactDOMTextarea.updateWrapper(this);
        lastProps = ReactDOMTextarea.getNativeProps(this, lastProps);
        nextProps = ReactDOMTextarea.getNativeProps(this, nextProps);
        break;
    }

    if (process.env.NODE_ENV !== 'production') {
      // If the context is reference-equal to the old one, pass down the same
      // processed object so the update bailout in ReactReconciler behaves
      // correctly (and identically in dev and prod). See #5005.
      if (this._unprocessedContextDev !== context) {
        this._unprocessedContextDev = context;
        this._processedContextDev = processChildContextDev(context, this);
      }
      context = this._processedContextDev;
    }

    assertValidProps(this, nextProps);
    this._updateDOMProperties(lastProps, nextProps, transaction, null);
    this._updateDOMChildren(lastProps, nextProps, transaction, context);

    if (!canDefineProperty && this._nodeWithLegacyProperties) {
      this._nodeWithLegacyProperties.props = nextProps;
    }

    if (this._tag === 'select') {
      // <select> value update needs to occur after <option> children
      // reconciliation
      transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);
    }
  },

  /**
   * Reconciles the properties by detecting differences in property values and
   * updating the DOM as necessary. This function is probably the single most
   * critical path for performance optimization.
   *
   * TODO: Benchmark whether checking for changed values in memory actually
   *       improves performance (especially statically positioned elements).
   * TODO: Benchmark the effects of putting this at the top since 99% of props
   *       do not change for a given reconciliation.
   * TODO: Benchmark areas that can be improved with caching.
   *
   * @private
   * @param {object} lastProps
   * @param {object} nextProps
   * @param {ReactReconcileTransaction} transaction
   * @param {?DOMElement} node
   */
  _updateDOMProperties: function (lastProps, nextProps, transaction, node) {
    var propKey;
    var styleName;
    var styleUpdates;
    for (propKey in lastProps) {
      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey)) {
        continue;
      }
      if (propKey === STYLE) {
        var lastStyle = this._previousStyleCopy;
        for (styleName in lastStyle) {
          if (lastStyle.hasOwnProperty(styleName)) {
            styleUpdates = styleUpdates || {};
            styleUpdates[styleName] = '';
          }
        }
        this._previousStyleCopy = null;
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        if (lastProps[propKey]) {
          // Only call deleteListener if there was a listener previously or
          // else willDeleteListener gets called when there wasn't actually a
          // listener (e.g., onClick={null})
          deleteListener(this._rootNodeID, propKey);
        }
      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
        if (!node) {
          node = ReactMount.getNode(this._rootNodeID);
        }
        DOMPropertyOperations.deleteValueForProperty(node, propKey);
      }
    }
    for (propKey in nextProps) {
      var nextProp = nextProps[propKey];
      var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps[propKey];
      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {
        continue;
      }
      if (propKey === STYLE) {
        if (nextProp) {
          if (process.env.NODE_ENV !== 'production') {
            checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);
            this._previousStyle = nextProp;
          }
          nextProp = this._previousStyleCopy = assign({}, nextProp);
        } else {
          this._previousStyleCopy = null;
        }
        if (lastProp) {
          // Unset styles on `lastProp` but not on `nextProp`.
          for (styleName in lastProp) {
            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = '';
            }
          }
          // Update styles that changed since `lastProp`.
          for (styleName in nextProp) {
            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = nextProp[styleName];
            }
          }
        } else {
          // Relies on `updateStylesByID` not mutating `styleUpdates`.
          styleUpdates = nextProp;
        }
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        if (nextProp) {
          enqueuePutListener(this._rootNodeID, propKey, nextProp, transaction);
        } else if (lastProp) {
          deleteListener(this._rootNodeID, propKey);
        }
      } else if (isCustomComponent(this._tag, nextProps)) {
        if (!node) {
          node = ReactMount.getNode(this._rootNodeID);
        }
        DOMPropertyOperations.setValueForAttribute(node, propKey, nextProp);
      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
        if (!node) {
          node = ReactMount.getNode(this._rootNodeID);
        }
        // If we're updating to null or undefined, we should remove the property
        // from the DOM node instead of inadvertantly setting to a string. This
        // brings us in line with the same behavior we have on initial render.
        if (nextProp != null) {
          DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);
        } else {
          DOMPropertyOperations.deleteValueForProperty(node, propKey);
        }
      }
    }
    if (styleUpdates) {
      if (!node) {
        node = ReactMount.getNode(this._rootNodeID);
      }
      CSSPropertyOperations.setValueForStyles(node, styleUpdates);
    }
  },

  /**
   * Reconciles the children with the various properties that affect the
   * children content.
   *
   * @param {object} lastProps
   * @param {object} nextProps
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   */
  _updateDOMChildren: function (lastProps, nextProps, transaction, context) {
    var lastContent = CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
    var nextContent = CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

    var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;
    var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;

    // Note the use of `!=` which checks for null or undefined.
    var lastChildren = lastContent != null ? null : lastProps.children;
    var nextChildren = nextContent != null ? null : nextProps.children;

    // If we're switching from children to content/html or vice versa, remove
    // the old content
    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
    if (lastChildren != null && nextChildren == null) {
      this.updateChildren(null, transaction, context);
    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
      this.updateTextContent('');
    }

    if (nextContent != null) {
      if (lastContent !== nextContent) {
        this.updateTextContent('' + nextContent);
      }
    } else if (nextHtml != null) {
      if (lastHtml !== nextHtml) {
        this.updateMarkup('' + nextHtml);
      }
    } else if (nextChildren != null) {
      this.updateChildren(nextChildren, transaction, context);
    }
  },

  /**
   * Destroys all event registrations for this instance. Does not remove from
   * the DOM. That must be done by the parent.
   *
   * @internal
   */
  unmountComponent: function () {
    switch (this._tag) {
      case 'iframe':
      case 'img':
      case 'form':
      case 'video':
      case 'audio':
        var listeners = this._wrapperState.listeners;
        if (listeners) {
          for (var i = 0; i < listeners.length; i++) {
            listeners[i].remove();
          }
        }
        break;
      case 'input':
        ReactDOMInput.unmountWrapper(this);
        break;
      case 'html':
      case 'head':
      case 'body':
        /**
         * Components like <html> <head> and <body> can't be removed or added
         * easily in a cross-browser way, however it's valuable to be able to
         * take advantage of React's reconciliation for styling and <title>
         * management. So we just document it and throw in dangerous cases.
         */
        !false ? process.env.NODE_ENV !== 'production' ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is ' + 'impossible to unmount some top-level components (eg <html>, ' + '<head>, and <body>) reliably and efficiently. To fix this, have a ' + 'single top-level component that never unmounts render these ' + 'elements.', this._tag) : invariant(false) : undefined;
        break;
    }

    this.unmountChildren();
    ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);
    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
    this._rootNodeID = null;
    this._wrapperState = null;
    if (this._nodeWithLegacyProperties) {
      var node = this._nodeWithLegacyProperties;
      node._reactInternalComponent = null;
      this._nodeWithLegacyProperties = null;
    }
  },

  getPublicInstance: function () {
    if (!this._nodeWithLegacyProperties) {
      var node = ReactMount.getNode(this._rootNodeID);

      node._reactInternalComponent = this;
      node.getDOMNode = legacyGetDOMNode;
      node.isMounted = legacyIsMounted;
      node.setState = legacySetStateEtc;
      node.replaceState = legacySetStateEtc;
      node.forceUpdate = legacySetStateEtc;
      node.setProps = legacySetProps;
      node.replaceProps = legacyReplaceProps;

      if (process.env.NODE_ENV !== 'production') {
        if (canDefineProperty) {
          Object.defineProperties(node, legacyPropsDescriptor);
        } else {
          // updateComponent will update this property on subsequent renders
          node.props = this._currentElement.props;
        }
      } else {
        // updateComponent will update this property on subsequent renders
        node.props = this._currentElement.props;
      }

      this._nodeWithLegacyProperties = node;
    }
    return this._nodeWithLegacyProperties;
  }

};

ReactPerf.measureMethods(ReactDOMComponent, 'ReactDOMComponent', {
  mountComponent: 'mountComponent',
  updateComponent: 'updateComponent'
});

assign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);

module.exports = ReactDOMComponent;
}).call(this,require('_process'))

},{"./AutoFocusUtils":8,"./CSSPropertyOperations":11,"./DOMProperty":16,"./DOMPropertyOperations":17,"./EventConstants":21,"./Object.assign":29,"./ReactBrowserEventEmitter":33,"./ReactComponentBrowserEnvironment":38,"./ReactDOMButton":43,"./ReactDOMInput":48,"./ReactDOMOption":49,"./ReactDOMSelect":50,"./ReactDOMTextarea":54,"./ReactMount":72,"./ReactMultiChild":73,"./ReactPerf":78,"./ReactUpdateQueue":89,"./escapeTextContentForBrowser":113,"./isEventSupported":125,"./setInnerHTML":130,"./setTextContent":131,"./validateDOMNesting":134,"_process":6,"fbjs/lib/invariant":150,"fbjs/lib/keyOf":154,"fbjs/lib/shallowEqual":159,"fbjs/lib/warning":161}],45:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMFactories
 * @typechecks static-only
 */

'use strict';

var ReactElement = require('./ReactElement');
var ReactElementValidator = require('./ReactElementValidator');

var mapObject = require('fbjs/lib/mapObject');

/**
 * Create a factory that creates HTML tag elements.
 *
 * @param {string} tag Tag name (e.g. `div`).
 * @private
 */
function createDOMFactory(tag) {
  if (process.env.NODE_ENV !== 'production') {
    return ReactElementValidator.createFactory(tag);
  }
  return ReactElement.createFactory(tag);
}

/**
 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
 * This is also accessible via `React.DOM`.
 *
 * @public
 */
var ReactDOMFactories = mapObject({
  a: 'a',
  abbr: 'abbr',
  address: 'address',
  area: 'area',
  article: 'article',
  aside: 'aside',
  audio: 'audio',
  b: 'b',
  base: 'base',
  bdi: 'bdi',
  bdo: 'bdo',
  big: 'big',
  blockquote: 'blockquote',
  body: 'body',
  br: 'br',
  button: 'button',
  canvas: 'canvas',
  caption: 'caption',
  cite: 'cite',
  code: 'code',
  col: 'col',
  colgroup: 'colgroup',
  data: 'data',
  datalist: 'datalist',
  dd: 'dd',
  del: 'del',
  details: 'details',
  dfn: 'dfn',
  dialog: 'dialog',
  div: 'div',
  dl: 'dl',
  dt: 'dt',
  em: 'em',
  embed: 'embed',
  fieldset: 'fieldset',
  figcaption: 'figcaption',
  figure: 'figure',
  footer: 'footer',
  form: 'form',
  h1: 'h1',
  h2: 'h2',
  h3: 'h3',
  h4: 'h4',
  h5: 'h5',
  h6: 'h6',
  head: 'head',
  header: 'header',
  hgroup: 'hgroup',
  hr: 'hr',
  html: 'html',
  i: 'i',
  iframe: 'iframe',
  img: 'img',
  input: 'input',
  ins: 'ins',
  kbd: 'kbd',
  keygen: 'keygen',
  label: 'label',
  legend: 'legend',
  li: 'li',
  link: 'link',
  main: 'main',
  map: 'map',
  mark: 'mark',
  menu: 'menu',
  menuitem: 'menuitem',
  meta: 'meta',
  meter: 'meter',
  nav: 'nav',
  noscript: 'noscript',
  object: 'object',
  ol: 'ol',
  optgroup: 'optgroup',
  option: 'option',
  output: 'output',
  p: 'p',
  param: 'param',
  picture: 'picture',
  pre: 'pre',
  progress: 'progress',
  q: 'q',
  rp: 'rp',
  rt: 'rt',
  ruby: 'ruby',
  s: 's',
  samp: 'samp',
  script: 'script',
  section: 'section',
  select: 'select',
  small: 'small',
  source: 'source',
  span: 'span',
  strong: 'strong',
  style: 'style',
  sub: 'sub',
  summary: 'summary',
  sup: 'sup',
  table: 'table',
  tbody: 'tbody',
  td: 'td',
  textarea: 'textarea',
  tfoot: 'tfoot',
  th: 'th',
  thead: 'thead',
  time: 'time',
  title: 'title',
  tr: 'tr',
  track: 'track',
  u: 'u',
  ul: 'ul',
  'var': 'var',
  video: 'video',
  wbr: 'wbr',

  // SVG
  circle: 'circle',
  clipPath: 'clipPath',
  defs: 'defs',
  ellipse: 'ellipse',
  g: 'g',
  image: 'image',
  line: 'line',
  linearGradient: 'linearGradient',
  mask: 'mask',
  path: 'path',
  pattern: 'pattern',
  polygon: 'polygon',
  polyline: 'polyline',
  radialGradient: 'radialGradient',
  rect: 'rect',
  stop: 'stop',
  svg: 'svg',
  text: 'text',
  tspan: 'tspan'

}, createDOMFactory);

module.exports = ReactDOMFactories;
}).call(this,require('_process'))

},{"./ReactElement":59,"./ReactElementValidator":60,"_process":6,"fbjs/lib/mapObject":155}],46:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMFeatureFlags
 */

'use strict';

var ReactDOMFeatureFlags = {
  useCreateElement: false
};

module.exports = ReactDOMFeatureFlags;
},{}],47:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMIDOperations
 * @typechecks static-only
 */

'use strict';

var DOMChildrenOperations = require('./DOMChildrenOperations');
var DOMPropertyOperations = require('./DOMPropertyOperations');
var ReactMount = require('./ReactMount');
var ReactPerf = require('./ReactPerf');

var invariant = require('fbjs/lib/invariant');

/**
 * Errors for properties that should not be updated with `updatePropertyByID()`.
 *
 * @type {object}
 * @private
 */
var INVALID_PROPERTY_ERRORS = {
  dangerouslySetInnerHTML: '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',
  style: '`style` must be set using `updateStylesByID()`.'
};

/**
 * Operations used to process updates to DOM nodes.
 */
var ReactDOMIDOperations = {

  /**
   * Updates a DOM node with new property values. This should only be used to
   * update DOM properties in `DOMProperty`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} name A valid property name, see `DOMProperty`.
   * @param {*} value New value of the property.
   * @internal
   */
  updatePropertyByID: function (id, name, value) {
    var node = ReactMount.getNode(id);
    !!INVALID_PROPERTY_ERRORS.hasOwnProperty(name) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updatePropertyByID(...): %s', INVALID_PROPERTY_ERRORS[name]) : invariant(false) : undefined;

    // If we're updating to null or undefined, we should remove the property
    // from the DOM node instead of inadvertantly setting to a string. This
    // brings us in line with the same behavior we have on initial render.
    if (value != null) {
      DOMPropertyOperations.setValueForProperty(node, name, value);
    } else {
      DOMPropertyOperations.deleteValueForProperty(node, name);
    }
  },

  /**
   * Replaces a DOM node that exists in the document with markup.
   *
   * @param {string} id ID of child to be replaced.
   * @param {string} markup Dangerous markup to inject in place of child.
   * @internal
   * @see {Danger.dangerouslyReplaceNodeWithMarkup}
   */
  dangerouslyReplaceNodeWithMarkupByID: function (id, markup) {
    var node = ReactMount.getNode(id);
    DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);
  },

  /**
   * Updates a component's children by processing a series of updates.
   *
   * @param {array<object>} updates List of update configurations.
   * @param {array<string>} markup List of markup strings.
   * @internal
   */
  dangerouslyProcessChildrenUpdates: function (updates, markup) {
    for (var i = 0; i < updates.length; i++) {
      updates[i].parentNode = ReactMount.getNode(updates[i].parentID);
    }
    DOMChildrenOperations.processUpdates(updates, markup);
  }
};

ReactPerf.measureMethods(ReactDOMIDOperations, 'ReactDOMIDOperations', {
  dangerouslyReplaceNodeWithMarkupByID: 'dangerouslyReplaceNodeWithMarkupByID',
  dangerouslyProcessChildrenUpdates: 'dangerouslyProcessChildrenUpdates'
});

module.exports = ReactDOMIDOperations;
}).call(this,require('_process'))

},{"./DOMChildrenOperations":15,"./DOMPropertyOperations":17,"./ReactMount":72,"./ReactPerf":78,"_process":6,"fbjs/lib/invariant":150}],48:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMInput
 */

'use strict';

var ReactDOMIDOperations = require('./ReactDOMIDOperations');
var LinkedValueUtils = require('./LinkedValueUtils');
var ReactMount = require('./ReactMount');
var ReactUpdates = require('./ReactUpdates');

var assign = require('./Object.assign');
var invariant = require('fbjs/lib/invariant');

var instancesByReactID = {};

function forceUpdateIfMounted() {
  if (this._rootNodeID) {
    // DOM component is still mounted; update
    ReactDOMInput.updateWrapper(this);
  }
}

/**
 * Implements an <input> native component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */
var ReactDOMInput = {
  getNativeProps: function (inst, props, context) {
    var value = LinkedValueUtils.getValue(props);
    var checked = LinkedValueUtils.getChecked(props);

    var nativeProps = assign({}, props, {
      defaultChecked: undefined,
      defaultValue: undefined,
      value: value != null ? value : inst._wrapperState.initialValue,
      checked: checked != null ? checked : inst._wrapperState.initialChecked,
      onChange: inst._wrapperState.onChange
    });

    return nativeProps;
  },

  mountWrapper: function (inst, props) {
    if (process.env.NODE_ENV !== 'production') {
      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);
    }

    var defaultValue = props.defaultValue;
    inst._wrapperState = {
      initialChecked: props.defaultChecked || false,
      initialValue: defaultValue != null ? defaultValue : null,
      onChange: _handleChange.bind(inst)
    };
  },

  mountReadyWrapper: function (inst) {
    // Can't be in mountWrapper or else server rendering leaks.
    instancesByReactID[inst._rootNodeID] = inst;
  },

  unmountWrapper: function (inst) {
    delete instancesByReactID[inst._rootNodeID];
  },

  updateWrapper: function (inst) {
    var props = inst._currentElement.props;

    // TODO: Shouldn't this be getChecked(props)?
    var checked = props.checked;
    if (checked != null) {
      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'checked', checked || false);
    }

    var value = LinkedValueUtils.getValue(props);
    if (value != null) {
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);
    }
  }
};

function _handleChange(event) {
  var props = this._currentElement.props;

  var returnValue = LinkedValueUtils.executeOnChange(props, event);

  // Here we use asap to wait until all updates have propagated, which
  // is important when using controlled components within layers:
  // https://github.com/facebook/react/issues/1698
  ReactUpdates.asap(forceUpdateIfMounted, this);

  var name = props.name;
  if (props.type === 'radio' && name != null) {
    var rootNode = ReactMount.getNode(this._rootNodeID);
    var queryRoot = rootNode;

    while (queryRoot.parentNode) {
      queryRoot = queryRoot.parentNode;
    }

    // If `rootNode.form` was non-null, then we could try `form.elements`,
    // but that sometimes behaves strangely in IE8. We could also try using
    // `form.getElementsByName`, but that will only return direct children
    // and won't include inputs that use the HTML5 `form=` attribute. Since
    // the input might not even be in a form, let's just use the global
    // `querySelectorAll` to ensure we don't miss anything.
    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

    for (var i = 0; i < group.length; i++) {
      var otherNode = group[i];
      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
        continue;
      }
      // This will throw if radio buttons rendered by different copies of React
      // and the same name are rendered into the same form (same as #1939).
      // That's probably okay; we don't support it just as we don't support
      // mixing React with non-React.
      var otherID = ReactMount.getID(otherNode);
      !otherID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the ' + 'same `name` is not supported.') : invariant(false) : undefined;
      var otherInstance = instancesByReactID[otherID];
      !otherInstance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Unknown radio button ID %s.', otherID) : invariant(false) : undefined;
      // If this is a controlled radio button group, forcing the input that
      // was previously checked to update will cause it to be come re-checked
      // as appropriate.
      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
    }
  }

  return returnValue;
}

module.exports = ReactDOMInput;
}).call(this,require('_process'))

},{"./LinkedValueUtils":28,"./Object.assign":29,"./ReactDOMIDOperations":47,"./ReactMount":72,"./ReactUpdates":90,"_process":6,"fbjs/lib/invariant":150}],49:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMOption
 */

'use strict';

var ReactChildren = require('./ReactChildren');
var ReactDOMSelect = require('./ReactDOMSelect');

var assign = require('./Object.assign');
var warning = require('fbjs/lib/warning');

var valueContextKey = ReactDOMSelect.valueContextKey;

/**
 * Implements an <option> native component that warns when `selected` is set.
 */
var ReactDOMOption = {
  mountWrapper: function (inst, props, context) {
    // TODO (yungsters): Remove support for `selected` in <option>.
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : undefined;
    }

    // Look up whether this option is 'selected' via context
    var selectValue = context[valueContextKey];

    // If context key is null (e.g., no specified value or after initial mount)
    // or missing (e.g., for <datalist>), we don't change props.selected
    var selected = null;
    if (selectValue != null) {
      selected = false;
      if (Array.isArray(selectValue)) {
        // multiple
        for (var i = 0; i < selectValue.length; i++) {
          if ('' + selectValue[i] === '' + props.value) {
            selected = true;
            break;
          }
        }
      } else {
        selected = '' + selectValue === '' + props.value;
      }
    }

    inst._wrapperState = { selected: selected };
  },

  getNativeProps: function (inst, props, context) {
    var nativeProps = assign({ selected: undefined, children: undefined }, props);

    // Read state only from initial mount because <select> updates value
    // manually; we need the initial state only for server rendering
    if (inst._wrapperState.selected != null) {
      nativeProps.selected = inst._wrapperState.selected;
    }

    var content = '';

    // Flatten children and warn if they aren't strings or numbers;
    // invalid types are ignored.
    ReactChildren.forEach(props.children, function (child) {
      if (child == null) {
        return;
      }
      if (typeof child === 'string' || typeof child === 'number') {
        content += child;
      } else {
        process.env.NODE_ENV !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : undefined;
      }
    });

    nativeProps.children = content;
    return nativeProps;
  }

};

module.exports = ReactDOMOption;
}).call(this,require('_process'))

},{"./Object.assign":29,"./ReactChildren":35,"./ReactDOMSelect":50,"_process":6,"fbjs/lib/warning":161}],50:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMSelect
 */

'use strict';

var LinkedValueUtils = require('./LinkedValueUtils');
var ReactMount = require('./ReactMount');
var ReactUpdates = require('./ReactUpdates');

var assign = require('./Object.assign');
var warning = require('fbjs/lib/warning');

var valueContextKey = '__ReactDOMSelect_value$' + Math.random().toString(36).slice(2);

function updateOptionsIfPendingUpdateAndMounted() {
  if (this._rootNodeID && this._wrapperState.pendingUpdate) {
    this._wrapperState.pendingUpdate = false;

    var props = this._currentElement.props;
    var value = LinkedValueUtils.getValue(props);

    if (value != null) {
      updateOptions(this, props, value);
    }
  }
}

function getDeclarationErrorAddendum(owner) {
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

var valuePropNames = ['value', 'defaultValue'];

/**
 * Validation function for `value` and `defaultValue`.
 * @private
 */
function checkSelectPropTypes(inst, props) {
  var owner = inst._currentElement._owner;
  LinkedValueUtils.checkPropTypes('select', props, owner);

  for (var i = 0; i < valuePropNames.length; i++) {
    var propName = valuePropNames[i];
    if (props[propName] == null) {
      continue;
    }
    if (props.multiple) {
      process.env.NODE_ENV !== 'production' ? warning(Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : undefined;
    } else {
      process.env.NODE_ENV !== 'production' ? warning(!Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : undefined;
    }
  }
}

/**
 * @param {ReactDOMComponent} inst
 * @param {boolean} multiple
 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
 * @private
 */
function updateOptions(inst, multiple, propValue) {
  var selectedValue, i;
  var options = ReactMount.getNode(inst._rootNodeID).options;

  if (multiple) {
    selectedValue = {};
    for (i = 0; i < propValue.length; i++) {
      selectedValue['' + propValue[i]] = true;
    }
    for (i = 0; i < options.length; i++) {
      var selected = selectedValue.hasOwnProperty(options[i].value);
      if (options[i].selected !== selected) {
        options[i].selected = selected;
      }
    }
  } else {
    // Do not set `select.value` as exact behavior isn't consistent across all
    // browsers for all cases.
    selectedValue = '' + propValue;
    for (i = 0; i < options.length; i++) {
      if (options[i].value === selectedValue) {
        options[i].selected = true;
        return;
      }
    }
    if (options.length) {
      options[0].selected = true;
    }
  }
}

/**
 * Implements a <select> native component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * stringable. If `multiple` is true, the prop must be an array of stringables.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */
var ReactDOMSelect = {
  valueContextKey: valueContextKey,

  getNativeProps: function (inst, props, context) {
    return assign({}, props, {
      onChange: inst._wrapperState.onChange,
      value: undefined
    });
  },

  mountWrapper: function (inst, props) {
    if (process.env.NODE_ENV !== 'production') {
      checkSelectPropTypes(inst, props);
    }

    var value = LinkedValueUtils.getValue(props);
    inst._wrapperState = {
      pendingUpdate: false,
      initialValue: value != null ? value : props.defaultValue,
      onChange: _handleChange.bind(inst),
      wasMultiple: Boolean(props.multiple)
    };
  },

  processChildContext: function (inst, props, context) {
    // Pass down initial value so initial generated markup has correct
    // `selected` attributes
    var childContext = assign({}, context);
    childContext[valueContextKey] = inst._wrapperState.initialValue;
    return childContext;
  },

  postUpdateWrapper: function (inst) {
    var props = inst._currentElement.props;

    // After the initial mount, we control selected-ness manually so don't pass
    // the context value down
    inst._wrapperState.initialValue = undefined;

    var wasMultiple = inst._wrapperState.wasMultiple;
    inst._wrapperState.wasMultiple = Boolean(props.multiple);

    var value = LinkedValueUtils.getValue(props);
    if (value != null) {
      inst._wrapperState.pendingUpdate = false;
      updateOptions(inst, Boolean(props.multiple), value);
    } else if (wasMultiple !== Boolean(props.multiple)) {
      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
      if (props.defaultValue != null) {
        updateOptions(inst, Boolean(props.multiple), props.defaultValue);
      } else {
        // Revert the select back to its default unselected state.
        updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');
      }
    }
  }
};

function _handleChange(event) {
  var props = this._currentElement.props;
  var returnValue = LinkedValueUtils.executeOnChange(props, event);

  this._wrapperState.pendingUpdate = true;
  ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
  return returnValue;
}

module.exports = ReactDOMSelect;
}).call(this,require('_process'))

},{"./LinkedValueUtils":28,"./Object.assign":29,"./ReactMount":72,"./ReactUpdates":90,"_process":6,"fbjs/lib/warning":161}],51:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMSelection
 */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var getNodeForCharacterOffset = require('./getNodeForCharacterOffset');
var getTextContentAccessor = require('./getTextContentAccessor');

/**
 * While `isCollapsed` is available on the Selection object and `collapsed`
 * is available on the Range object, IE11 sometimes gets them wrong.
 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
 */
function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
  return anchorNode === focusNode && anchorOffset === focusOffset;
}

/**
 * Get the appropriate anchor and focus node/offset pairs for IE.
 *
 * The catch here is that IE's selection API doesn't provide information
 * about whether the selection is forward or backward, so we have to
 * behave as though it's always forward.
 *
 * IE text differs from modern selection in that it behaves as though
 * block elements end with a new line. This means character offsets will
 * differ between the two APIs.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getIEOffsets(node) {
  var selection = document.selection;
  var selectedRange = selection.createRange();
  var selectedLength = selectedRange.text.length;

  // Duplicate selection so we can move range without breaking user selection.
  var fromStart = selectedRange.duplicate();
  fromStart.moveToElementText(node);
  fromStart.setEndPoint('EndToStart', selectedRange);

  var startOffset = fromStart.text.length;
  var endOffset = startOffset + selectedLength;

  return {
    start: startOffset,
    end: endOffset
  };
}

/**
 * @param {DOMElement} node
 * @return {?object}
 */
function getModernOffsets(node) {
  var selection = window.getSelection && window.getSelection();

  if (!selection || selection.rangeCount === 0) {
    return null;
  }

  var anchorNode = selection.anchorNode;
  var anchorOffset = selection.anchorOffset;
  var focusNode = selection.focusNode;
  var focusOffset = selection.focusOffset;

  var currentRange = selection.getRangeAt(0);

  // In Firefox, range.startContainer and range.endContainer can be "anonymous
  // divs", e.g. the up/down buttons on an <input type="number">. Anonymous
  // divs do not seem to expose properties, triggering a "Permission denied
  // error" if any of its properties are accessed. The only seemingly possible
  // way to avoid erroring is to access a property that typically works for
  // non-anonymous divs and catch any error that may otherwise arise. See
  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
  try {
    /* eslint-disable no-unused-expressions */
    currentRange.startContainer.nodeType;
    currentRange.endContainer.nodeType;
    /* eslint-enable no-unused-expressions */
  } catch (e) {
    return null;
  }

  // If the node and offset values are the same, the selection is collapsed.
  // `Selection.isCollapsed` is available natively, but IE sometimes gets
  // this value wrong.
  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);

  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

  var tempRange = currentRange.cloneRange();
  tempRange.selectNodeContents(node);
  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);

  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
  var end = start + rangeLength;

  // Detect whether the selection is backward.
  var detectionRange = document.createRange();
  detectionRange.setStart(anchorNode, anchorOffset);
  detectionRange.setEnd(focusNode, focusOffset);
  var isBackward = detectionRange.collapsed;

  return {
    start: isBackward ? end : start,
    end: isBackward ? start : end
  };
}

/**
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setIEOffsets(node, offsets) {
  var range = document.selection.createRange().duplicate();
  var start, end;

  if (typeof offsets.end === 'undefined') {
    start = offsets.start;
    end = start;
  } else if (offsets.start > offsets.end) {
    start = offsets.end;
    end = offsets.start;
  } else {
    start = offsets.start;
    end = offsets.end;
  }

  range.moveToElementText(node);
  range.moveStart('character', start);
  range.setEndPoint('EndToStart', range);
  range.moveEnd('character', end - start);
  range.select();
}

/**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setModernOffsets(node, offsets) {
  if (!window.getSelection) {
    return;
  }

  var selection = window.getSelection();
  var length = node[getTextContentAccessor()].length;
  var start = Math.min(offsets.start, length);
  var end = typeof offsets.end === 'undefined' ? start : Math.min(offsets.end, length);

  // IE 11 uses modern selection, but doesn't support the extend method.
  // Flip backward selections, so we can set with a single range.
  if (!selection.extend && start > end) {
    var temp = end;
    end = start;
    start = temp;
  }

  var startMarker = getNodeForCharacterOffset(node, start);
  var endMarker = getNodeForCharacterOffset(node, end);

  if (startMarker && endMarker) {
    var range = document.createRange();
    range.setStart(startMarker.node, startMarker.offset);
    selection.removeAllRanges();

    if (start > end) {
      selection.addRange(range);
      selection.extend(endMarker.node, endMarker.offset);
    } else {
      range.setEnd(endMarker.node, endMarker.offset);
      selection.addRange(range);
    }
  }
}

var useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);

var ReactDOMSelection = {
  /**
   * @param {DOMElement} node
   */
  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

  /**
   * @param {DOMElement|DOMTextNode} node
   * @param {object} offsets
   */
  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
};

module.exports = ReactDOMSelection;
},{"./getNodeForCharacterOffset":122,"./getTextContentAccessor":123,"fbjs/lib/ExecutionEnvironment":136}],52:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMServer
 */

'use strict';

var ReactDefaultInjection = require('./ReactDefaultInjection');
var ReactServerRendering = require('./ReactServerRendering');
var ReactVersion = require('./ReactVersion');

ReactDefaultInjection.inject();

var ReactDOMServer = {
  renderToString: ReactServerRendering.renderToString,
  renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,
  version: ReactVersion
};

module.exports = ReactDOMServer;
},{"./ReactDefaultInjection":56,"./ReactServerRendering":87,"./ReactVersion":91}],53:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMTextComponent
 * @typechecks static-only
 */

'use strict';

var DOMChildrenOperations = require('./DOMChildrenOperations');
var DOMPropertyOperations = require('./DOMPropertyOperations');
var ReactComponentBrowserEnvironment = require('./ReactComponentBrowserEnvironment');
var ReactMount = require('./ReactMount');

var assign = require('./Object.assign');
var escapeTextContentForBrowser = require('./escapeTextContentForBrowser');
var setTextContent = require('./setTextContent');
var validateDOMNesting = require('./validateDOMNesting');

/**
 * Text nodes violate a couple assumptions that React makes about components:
 *
 *  - When mounting text into the DOM, adjacent text nodes are merged.
 *  - Text nodes cannot be assigned a React root ID.
 *
 * This component is used to wrap strings in elements so that they can undergo
 * the same reconciliation that is applied to elements.
 *
 * TODO: Investigate representing React components in the DOM with text nodes.
 *
 * @class ReactDOMTextComponent
 * @extends ReactComponent
 * @internal
 */
var ReactDOMTextComponent = function (props) {
  // This constructor and its argument is currently used by mocks.
};

assign(ReactDOMTextComponent.prototype, {

  /**
   * @param {ReactText} text
   * @internal
   */
  construct: function (text) {
    // TODO: This is really a ReactText (ReactNode), not a ReactElement
    this._currentElement = text;
    this._stringText = '' + text;

    // Properties
    this._rootNodeID = null;
    this._mountIndex = 0;
  },

  /**
   * Creates the markup for this text node. This node is not intended to have
   * any features besides containing text content.
   *
   * @param {string} rootID DOM ID of the root node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {string} Markup for this text node.
   * @internal
   */
  mountComponent: function (rootID, transaction, context) {
    if (process.env.NODE_ENV !== 'production') {
      if (context[validateDOMNesting.ancestorInfoContextKey]) {
        validateDOMNesting('span', null, context[validateDOMNesting.ancestorInfoContextKey]);
      }
    }

    this._rootNodeID = rootID;
    if (transaction.useCreateElement) {
      var ownerDocument = context[ReactMount.ownerDocumentContextKey];
      var el = ownerDocument.createElement('span');
      DOMPropertyOperations.setAttributeForID(el, rootID);
      // Populate node cache
      ReactMount.getID(el);
      setTextContent(el, this._stringText);
      return el;
    } else {
      var escapedText = escapeTextContentForBrowser(this._stringText);

      if (transaction.renderToStaticMarkup) {
        // Normally we'd wrap this in a `span` for the reasons stated above, but
        // since this is a situation where React won't take over (static pages),
        // we can simply return the text as it is.
        return escapedText;
      }

      return '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' + escapedText + '</span>';
    }
  },

  /**
   * Updates this component by updating the text content.
   *
   * @param {ReactText} nextText The next text content
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  receiveComponent: function (nextText, transaction) {
    if (nextText !== this._currentElement) {
      this._currentElement = nextText;
      var nextStringText = '' + nextText;
      if (nextStringText !== this._stringText) {
        // TODO: Save this as pending props and use performUpdateIfNecessary
        // and/or updateComponent to do the actual update for consistency with
        // other component types?
        this._stringText = nextStringText;
        var node = ReactMount.getNode(this._rootNodeID);
        DOMChildrenOperations.updateTextContent(node, nextStringText);
      }
    }
  },

  unmountComponent: function () {
    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
  }

});

module.exports = ReactDOMTextComponent;
}).call(this,require('_process'))

},{"./DOMChildrenOperations":15,"./DOMPropertyOperations":17,"./Object.assign":29,"./ReactComponentBrowserEnvironment":38,"./ReactMount":72,"./escapeTextContentForBrowser":113,"./setTextContent":131,"./validateDOMNesting":134,"_process":6}],54:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMTextarea
 */

'use strict';

var LinkedValueUtils = require('./LinkedValueUtils');
var ReactDOMIDOperations = require('./ReactDOMIDOperations');
var ReactUpdates = require('./ReactUpdates');

var assign = require('./Object.assign');
var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

function forceUpdateIfMounted() {
  if (this._rootNodeID) {
    // DOM component is still mounted; update
    ReactDOMTextarea.updateWrapper(this);
  }
}

/**
 * Implements a <textarea> native component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */
var ReactDOMTextarea = {
  getNativeProps: function (inst, props, context) {
    !(props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : invariant(false) : undefined;

    // Always set children to the same thing. In IE9, the selection range will
    // get reset if `textContent` is mutated.
    var nativeProps = assign({}, props, {
      defaultValue: undefined,
      value: undefined,
      children: inst._wrapperState.initialValue,
      onChange: inst._wrapperState.onChange
    });

    return nativeProps;
  },

  mountWrapper: function (inst, props) {
    if (process.env.NODE_ENV !== 'production') {
      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);
    }

    var defaultValue = props.defaultValue;
    // TODO (yungsters): Remove support for children content in <textarea>.
    var children = props.children;
    if (children != null) {
      if (process.env.NODE_ENV !== 'production') {
        process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : undefined;
      }
      !(defaultValue == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : invariant(false) : undefined;
      if (Array.isArray(children)) {
        !(children.length <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : invariant(false) : undefined;
        children = children[0];
      }

      defaultValue = '' + children;
    }
    if (defaultValue == null) {
      defaultValue = '';
    }
    var value = LinkedValueUtils.getValue(props);

    inst._wrapperState = {
      // We save the initial value so that `ReactDOMComponent` doesn't update
      // `textContent` (unnecessary since we update value).
      // The initial value can be a boolean or object so that's why it's
      // forced to be a string.
      initialValue: '' + (value != null ? value : defaultValue),
      onChange: _handleChange.bind(inst)
    };
  },

  updateWrapper: function (inst) {
    var props = inst._currentElement.props;
    var value = LinkedValueUtils.getValue(props);
    if (value != null) {
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);
    }
  }
};

function _handleChange(event) {
  var props = this._currentElement.props;
  var returnValue = LinkedValueUtils.executeOnChange(props, event);
  ReactUpdates.asap(forceUpdateIfMounted, this);
  return returnValue;
}

module.exports = ReactDOMTextarea;
}).call(this,require('_process'))

},{"./LinkedValueUtils":28,"./Object.assign":29,"./ReactDOMIDOperations":47,"./ReactUpdates":90,"_process":6,"fbjs/lib/invariant":150,"fbjs/lib/warning":161}],55:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultBatchingStrategy
 */

'use strict';

var ReactUpdates = require('./ReactUpdates');
var Transaction = require('./Transaction');

var assign = require('./Object.assign');
var emptyFunction = require('fbjs/lib/emptyFunction');

var RESET_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: function () {
    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
  }
};

var FLUSH_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
};

var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

function ReactDefaultBatchingStrategyTransaction() {
  this.reinitializeTransaction();
}

assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction.Mixin, {
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  }
});

var transaction = new ReactDefaultBatchingStrategyTransaction();

var ReactDefaultBatchingStrategy = {
  isBatchingUpdates: false,

  /**
   * Call the provided function in a context within which calls to `setState`
   * and friends are batched such that components aren't updated unnecessarily.
   */
  batchedUpdates: function (callback, a, b, c, d, e) {
    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

    // The code is written this way to avoid extra allocations
    if (alreadyBatchingUpdates) {
      callback(a, b, c, d, e);
    } else {
      transaction.perform(callback, null, a, b, c, d, e);
    }
  }
};

module.exports = ReactDefaultBatchingStrategy;
},{"./Object.assign":29,"./ReactUpdates":90,"./Transaction":107,"fbjs/lib/emptyFunction":142}],56:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultInjection
 */

'use strict';

var BeforeInputEventPlugin = require('./BeforeInputEventPlugin');
var ChangeEventPlugin = require('./ChangeEventPlugin');
var ClientReactRootIndex = require('./ClientReactRootIndex');
var DefaultEventPluginOrder = require('./DefaultEventPluginOrder');
var EnterLeaveEventPlugin = require('./EnterLeaveEventPlugin');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var HTMLDOMPropertyConfig = require('./HTMLDOMPropertyConfig');
var ReactBrowserComponentMixin = require('./ReactBrowserComponentMixin');
var ReactComponentBrowserEnvironment = require('./ReactComponentBrowserEnvironment');
var ReactDefaultBatchingStrategy = require('./ReactDefaultBatchingStrategy');
var ReactDOMComponent = require('./ReactDOMComponent');
var ReactDOMTextComponent = require('./ReactDOMTextComponent');
var ReactEventListener = require('./ReactEventListener');
var ReactInjection = require('./ReactInjection');
var ReactInstanceHandles = require('./ReactInstanceHandles');
var ReactMount = require('./ReactMount');
var ReactReconcileTransaction = require('./ReactReconcileTransaction');
var SelectEventPlugin = require('./SelectEventPlugin');
var ServerReactRootIndex = require('./ServerReactRootIndex');
var SimpleEventPlugin = require('./SimpleEventPlugin');
var SVGDOMPropertyConfig = require('./SVGDOMPropertyConfig');

var alreadyInjected = false;

function inject() {
  if (alreadyInjected) {
    // TODO: This is currently true because these injections are shared between
    // the client and the server package. They should be built independently
    // and not share any injection state. Then this problem will be solved.
    return;
  }
  alreadyInjected = true;

  ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);

  /**
   * Inject modules for resolving DOM hierarchy and plugin ordering.
   */
  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
  ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);
  ReactInjection.EventPluginHub.injectMount(ReactMount);

  /**
   * Some important event plugins included by default (without having to require
   * them).
   */
  ReactInjection.EventPluginHub.injectEventPluginsByName({
    SimpleEventPlugin: SimpleEventPlugin,
    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
    ChangeEventPlugin: ChangeEventPlugin,
    SelectEventPlugin: SelectEventPlugin,
    BeforeInputEventPlugin: BeforeInputEventPlugin
  });

  ReactInjection.NativeComponent.injectGenericComponentClass(ReactDOMComponent);

  ReactInjection.NativeComponent.injectTextComponentClass(ReactDOMTextComponent);

  ReactInjection.Class.injectMixin(ReactBrowserComponentMixin);

  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

  ReactInjection.EmptyComponent.injectEmptyComponent('noscript');

  ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);
  ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);

  ReactInjection.RootIndex.injectCreateReactRootIndex(ExecutionEnvironment.canUseDOM ? ClientReactRootIndex.createReactRootIndex : ServerReactRootIndex.createReactRootIndex);

  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);

  if (process.env.NODE_ENV !== 'production') {
    var url = ExecutionEnvironment.canUseDOM && window.location.href || '';
    if (/[?&]react_perf\b/.test(url)) {
      var ReactDefaultPerf = require('./ReactDefaultPerf');
      ReactDefaultPerf.start();
    }
  }
}

module.exports = {
  inject: inject
};
}).call(this,require('_process'))

},{"./BeforeInputEventPlugin":9,"./ChangeEventPlugin":13,"./ClientReactRootIndex":14,"./DefaultEventPluginOrder":19,"./EnterLeaveEventPlugin":20,"./HTMLDOMPropertyConfig":27,"./ReactBrowserComponentMixin":32,"./ReactComponentBrowserEnvironment":38,"./ReactDOMComponent":44,"./ReactDOMTextComponent":53,"./ReactDefaultBatchingStrategy":55,"./ReactDefaultPerf":57,"./ReactEventListener":65,"./ReactInjection":66,"./ReactInstanceHandles":68,"./ReactMount":72,"./ReactReconcileTransaction":82,"./SVGDOMPropertyConfig":92,"./SelectEventPlugin":93,"./ServerReactRootIndex":94,"./SimpleEventPlugin":95,"_process":6,"fbjs/lib/ExecutionEnvironment":136}],57:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultPerf
 * @typechecks static-only
 */

'use strict';

var DOMProperty = require('./DOMProperty');
var ReactDefaultPerfAnalysis = require('./ReactDefaultPerfAnalysis');
var ReactMount = require('./ReactMount');
var ReactPerf = require('./ReactPerf');

var performanceNow = require('fbjs/lib/performanceNow');

function roundFloat(val) {
  return Math.floor(val * 100) / 100;
}

function addValue(obj, key, val) {
  obj[key] = (obj[key] || 0) + val;
}

var ReactDefaultPerf = {
  _allMeasurements: [], // last item in the list is the current one
  _mountStack: [0],
  _injected: false,

  start: function () {
    if (!ReactDefaultPerf._injected) {
      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);
    }

    ReactDefaultPerf._allMeasurements.length = 0;
    ReactPerf.enableMeasure = true;
  },

  stop: function () {
    ReactPerf.enableMeasure = false;
  },

  getLastMeasurements: function () {
    return ReactDefaultPerf._allMeasurements;
  },

  printExclusive: function (measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);
    console.table(summary.map(function (item) {
      return {
        'Component class name': item.componentName,
        'Total inclusive time (ms)': roundFloat(item.inclusive),
        'Exclusive mount time (ms)': roundFloat(item.exclusive),
        'Exclusive render time (ms)': roundFloat(item.render),
        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),
        'Render time per instance (ms)': roundFloat(item.render / item.count),
        'Instances': item.count
      };
    }));
    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct
    // number.
  },

  printInclusive: function (measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);
    console.table(summary.map(function (item) {
      return {
        'Owner > component': item.componentName,
        'Inclusive time (ms)': roundFloat(item.time),
        'Instances': item.count
      };
    }));
    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
  },

  getMeasurementsSummaryMap: function (measurements) {
    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements, true);
    return summary.map(function (item) {
      return {
        'Owner > component': item.componentName,
        'Wasted time (ms)': item.time,
        'Instances': item.count
      };
    });
  },

  printWasted: function (measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));
    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
  },

  printDOM: function (measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
    console.table(summary.map(function (item) {
      var result = {};
      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;
      result.type = item.type;
      result.args = JSON.stringify(item.args);
      return result;
    }));
    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
  },

  _recordWrite: function (id, fnName, totalTime, args) {
    // TODO: totalTime isn't that useful since it doesn't count paints/reflows
    var writes = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].writes;
    writes[id] = writes[id] || [];
    writes[id].push({
      type: fnName,
      time: totalTime,
      args: args
    });
  },

  measure: function (moduleName, fnName, func) {
    return function () {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var totalTime;
      var rv;
      var start;

      if (fnName === '_renderNewRootComponent' || fnName === 'flushBatchedUpdates') {
        // A "measurement" is a set of metrics recorded for each flush. We want
        // to group the metrics for a given flush together so we can look at the
        // components that rendered and the DOM operations that actually
        // happened to determine the amount of "wasted work" performed.
        ReactDefaultPerf._allMeasurements.push({
          exclusive: {},
          inclusive: {},
          render: {},
          counts: {},
          writes: {},
          displayNames: {},
          totalTime: 0,
          created: {}
        });
        start = performanceNow();
        rv = func.apply(this, args);
        ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].totalTime = performanceNow() - start;
        return rv;
      } else if (fnName === '_mountImageIntoNode' || moduleName === 'ReactBrowserEventEmitter' || moduleName === 'ReactDOMIDOperations' || moduleName === 'CSSPropertyOperations' || moduleName === 'DOMChildrenOperations' || moduleName === 'DOMPropertyOperations') {
        start = performanceNow();
        rv = func.apply(this, args);
        totalTime = performanceNow() - start;

        if (fnName === '_mountImageIntoNode') {
          var mountID = ReactMount.getID(args[1]);
          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);
        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {
          // special format
          args[0].forEach(function (update) {
            var writeArgs = {};
            if (update.fromIndex !== null) {
              writeArgs.fromIndex = update.fromIndex;
            }
            if (update.toIndex !== null) {
              writeArgs.toIndex = update.toIndex;
            }
            if (update.textContent !== null) {
              writeArgs.textContent = update.textContent;
            }
            if (update.markupIndex !== null) {
              writeArgs.markup = args[1][update.markupIndex];
            }
            ReactDefaultPerf._recordWrite(update.parentID, update.type, totalTime, writeArgs);
          });
        } else {
          // basic format
          var id = args[0];
          if (typeof id === 'object') {
            id = ReactMount.getID(args[0]);
          }
          ReactDefaultPerf._recordWrite(id, fnName, totalTime, Array.prototype.slice.call(args, 1));
        }
        return rv;
      } else if (moduleName === 'ReactCompositeComponent' && (fnName === 'mountComponent' || fnName === 'updateComponent' || // TODO: receiveComponent()?
      fnName === '_renderValidatedComponent')) {

        if (this._currentElement.type === ReactMount.TopLevelWrapper) {
          return func.apply(this, args);
        }

        var rootNodeID = fnName === 'mountComponent' ? args[0] : this._rootNodeID;
        var isRender = fnName === '_renderValidatedComponent';
        var isMount = fnName === 'mountComponent';

        var mountStack = ReactDefaultPerf._mountStack;
        var entry = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1];

        if (isRender) {
          addValue(entry.counts, rootNodeID, 1);
        } else if (isMount) {
          entry.created[rootNodeID] = true;
          mountStack.push(0);
        }

        start = performanceNow();
        rv = func.apply(this, args);
        totalTime = performanceNow() - start;

        if (isRender) {
          addValue(entry.render, rootNodeID, totalTime);
        } else if (isMount) {
          var subMountTime = mountStack.pop();
          mountStack[mountStack.length - 1] += totalTime;
          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);
          addValue(entry.inclusive, rootNodeID, totalTime);
        } else {
          addValue(entry.inclusive, rootNodeID, totalTime);
        }

        entry.displayNames[rootNodeID] = {
          current: this.getName(),
          owner: this._currentElement._owner ? this._currentElement._owner.getName() : '<root>'
        };

        return rv;
      } else {
        return func.apply(this, args);
      }
    };
  }
};

module.exports = ReactDefaultPerf;
},{"./DOMProperty":16,"./ReactDefaultPerfAnalysis":58,"./ReactMount":72,"./ReactPerf":78,"fbjs/lib/performanceNow":158}],58:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultPerfAnalysis
 */

'use strict';

var assign = require('./Object.assign');

// Don't try to save users less than 1.2ms (a number I made up)
var DONT_CARE_THRESHOLD = 1.2;
var DOM_OPERATION_TYPES = {
  '_mountImageIntoNode': 'set innerHTML',
  INSERT_MARKUP: 'set innerHTML',
  MOVE_EXISTING: 'move',
  REMOVE_NODE: 'remove',
  SET_MARKUP: 'set innerHTML',
  TEXT_CONTENT: 'set textContent',
  'setValueForProperty': 'update attribute',
  'setValueForAttribute': 'update attribute',
  'deleteValueForProperty': 'remove attribute',
  'dangerouslyReplaceNodeWithMarkupByID': 'replace'
};

function getTotalTime(measurements) {
  // TODO: return number of DOM ops? could be misleading.
  // TODO: measure dropped frames after reconcile?
  // TODO: log total time of each reconcile and the top-level component
  // class that triggered it.
  var totalTime = 0;
  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    totalTime += measurement.totalTime;
  }
  return totalTime;
}

function getDOMSummary(measurements) {
  var items = [];
  measurements.forEach(function (measurement) {
    Object.keys(measurement.writes).forEach(function (id) {
      measurement.writes[id].forEach(function (write) {
        items.push({
          id: id,
          type: DOM_OPERATION_TYPES[write.type] || write.type,
          args: write.args
        });
      });
    });
  });
  return items;
}

function getExclusiveSummary(measurements) {
  var candidates = {};
  var displayName;

  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

    for (var id in allIDs) {
      displayName = measurement.displayNames[id].current;

      candidates[displayName] = candidates[displayName] || {
        componentName: displayName,
        inclusive: 0,
        exclusive: 0,
        render: 0,
        count: 0
      };
      if (measurement.render[id]) {
        candidates[displayName].render += measurement.render[id];
      }
      if (measurement.exclusive[id]) {
        candidates[displayName].exclusive += measurement.exclusive[id];
      }
      if (measurement.inclusive[id]) {
        candidates[displayName].inclusive += measurement.inclusive[id];
      }
      if (measurement.counts[id]) {
        candidates[displayName].count += measurement.counts[id];
      }
    }
  }

  // Now make a sorted array with the results.
  var arr = [];
  for (displayName in candidates) {
    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {
      arr.push(candidates[displayName]);
    }
  }

  arr.sort(function (a, b) {
    return b.exclusive - a.exclusive;
  });

  return arr;
}

function getInclusiveSummary(measurements, onlyClean) {
  var candidates = {};
  var inclusiveKey;

  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var allIDs = assign({}, measurement.exclusive, measurement.inclusive);
    var cleanComponents;

    if (onlyClean) {
      cleanComponents = getUnchangedComponents(measurement);
    }

    for (var id in allIDs) {
      if (onlyClean && !cleanComponents[id]) {
        continue;
      }

      var displayName = measurement.displayNames[id];

      // Inclusive time is not useful for many components without knowing where
      // they are instantiated. So we aggregate inclusive time with both the
      // owner and current displayName as the key.
      inclusiveKey = displayName.owner + ' > ' + displayName.current;

      candidates[inclusiveKey] = candidates[inclusiveKey] || {
        componentName: inclusiveKey,
        time: 0,
        count: 0
      };

      if (measurement.inclusive[id]) {
        candidates[inclusiveKey].time += measurement.inclusive[id];
      }
      if (measurement.counts[id]) {
        candidates[inclusiveKey].count += measurement.counts[id];
      }
    }
  }

  // Now make a sorted array with the results.
  var arr = [];
  for (inclusiveKey in candidates) {
    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {
      arr.push(candidates[inclusiveKey]);
    }
  }

  arr.sort(function (a, b) {
    return b.time - a.time;
  });

  return arr;
}

function getUnchangedComponents(measurement) {
  // For a given reconcile, look at which components did not actually
  // render anything to the DOM and return a mapping of their ID to
  // the amount of time it took to render the entire subtree.
  var cleanComponents = {};
  var dirtyLeafIDs = Object.keys(measurement.writes);
  var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

  for (var id in allIDs) {
    var isDirty = false;
    // For each component that rendered, see if a component that triggered
    // a DOM op is in its subtree.
    for (var i = 0; i < dirtyLeafIDs.length; i++) {
      if (dirtyLeafIDs[i].indexOf(id) === 0) {
        isDirty = true;
        break;
      }
    }
    // check if component newly created
    if (measurement.created[id]) {
      isDirty = true;
    }
    if (!isDirty && measurement.counts[id] > 0) {
      cleanComponents[id] = true;
    }
  }
  return cleanComponents;
}

var ReactDefaultPerfAnalysis = {
  getExclusiveSummary: getExclusiveSummary,
  getInclusiveSummary: getInclusiveSummary,
  getDOMSummary: getDOMSummary,
  getTotalTime: getTotalTime
};

module.exports = ReactDefaultPerfAnalysis;
},{"./Object.assign":29}],59:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactElement
 */

'use strict';

var ReactCurrentOwner = require('./ReactCurrentOwner');

var assign = require('./Object.assign');

// The Symbol used to tag the ReactElement type. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

var RESERVED_PROPS = {
  key: true,
  ref: true,
  __self: true,
  __source: true
};

var canDefineProperty = false;
if (process.env.NODE_ENV !== 'production') {
  try {
    Object.defineProperty({}, 'x', {});
    canDefineProperty = true;
  } catch (x) {
    // IE will fail on defineProperty
  }
}

/**
 * Base constructor for all React elements. This is only used to make this
 * work with a dynamic instanceof check. Nothing should live on this prototype.
 *
 * @param {*} type
 * @param {*} key
 * @param {string|object} ref
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @param {*} owner
 * @param {*} props
 * @internal
 */
var ReactElement = function (type, key, ref, self, source, owner, props) {
  var element = {
    // This tag allow us to uniquely identify this as a React Element
    $$typeof: REACT_ELEMENT_TYPE,

    // Built-in properties that belong on the element
    type: type,
    key: key,
    ref: ref,
    props: props,

    // Record the component responsible for creating this element.
    _owner: owner
  };

  if (process.env.NODE_ENV !== 'production') {
    // The validation flag is currently mutative. We put it on
    // an external backing store so that we can freeze the whole object.
    // This can be replaced with a WeakMap once they are implemented in
    // commonly used development environments.
    element._store = {};

    // To make comparing ReactElements easier for testing purposes, we make
    // the validation flag non-enumerable (where possible, which should
    // include every environment we run tests in), so the test framework
    // ignores it.
    if (canDefineProperty) {
      Object.defineProperty(element._store, 'validated', {
        configurable: false,
        enumerable: false,
        writable: true,
        value: false
      });
      // self and source are DEV only properties.
      Object.defineProperty(element, '_self', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: self
      });
      // Two elements created in two different places should be considered
      // equal for testing purposes and therefore we hide it from enumeration.
      Object.defineProperty(element, '_source', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: source
      });
    } else {
      element._store.validated = false;
      element._self = self;
      element._source = source;
    }
    Object.freeze(element.props);
    Object.freeze(element);
  }

  return element;
};

ReactElement.createElement = function (type, config, children) {
  var propName;

  // Reserved names are extracted
  var props = {};

  var key = null;
  var ref = null;
  var self = null;
  var source = null;

  if (config != null) {
    ref = config.ref === undefined ? null : config.ref;
    key = config.key === undefined ? null : '' + config.key;
    self = config.__self === undefined ? null : config.__self;
    source = config.__source === undefined ? null : config.__source;
    // Remaining properties are added to a new props object
    for (propName in config) {
      if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    props.children = childArray;
  }

  // Resolve default props
  if (type && type.defaultProps) {
    var defaultProps = type.defaultProps;
    for (propName in defaultProps) {
      if (typeof props[propName] === 'undefined') {
        props[propName] = defaultProps[propName];
      }
    }
  }

  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
};

ReactElement.createFactory = function (type) {
  var factory = ReactElement.createElement.bind(null, type);
  // Expose the type on the factory and the prototype so that it can be
  // easily accessed on elements. E.g. `<Foo />.type === Foo`.
  // This should not be named `constructor` since this may not be the function
  // that created the element, and it may not even be a constructor.
  // Legacy hook TODO: Warn if this is accessed
  factory.type = type;
  return factory;
};

ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

  return newElement;
};

ReactElement.cloneAndReplaceProps = function (oldElement, newProps) {
  var newElement = ReactElement(oldElement.type, oldElement.key, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, newProps);

  if (process.env.NODE_ENV !== 'production') {
    // If the key on the original is valid, then the clone is valid
    newElement._store.validated = oldElement._store.validated;
  }

  return newElement;
};

ReactElement.cloneElement = function (element, config, children) {
  var propName;

  // Original props are copied
  var props = assign({}, element.props);

  // Reserved names are extracted
  var key = element.key;
  var ref = element.ref;
  // Self is preserved since the owner is preserved.
  var self = element._self;
  // Source is preserved since cloneElement is unlikely to be targeted by a
  // transpiler, and the original source is probably a better indicator of the
  // true owner.
  var source = element._source;

  // Owner will be preserved, unless ref is overridden
  var owner = element._owner;

  if (config != null) {
    if (config.ref !== undefined) {
      // Silently steal the ref from the parent.
      ref = config.ref;
      owner = ReactCurrentOwner.current;
    }
    if (config.key !== undefined) {
      key = '' + config.key;
    }
    // Remaining properties override existing props
    for (propName in config) {
      if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    props.children = childArray;
  }

  return ReactElement(element.type, key, ref, self, source, owner, props);
};

/**
 * @param {?object} object
 * @return {boolean} True if `object` is a valid component.
 * @final
 */
ReactElement.isValidElement = function (object) {
  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
};

module.exports = ReactElement;
}).call(this,require('_process'))

},{"./Object.assign":29,"./ReactCurrentOwner":41,"_process":6}],60:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactElementValidator
 */

/**
 * ReactElementValidator provides a wrapper around a element factory
 * which validates the props passed to the element. This is intended to be
 * used only in DEV and could be replaced by a static type checker for languages
 * that support it.
 */

'use strict';

var ReactElement = require('./ReactElement');
var ReactPropTypeLocations = require('./ReactPropTypeLocations');
var ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');
var ReactCurrentOwner = require('./ReactCurrentOwner');

var getIteratorFn = require('./getIteratorFn');
var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

function getDeclarationErrorAddendum() {
  if (ReactCurrentOwner.current) {
    var name = ReactCurrentOwner.current.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */
var ownerHasKeyUseWarning = {};

var loggedTypeFailures = {};

/**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */
function validateExplicitKey(element, parentType) {
  if (!element._store || element._store.validated || element.key != null) {
    return;
  }
  element._store.validated = true;

  var addenda = getAddendaForKeyUse('uniqueKey', element, parentType);
  if (addenda === null) {
    // we already showed the warning
    return;
  }
  process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s%s', addenda.parentOrOwner || '', addenda.childOwner || '', addenda.url || '') : undefined;
}

/**
 * Shared warning and monitoring code for the key warnings.
 *
 * @internal
 * @param {string} messageType A key used for de-duping warnings.
 * @param {ReactElement} element Component that requires a key.
 * @param {*} parentType element's parent's type.
 * @returns {?object} A set of addenda to use in the warning message, or null
 * if the warning has already been shown before (and shouldn't be shown again).
 */
function getAddendaForKeyUse(messageType, element, parentType) {
  var addendum = getDeclarationErrorAddendum();
  if (!addendum) {
    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
    if (parentName) {
      addendum = ' Check the top-level render call using <' + parentName + '>.';
    }
  }

  var memoizer = ownerHasKeyUseWarning[messageType] || (ownerHasKeyUseWarning[messageType] = {});
  if (memoizer[addendum]) {
    return null;
  }
  memoizer[addendum] = true;

  var addenda = {
    parentOrOwner: addendum,
    url: ' See https://fb.me/react-warning-keys for more information.',
    childOwner: null
  };

  // Usually the current owner is the offender, but if it accepts children as a
  // property, it may be the creator of the child that's responsible for
  // assigning it a key.
  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
    // Give the component that originally created this child.
    addenda.childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
  }

  return addenda;
}

/**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */
function validateChildKeys(node, parentType) {
  if (typeof node !== 'object') {
    return;
  }
  if (Array.isArray(node)) {
    for (var i = 0; i < node.length; i++) {
      var child = node[i];
      if (ReactElement.isValidElement(child)) {
        validateExplicitKey(child, parentType);
      }
    }
  } else if (ReactElement.isValidElement(node)) {
    // This element was passed in a valid location.
    if (node._store) {
      node._store.validated = true;
    }
  } else if (node) {
    var iteratorFn = getIteratorFn(node);
    // Entry iterators provide implicit keys.
    if (iteratorFn) {
      if (iteratorFn !== node.entries) {
        var iterator = iteratorFn.call(node);
        var step;
        while (!(step = iterator.next()).done) {
          if (ReactElement.isValidElement(step.value)) {
            validateExplicitKey(step.value, parentType);
          }
        }
      }
    }
  }
}

/**
 * Assert that the props are valid
 *
 * @param {string} componentName Name of the component for error messages.
 * @param {object} propTypes Map of prop name to a ReactPropType
 * @param {object} props
 * @param {string} location e.g. "prop", "context", "child context"
 * @private
 */
function checkPropTypes(componentName, propTypes, props, location) {
  for (var propName in propTypes) {
    if (propTypes.hasOwnProperty(propName)) {
      var error;
      // Prop type validation may throw. In case they do, we don't want to
      // fail the render phase where it didn't fail before. So we log it.
      // After these have been cleaned up, we'll let them throw.
      try {
        // This is intentionally an invariant that gets caught. It's the same
        // behavior as without this statement except with a better message.
        !(typeof propTypes[propName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : undefined;
        error = propTypes[propName](props, propName, componentName, location);
      } catch (ex) {
        error = ex;
      }
      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], propName, typeof error) : undefined;
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;

        var addendum = getDeclarationErrorAddendum();
        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed propType: %s%s', error.message, addendum) : undefined;
      }
    }
  }
}

/**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */
function validatePropTypes(element) {
  var componentClass = element.type;
  if (typeof componentClass !== 'function') {
    return;
  }
  var name = componentClass.displayName || componentClass.name;
  if (componentClass.propTypes) {
    checkPropTypes(name, componentClass.propTypes, element.props, ReactPropTypeLocations.prop);
  }
  if (typeof componentClass.getDefaultProps === 'function') {
    process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : undefined;
  }
}

var ReactElementValidator = {

  createElement: function (type, props, children) {
    var validType = typeof type === 'string' || typeof type === 'function';
    // We warn in this case but don't throw. We expect the element creation to
    // succeed and there will likely be errors in render.
    process.env.NODE_ENV !== 'production' ? warning(validType, 'React.createElement: type should not be null, undefined, boolean, or ' + 'number. It should be a string (for DOM elements) or a ReactClass ' + '(for composite components).%s', getDeclarationErrorAddendum()) : undefined;

    var element = ReactElement.createElement.apply(this, arguments);

    // The result can be nullish if a mock or a custom function is used.
    // TODO: Drop this when these are no longer allowed as the type argument.
    if (element == null) {
      return element;
    }

    // Skip key warning if the type isn't valid since our key validation logic
    // doesn't expect a non-string/function type and can throw confusing errors.
    // We don't want exception behavior to differ between dev and prod.
    // (Rendering will throw with a helpful message and as soon as the type is
    // fixed, the key warnings will appear.)
    if (validType) {
      for (var i = 2; i < arguments.length; i++) {
        validateChildKeys(arguments[i], type);
      }
    }

    validatePropTypes(element);

    return element;
  },

  createFactory: function (type) {
    var validatedFactory = ReactElementValidator.createElement.bind(null, type);
    // Legacy hook TODO: Warn if this is accessed
    validatedFactory.type = type;

    if (process.env.NODE_ENV !== 'production') {
      try {
        Object.defineProperty(validatedFactory, 'type', {
          enumerable: false,
          get: function () {
            process.env.NODE_ENV !== 'production' ? warning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.') : undefined;
            Object.defineProperty(this, 'type', {
              value: type
            });
            return type;
          }
        });
      } catch (x) {
        // IE will fail on defineProperty (es5-shim/sham too)
      }
    }

    return validatedFactory;
  },

  cloneElement: function (element, props, children) {
    var newElement = ReactElement.cloneElement.apply(this, arguments);
    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], newElement.type);
    }
    validatePropTypes(newElement);
    return newElement;
  }

};

module.exports = ReactElementValidator;
}).call(this,require('_process'))

},{"./ReactCurrentOwner":41,"./ReactElement":59,"./ReactPropTypeLocationNames":79,"./ReactPropTypeLocations":80,"./getIteratorFn":121,"_process":6,"fbjs/lib/invariant":150,"fbjs/lib/warning":161}],61:[function(require,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEmptyComponent
 */

'use strict';

var ReactElement = require('./ReactElement');
var ReactEmptyComponentRegistry = require('./ReactEmptyComponentRegistry');
var ReactReconciler = require('./ReactReconciler');

var assign = require('./Object.assign');

var placeholderElement;

var ReactEmptyComponentInjection = {
  injectEmptyComponent: function (component) {
    placeholderElement = ReactElement.createElement(component);
  }
};

var ReactEmptyComponent = function (instantiate) {
  this._currentElement = null;
  this._rootNodeID = null;
  this._renderedComponent = instantiate(placeholderElement);
};
assign(ReactEmptyComponent.prototype, {
  construct: function (element) {},
  mountComponent: function (rootID, transaction, context) {
    ReactEmptyComponentRegistry.registerNullComponentID(rootID);
    this._rootNodeID = rootID;
    return ReactReconciler.mountComponent(this._renderedComponent, rootID, transaction, context);
  },
  receiveComponent: function () {},
  unmountComponent: function (rootID, transaction, context) {
    ReactReconciler.unmountComponent(this._renderedComponent);
    ReactEmptyComponentRegistry.deregisterNullComponentID(this._rootNodeID);
    this._rootNodeID = null;
    this._renderedComponent = null;
  }
});

ReactEmptyComponent.injection = ReactEmptyComponentInjection;

module.exports = ReactEmptyComponent;
},{"./Object.assign":29,"./ReactElement":59,"./ReactEmptyComponentRegistry":62,"./ReactReconciler":83}],62:[function(require,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEmptyComponentRegistry
 */

'use strict';

// This registry keeps track of the React IDs of the components that rendered to
// `null` (in reality a placeholder such as `noscript`)
var nullComponentIDsRegistry = {};

/**
 * @param {string} id Component's `_rootNodeID`.
 * @return {boolean} True if the component is rendered to null.
 */
function isNullComponentID(id) {
  return !!nullComponentIDsRegistry[id];
}

/**
 * Mark the component as having rendered to null.
 * @param {string} id Component's `_rootNodeID`.
 */
function registerNullComponentID(id) {
  nullComponentIDsRegistry[id] = true;
}

/**
 * Unmark the component as having rendered to null: it renders to something now.
 * @param {string} id Component's `_rootNodeID`.
 */
function deregisterNullComponentID(id) {
  delete nullComponentIDsRegistry[id];
}

var ReactEmptyComponentRegistry = {
  isNullComponentID: isNullComponentID,
  registerNullComponentID: registerNullComponentID,
  deregisterNullComponentID: deregisterNullComponentID
};

module.exports = ReactEmptyComponentRegistry;
},{}],63:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactErrorUtils
 * @typechecks
 */

'use strict';

var caughtError = null;

/**
 * Call a function while guarding against errors that happens within it.
 *
 * @param {?String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} a First argument
 * @param {*} b Second argument
 */
function invokeGuardedCallback(name, func, a, b) {
  try {
    return func(a, b);
  } catch (x) {
    if (caughtError === null) {
      caughtError = x;
    }
    return undefined;
  }
}

var ReactErrorUtils = {
  invokeGuardedCallback: invokeGuardedCallback,

  /**
   * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event
   * handler are sure to be rethrown by rethrowCaughtError.
   */
  invokeGuardedCallbackWithCatch: invokeGuardedCallback,

  /**
   * During execution of guarded functions we will capture the first error which
   * we will rethrow to be handled by the top level error handler.
   */
  rethrowCaughtError: function () {
    if (caughtError) {
      var error = caughtError;
      caughtError = null;
      throw error;
    }
  }
};

if (process.env.NODE_ENV !== 'production') {
  /**
   * To help development we can get better devtools integration by simulating a
   * real browser event.
   */
  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof Event === 'function') {
    var fakeNode = document.createElement('react');
    ReactErrorUtils.invokeGuardedCallback = function (name, func, a, b) {
      var boundFunc = func.bind(null, a, b);
      fakeNode.addEventListener(name, boundFunc, false);
      fakeNode.dispatchEvent(new Event(name));
      fakeNode.removeEventListener(name, boundFunc, false);
    };
  }
}

module.exports = ReactErrorUtils;
}).call(this,require('_process'))

},{"_process":6}],64:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEventEmitterMixin
 */

'use strict';

var EventPluginHub = require('./EventPluginHub');

function runEventQueueInBatch(events) {
  EventPluginHub.enqueueEvents(events);
  EventPluginHub.processEventQueue(false);
}

var ReactEventEmitterMixin = {

  /**
   * Streams a fired top-level event to `EventPluginHub` where plugins have the
   * opportunity to create `ReactEvent`s to be dispatched.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {object} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native environment event.
   */
  handleTopLevel: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
    var events = EventPluginHub.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget);
    runEventQueueInBatch(events);
  }
};

module.exports = ReactEventEmitterMixin;
},{"./EventPluginHub":22}],65:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEventListener
 * @typechecks static-only
 */

'use strict';

var EventListener = require('fbjs/lib/EventListener');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var PooledClass = require('./PooledClass');
var ReactInstanceHandles = require('./ReactInstanceHandles');
var ReactMount = require('./ReactMount');
var ReactUpdates = require('./ReactUpdates');

var assign = require('./Object.assign');
var getEventTarget = require('./getEventTarget');
var getUnboundedScrollPosition = require('fbjs/lib/getUnboundedScrollPosition');

var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

/**
 * Finds the parent React component of `node`.
 *
 * @param {*} node
 * @return {?DOMEventTarget} Parent container, or `null` if the specified node
 *                           is not nested.
 */
function findParent(node) {
  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
  // traversal, but caching is difficult to do correctly without using a
  // mutation observer to listen for all DOM changes.
  var nodeID = ReactMount.getID(node);
  var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
  var container = ReactMount.findReactContainerForID(rootID);
  var parent = ReactMount.getFirstReactDOM(container);
  return parent;
}

// Used to store ancestor hierarchy in top level callback
function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
  this.topLevelType = topLevelType;
  this.nativeEvent = nativeEvent;
  this.ancestors = [];
}
assign(TopLevelCallbackBookKeeping.prototype, {
  destructor: function () {
    this.topLevelType = null;
    this.nativeEvent = null;
    this.ancestors.length = 0;
  }
});
PooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);

function handleTopLevelImpl(bookKeeping) {
  // TODO: Re-enable event.path handling
  //
  // if (bookKeeping.nativeEvent.path && bookKeeping.nativeEvent.path.length > 1) {
  //   // New browsers have a path attribute on native events
  //   handleTopLevelWithPath(bookKeeping);
  // } else {
  //   // Legacy browsers don't have a path attribute on native events
  //   handleTopLevelWithoutPath(bookKeeping);
  // }

  void handleTopLevelWithPath; // temporarily unused
  handleTopLevelWithoutPath(bookKeeping);
}

// Legacy browsers don't have a path attribute on native events
function handleTopLevelWithoutPath(bookKeeping) {
  var topLevelTarget = ReactMount.getFirstReactDOM(getEventTarget(bookKeeping.nativeEvent)) || window;

  // Loop through the hierarchy, in case there's any nested components.
  // It's important that we build the array of ancestors before calling any
  // event handlers, because event handlers can modify the DOM, leading to
  // inconsistencies with ReactMount's node cache. See #1105.
  var ancestor = topLevelTarget;
  while (ancestor) {
    bookKeeping.ancestors.push(ancestor);
    ancestor = findParent(ancestor);
  }

  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
    topLevelTarget = bookKeeping.ancestors[i];
    var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';
    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, topLevelTarget, topLevelTargetID, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
  }
}

// New browsers have a path attribute on native events
function handleTopLevelWithPath(bookKeeping) {
  var path = bookKeeping.nativeEvent.path;
  var currentNativeTarget = path[0];
  var eventsFired = 0;
  for (var i = 0; i < path.length; i++) {
    var currentPathElement = path[i];
    if (currentPathElement.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE) {
      currentNativeTarget = path[i + 1];
    }
    // TODO: slow
    var reactParent = ReactMount.getFirstReactDOM(currentPathElement);
    if (reactParent === currentPathElement) {
      var currentPathElementID = ReactMount.getID(currentPathElement);
      var newRootID = ReactInstanceHandles.getReactRootIDFromNodeID(currentPathElementID);
      bookKeeping.ancestors.push(currentPathElement);

      var topLevelTargetID = ReactMount.getID(currentPathElement) || '';
      eventsFired++;
      ReactEventListener._handleTopLevel(bookKeeping.topLevelType, currentPathElement, topLevelTargetID, bookKeeping.nativeEvent, currentNativeTarget);

      // Jump to the root of this React render tree
      while (currentPathElementID !== newRootID) {
        i++;
        currentPathElement = path[i];
        currentPathElementID = ReactMount.getID(currentPathElement);
      }
    }
  }
  if (eventsFired === 0) {
    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, window, '', bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
  }
}

function scrollValueMonitor(cb) {
  var scrollPosition = getUnboundedScrollPosition(window);
  cb(scrollPosition);
}

var ReactEventListener = {
  _enabled: true,
  _handleTopLevel: null,

  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

  setHandleTopLevel: function (handleTopLevel) {
    ReactEventListener._handleTopLevel = handleTopLevel;
  },

  setEnabled: function (enabled) {
    ReactEventListener._enabled = !!enabled;
  },

  isEnabled: function () {
    return ReactEventListener._enabled;
  },

  /**
   * Traps top-level events by using event bubbling.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} handle Element on which to attach listener.
   * @return {?object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
    var element = handle;
    if (!element) {
      return null;
    }
    return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
  },

  /**
   * Traps a top-level event by using event capturing.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} handle Element on which to attach listener.
   * @return {?object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
    var element = handle;
    if (!element) {
      return null;
    }
    return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
  },

  monitorScrollValue: function (refresh) {
    var callback = scrollValueMonitor.bind(null, refresh);
    EventListener.listen(window, 'scroll', callback);
  },

  dispatchEvent: function (topLevelType, nativeEvent) {
    if (!ReactEventListener._enabled) {
      return;
    }

    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);
    try {
      // Event queue being processed in the same cycle allows
      // `preventDefault`.
      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
    } finally {
      TopLevelCallbackBookKeeping.release(bookKeeping);
    }
  }
};

module.exports = ReactEventListener;
},{"./Object.assign":29,"./PooledClass":30,"./ReactInstanceHandles":68,"./ReactMount":72,"./ReactUpdates":90,"./getEventTarget":120,"fbjs/lib/EventListener":135,"fbjs/lib/ExecutionEnvironment":136,"fbjs/lib/getUnboundedScrollPosition":147}],66:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInjection
 */

'use strict';

var DOMProperty = require('./DOMProperty');
var EventPluginHub = require('./EventPluginHub');
var ReactComponentEnvironment = require('./ReactComponentEnvironment');
var ReactClass = require('./ReactClass');
var ReactEmptyComponent = require('./ReactEmptyComponent');
var ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');
var ReactNativeComponent = require('./ReactNativeComponent');
var ReactPerf = require('./ReactPerf');
var ReactRootIndex = require('./ReactRootIndex');
var ReactUpdates = require('./ReactUpdates');

var ReactInjection = {
  Component: ReactComponentEnvironment.injection,
  Class: ReactClass.injection,
  DOMProperty: DOMProperty.injection,
  EmptyComponent: ReactEmptyComponent.injection,
  EventPluginHub: EventPluginHub.injection,
  EventEmitter: ReactBrowserEventEmitter.injection,
  NativeComponent: ReactNativeComponent.injection,
  Perf: ReactPerf.injection,
  RootIndex: ReactRootIndex.injection,
  Updates: ReactUpdates.injection
};

module.exports = ReactInjection;
},{"./DOMProperty":16,"./EventPluginHub":22,"./ReactBrowserEventEmitter":33,"./ReactClass":36,"./ReactComponentEnvironment":39,"./ReactEmptyComponent":61,"./ReactNativeComponent":75,"./ReactPerf":78,"./ReactRootIndex":85,"./ReactUpdates":90}],67:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInputSelection
 */

'use strict';

var ReactDOMSelection = require('./ReactDOMSelection');

var containsNode = require('fbjs/lib/containsNode');
var focusNode = require('fbjs/lib/focusNode');
var getActiveElement = require('fbjs/lib/getActiveElement');

function isInDocument(node) {
  return containsNode(document.documentElement, node);
}

/**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */
var ReactInputSelection = {

  hasSelectionCapabilities: function (elem) {
    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
  },

  getSelectionInformation: function () {
    var focusedElem = getActiveElement();
    return {
      focusedElem: focusedElem,
      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
    };
  },

  /**
   * @restoreSelection: If any selection information was potentially lost,
   * restore it. This is useful when performing operations that could remove dom
   * nodes and place them back in, resulting in focus being lost.
   */
  restoreSelection: function (priorSelectionInformation) {
    var curFocusedElem = getActiveElement();
    var priorFocusedElem = priorSelectionInformation.focusedElem;
    var priorSelectionRange = priorSelectionInformation.selectionRange;
    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
      }
      focusNode(priorFocusedElem);
    }
  },

  /**
   * @getSelection: Gets the selection bounds of a focused textarea, input or
   * contentEditable node.
   * -@input: Look up selection bounds of this input
   * -@return {start: selectionStart, end: selectionEnd}
   */
  getSelection: function (input) {
    var selection;

    if ('selectionStart' in input) {
      // Modern browser with input or textarea.
      selection = {
        start: input.selectionStart,
        end: input.selectionEnd
      };
    } else if (document.selection && (input.nodeName && input.nodeName.toLowerCase() === 'input')) {
      // IE8 input.
      var range = document.selection.createRange();
      // There can only be one selection per document in IE, so it must
      // be in our element.
      if (range.parentElement() === input) {
        selection = {
          start: -range.moveStart('character', -input.value.length),
          end: -range.moveEnd('character', -input.value.length)
        };
      }
    } else {
      // Content editable or old IE textarea.
      selection = ReactDOMSelection.getOffsets(input);
    }

    return selection || { start: 0, end: 0 };
  },

  /**
   * @setSelection: Sets the selection bounds of a textarea or input and focuses
   * the input.
   * -@input     Set selection bounds of this input or textarea
   * -@offsets   Object of same form that is returned from get*
   */
  setSelection: function (input, offsets) {
    var start = offsets.start;
    var end = offsets.end;
    if (typeof end === 'undefined') {
      end = start;
    }

    if ('selectionStart' in input) {
      input.selectionStart = start;
      input.selectionEnd = Math.min(end, input.value.length);
    } else if (document.selection && (input.nodeName && input.nodeName.toLowerCase() === 'input')) {
      var range = input.createTextRange();
      range.collapse(true);
      range.moveStart('character', start);
      range.moveEnd('character', end - start);
      range.select();
    } else {
      ReactDOMSelection.setOffsets(input, offsets);
    }
  }
};

module.exports = ReactInputSelection;
},{"./ReactDOMSelection":51,"fbjs/lib/containsNode":139,"fbjs/lib/focusNode":144,"fbjs/lib/getActiveElement":145}],68:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInstanceHandles
 * @typechecks static-only
 */

'use strict';

var ReactRootIndex = require('./ReactRootIndex');

var invariant = require('fbjs/lib/invariant');

var SEPARATOR = '.';
var SEPARATOR_LENGTH = SEPARATOR.length;

/**
 * Maximum depth of traversals before we consider the possibility of a bad ID.
 */
var MAX_TREE_DEPTH = 10000;

/**
 * Creates a DOM ID prefix to use when mounting React components.
 *
 * @param {number} index A unique integer
 * @return {string} React root ID.
 * @internal
 */
function getReactRootIDString(index) {
  return SEPARATOR + index.toString(36);
}

/**
 * Checks if a character in the supplied ID is a separator or the end.
 *
 * @param {string} id A React DOM ID.
 * @param {number} index Index of the character to check.
 * @return {boolean} True if the character is a separator or end of the ID.
 * @private
 */
function isBoundary(id, index) {
  return id.charAt(index) === SEPARATOR || index === id.length;
}

/**
 * Checks if the supplied string is a valid React DOM ID.
 *
 * @param {string} id A React DOM ID, maybe.
 * @return {boolean} True if the string is a valid React DOM ID.
 * @private
 */
function isValidID(id) {
  return id === '' || id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR;
}

/**
 * Checks if the first ID is an ancestor of or equal to the second ID.
 *
 * @param {string} ancestorID
 * @param {string} descendantID
 * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.
 * @internal
 */
function isAncestorIDOf(ancestorID, descendantID) {
  return descendantID.indexOf(ancestorID) === 0 && isBoundary(descendantID, ancestorID.length);
}

/**
 * Gets the parent ID of the supplied React DOM ID, `id`.
 *
 * @param {string} id ID of a component.
 * @return {string} ID of the parent, or an empty string.
 * @private
 */
function getParentID(id) {
  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';
}

/**
 * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the
 * supplied `destinationID`. If they are equal, the ID is returned.
 *
 * @param {string} ancestorID ID of an ancestor node of `destinationID`.
 * @param {string} destinationID ID of the destination node.
 * @return {string} Next ID on the path from `ancestorID` to `destinationID`.
 * @private
 */
function getNextDescendantID(ancestorID, destinationID) {
  !(isValidID(ancestorID) && isValidID(destinationID)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNextDescendantID(%s, %s): Received an invalid React DOM ID.', ancestorID, destinationID) : invariant(false) : undefined;
  !isAncestorIDOf(ancestorID, destinationID) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNextDescendantID(...): React has made an invalid assumption about ' + 'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.', ancestorID, destinationID) : invariant(false) : undefined;
  if (ancestorID === destinationID) {
    return ancestorID;
  }
  // Skip over the ancestor and the immediate separator. Traverse until we hit
  // another separator or we reach the end of `destinationID`.
  var start = ancestorID.length + SEPARATOR_LENGTH;
  var i;
  for (i = start; i < destinationID.length; i++) {
    if (isBoundary(destinationID, i)) {
      break;
    }
  }
  return destinationID.substr(0, i);
}

/**
 * Gets the nearest common ancestor ID of two IDs.
 *
 * Using this ID scheme, the nearest common ancestor ID is the longest common
 * prefix of the two IDs that immediately preceded a "marker" in both strings.
 *
 * @param {string} oneID
 * @param {string} twoID
 * @return {string} Nearest common ancestor ID, or the empty string if none.
 * @private
 */
function getFirstCommonAncestorID(oneID, twoID) {
  var minLength = Math.min(oneID.length, twoID.length);
  if (minLength === 0) {
    return '';
  }
  var lastCommonMarkerIndex = 0;
  // Use `<=` to traverse until the "EOL" of the shorter string.
  for (var i = 0; i <= minLength; i++) {
    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {
      lastCommonMarkerIndex = i;
    } else if (oneID.charAt(i) !== twoID.charAt(i)) {
      break;
    }
  }
  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);
  !isValidID(longestCommonID) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s', oneID, twoID, longestCommonID) : invariant(false) : undefined;
  return longestCommonID;
}

/**
 * Traverses the parent path between two IDs (either up or down). The IDs must
 * not be the same, and there must exist a parent path between them. If the
 * callback returns `false`, traversal is stopped.
 *
 * @param {?string} start ID at which to start traversal.
 * @param {?string} stop ID at which to end traversal.
 * @param {function} cb Callback to invoke each ID with.
 * @param {*} arg Argument to invoke the callback with.
 * @param {?boolean} skipFirst Whether or not to skip the first node.
 * @param {?boolean} skipLast Whether or not to skip the last node.
 * @private
 */
function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {
  start = start || '';
  stop = stop || '';
  !(start !== stop) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.', start) : invariant(false) : undefined;
  var traverseUp = isAncestorIDOf(stop, start);
  !(traverseUp || isAncestorIDOf(start, stop)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' + 'not have a parent path.', start, stop) : invariant(false) : undefined;
  // Traverse from `start` to `stop` one depth at a time.
  var depth = 0;
  var traverse = traverseUp ? getParentID : getNextDescendantID;
  for (var id = start;; /* until break */id = traverse(id, stop)) {
    var ret;
    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {
      ret = cb(id, traverseUp, arg);
    }
    if (ret === false || id === stop) {
      // Only break //after// visiting `stop`.
      break;
    }
    !(depth++ < MAX_TREE_DEPTH) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' + 'traversing the React DOM ID tree. This may be due to malformed IDs: %s', start, stop, id) : invariant(false) : undefined;
  }
}

/**
 * Manages the IDs assigned to DOM representations of React components. This
 * uses a specific scheme in order to traverse the DOM efficiently (e.g. in
 * order to simulate events).
 *
 * @internal
 */
var ReactInstanceHandles = {

  /**
   * Constructs a React root ID
   * @return {string} A React root ID.
   */
  createReactRootID: function () {
    return getReactRootIDString(ReactRootIndex.createReactRootIndex());
  },

  /**
   * Constructs a React ID by joining a root ID with a name.
   *
   * @param {string} rootID Root ID of a parent component.
   * @param {string} name A component's name (as flattened children).
   * @return {string} A React ID.
   * @internal
   */
  createReactID: function (rootID, name) {
    return rootID + name;
  },

  /**
   * Gets the DOM ID of the React component that is the root of the tree that
   * contains the React component with the supplied DOM ID.
   *
   * @param {string} id DOM ID of a React component.
   * @return {?string} DOM ID of the React component that is the root.
   * @internal
   */
  getReactRootIDFromNodeID: function (id) {
    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {
      var index = id.indexOf(SEPARATOR, 1);
      return index > -1 ? id.substr(0, index) : id;
    }
    return null;
  },

  /**
   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
   * should would receive a `mouseEnter` or `mouseLeave` event.
   *
   * NOTE: Does not invoke the callback on the nearest common ancestor because
   * nothing "entered" or "left" that element.
   *
   * @param {string} leaveID ID being left.
   * @param {string} enterID ID being entered.
   * @param {function} cb Callback to invoke on each entered/left ID.
   * @param {*} upArg Argument to invoke the callback with on left IDs.
   * @param {*} downArg Argument to invoke the callback with on entered IDs.
   * @internal
   */
  traverseEnterLeave: function (leaveID, enterID, cb, upArg, downArg) {
    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);
    if (ancestorID !== leaveID) {
      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);
    }
    if (ancestorID !== enterID) {
      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);
    }
  },

  /**
   * Simulates the traversal of a two-phase, capture/bubble event dispatch.
   *
   * NOTE: This traversal happens on IDs without touching the DOM.
   *
   * @param {string} targetID ID of the target node.
   * @param {function} cb Callback to invoke.
   * @param {*} arg Argument to invoke the callback with.
   * @internal
   */
  traverseTwoPhase: function (targetID, cb, arg) {
    if (targetID) {
      traverseParentPath('', targetID, cb, arg, true, false);
      traverseParentPath(targetID, '', cb, arg, false, true);
    }
  },

  /**
   * Same as `traverseTwoPhase` but skips the `targetID`.
   */
  traverseTwoPhaseSkipTarget: function (targetID, cb, arg) {
    if (targetID) {
      traverseParentPath('', targetID, cb, arg, true, true);
      traverseParentPath(targetID, '', cb, arg, true, true);
    }
  },

  /**
   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For
   * example, passing `.0.$row-0.1` would result in `cb` getting called
   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.
   *
   * NOTE: This traversal happens on IDs without touching the DOM.
   *
   * @param {string} targetID ID of the target node.
   * @param {function} cb Callback to invoke.
   * @param {*} arg Argument to invoke the callback with.
   * @internal
   */
  traverseAncestors: function (targetID, cb, arg) {
    traverseParentPath('', targetID, cb, arg, true, false);
  },

  getFirstCommonAncestorID: getFirstCommonAncestorID,

  /**
   * Exposed for unit testing.
   * @private
   */
  _getNextDescendantID: getNextDescendantID,

  isAncestorIDOf: isAncestorIDOf,

  SEPARATOR: SEPARATOR

};

module.exports = ReactInstanceHandles;
}).call(this,require('_process'))

},{"./ReactRootIndex":85,"_process":6,"fbjs/lib/invariant":150}],69:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInstanceMap
 */

'use strict';

/**
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 */

// TODO: Replace this with ES6: var ReactInstanceMap = new Map();
var ReactInstanceMap = {

  /**
   * This API should be called `delete` but we'd have to make sure to always
   * transform these to strings for IE support. When this transform is fully
   * supported we can rename it.
   */
  remove: function (key) {
    key._reactInternalInstance = undefined;
  },

  get: function (key) {
    return key._reactInternalInstance;
  },

  has: function (key) {
    return key._reactInternalInstance !== undefined;
  },

  set: function (key, value) {
    key._reactInternalInstance = value;
  }

};

module.exports = ReactInstanceMap;
},{}],70:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactIsomorphic
 */

'use strict';

var ReactChildren = require('./ReactChildren');
var ReactComponent = require('./ReactComponent');
var ReactClass = require('./ReactClass');
var ReactDOMFactories = require('./ReactDOMFactories');
var ReactElement = require('./ReactElement');
var ReactElementValidator = require('./ReactElementValidator');
var ReactPropTypes = require('./ReactPropTypes');
var ReactVersion = require('./ReactVersion');

var assign = require('./Object.assign');
var onlyChild = require('./onlyChild');

var createElement = ReactElement.createElement;
var createFactory = ReactElement.createFactory;
var cloneElement = ReactElement.cloneElement;

if (process.env.NODE_ENV !== 'production') {
  createElement = ReactElementValidator.createElement;
  createFactory = ReactElementValidator.createFactory;
  cloneElement = ReactElementValidator.cloneElement;
}

var React = {

  // Modern

  Children: {
    map: ReactChildren.map,
    forEach: ReactChildren.forEach,
    count: ReactChildren.count,
    toArray: ReactChildren.toArray,
    only: onlyChild
  },

  Component: ReactComponent,

  createElement: createElement,
  cloneElement: cloneElement,
  isValidElement: ReactElement.isValidElement,

  // Classic

  PropTypes: ReactPropTypes,
  createClass: ReactClass.createClass,
  createFactory: createFactory,
  createMixin: function (mixin) {
    // Currently a noop. Will be used to validate and trace mixins.
    return mixin;
  },

  // This looks DOM specific but these are actually isomorphic helpers
  // since they are just generating DOM strings.
  DOM: ReactDOMFactories,

  version: ReactVersion,

  // Hook for JSX spread, don't use this for anything else.
  __spread: assign
};

module.exports = React;
}).call(this,require('_process'))

},{"./Object.assign":29,"./ReactChildren":35,"./ReactClass":36,"./ReactComponent":37,"./ReactDOMFactories":45,"./ReactElement":59,"./ReactElementValidator":60,"./ReactPropTypes":81,"./ReactVersion":91,"./onlyChild":127,"_process":6}],71:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMarkupChecksum
 */

'use strict';

var adler32 = require('./adler32');

var TAG_END = /\/?>/;

var ReactMarkupChecksum = {
  CHECKSUM_ATTR_NAME: 'data-react-checksum',

  /**
   * @param {string} markup Markup string
   * @return {string} Markup string with checksum attribute attached
   */
  addChecksumToMarkup: function (markup) {
    var checksum = adler32(markup);

    // Add checksum (handle both parent tags and self-closing tags)
    return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&');
  },

  /**
   * @param {string} markup to use
   * @param {DOMElement} element root React element
   * @returns {boolean} whether or not the markup is the same
   */
  canReuseMarkup: function (markup, element) {
    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
    var markupChecksum = adler32(markup);
    return markupChecksum === existingChecksum;
  }
};

module.exports = ReactMarkupChecksum;
},{"./adler32":110}],72:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMount
 */

'use strict';

var DOMProperty = require('./DOMProperty');
var ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');
var ReactCurrentOwner = require('./ReactCurrentOwner');
var ReactDOMFeatureFlags = require('./ReactDOMFeatureFlags');
var ReactElement = require('./ReactElement');
var ReactEmptyComponentRegistry = require('./ReactEmptyComponentRegistry');
var ReactInstanceHandles = require('./ReactInstanceHandles');
var ReactInstanceMap = require('./ReactInstanceMap');
var ReactMarkupChecksum = require('./ReactMarkupChecksum');
var ReactPerf = require('./ReactPerf');
var ReactReconciler = require('./ReactReconciler');
var ReactUpdateQueue = require('./ReactUpdateQueue');
var ReactUpdates = require('./ReactUpdates');

var assign = require('./Object.assign');
var emptyObject = require('fbjs/lib/emptyObject');
var containsNode = require('fbjs/lib/containsNode');
var instantiateReactComponent = require('./instantiateReactComponent');
var invariant = require('fbjs/lib/invariant');
var setInnerHTML = require('./setInnerHTML');
var shouldUpdateReactComponent = require('./shouldUpdateReactComponent');
var validateDOMNesting = require('./validateDOMNesting');
var warning = require('fbjs/lib/warning');

var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
var nodeCache = {};

var ELEMENT_NODE_TYPE = 1;
var DOC_NODE_TYPE = 9;
var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

var ownerDocumentContextKey = '__ReactMount_ownerDocument$' + Math.random().toString(36).slice(2);

/** Mapping from reactRootID to React component instance. */
var instancesByReactRootID = {};

/** Mapping from reactRootID to `container` nodes. */
var containersByReactRootID = {};

if (process.env.NODE_ENV !== 'production') {
  /** __DEV__-only mapping from reactRootID to root elements. */
  var rootElementsByReactRootID = {};
}

// Used to store breadth-first search state in findComponentRoot.
var findComponentRootReusableArray = [];

/**
 * Finds the index of the first character
 * that's not common between the two given strings.
 *
 * @return {number} the index of the character where the strings diverge
 */
function firstDifferenceIndex(string1, string2) {
  var minLen = Math.min(string1.length, string2.length);
  for (var i = 0; i < minLen; i++) {
    if (string1.charAt(i) !== string2.charAt(i)) {
      return i;
    }
  }
  return string1.length === string2.length ? -1 : minLen;
}

/**
 * @param {DOMElement|DOMDocument} container DOM element that may contain
 * a React component
 * @return {?*} DOM element that may have the reactRoot ID, or null.
 */
function getReactRootElementInContainer(container) {
  if (!container) {
    return null;
  }

  if (container.nodeType === DOC_NODE_TYPE) {
    return container.documentElement;
  } else {
    return container.firstChild;
  }
}

/**
 * @param {DOMElement} container DOM element that may contain a React component.
 * @return {?string} A "reactRoot" ID, if a React component is rendered.
 */
function getReactRootID(container) {
  var rootElement = getReactRootElementInContainer(container);
  return rootElement && ReactMount.getID(rootElement);
}

/**
 * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form
 * element can return its control whose name or ID equals ATTR_NAME. All
 * DOM nodes support `getAttributeNode` but this can also get called on
 * other objects so just return '' if we're given something other than a
 * DOM node (such as window).
 *
 * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.
 * @return {string} ID of the supplied `domNode`.
 */
function getID(node) {
  var id = internalGetID(node);
  if (id) {
    if (nodeCache.hasOwnProperty(id)) {
      var cached = nodeCache[id];
      if (cached !== node) {
        !!isValid(cached, id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactMount: Two valid but unequal nodes with the same `%s`: %s', ATTR_NAME, id) : invariant(false) : undefined;

        nodeCache[id] = node;
      }
    } else {
      nodeCache[id] = node;
    }
  }

  return id;
}

function internalGetID(node) {
  // If node is something like a window, document, or text node, none of
  // which support attributes or a .getAttribute method, gracefully return
  // the empty string, as if the attribute were missing.
  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';
}

/**
 * Sets the React-specific ID of the given node.
 *
 * @param {DOMElement} node The DOM node whose ID will be set.
 * @param {string} id The value of the ID attribute.
 */
function setID(node, id) {
  var oldID = internalGetID(node);
  if (oldID !== id) {
    delete nodeCache[oldID];
  }
  node.setAttribute(ATTR_NAME, id);
  nodeCache[id] = node;
}

/**
 * Finds the node with the supplied React-generated DOM ID.
 *
 * @param {string} id A React-generated DOM ID.
 * @return {DOMElement} DOM node with the suppled `id`.
 * @internal
 */
function getNode(id) {
  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
    nodeCache[id] = ReactMount.findReactNodeByID(id);
  }
  return nodeCache[id];
}

/**
 * Finds the node with the supplied public React instance.
 *
 * @param {*} instance A public React instance.
 * @return {?DOMElement} DOM node with the suppled `id`.
 * @internal
 */
function getNodeFromInstance(instance) {
  var id = ReactInstanceMap.get(instance)._rootNodeID;
  if (ReactEmptyComponentRegistry.isNullComponentID(id)) {
    return null;
  }
  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
    nodeCache[id] = ReactMount.findReactNodeByID(id);
  }
  return nodeCache[id];
}

/**
 * A node is "valid" if it is contained by a currently mounted container.
 *
 * This means that the node does not have to be contained by a document in
 * order to be considered valid.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @param {string} id The expected ID of the node.
 * @return {boolean} Whether the node is contained by a mounted container.
 */
function isValid(node, id) {
  if (node) {
    !(internalGetID(node) === id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactMount: Unexpected modification of `%s`', ATTR_NAME) : invariant(false) : undefined;

    var container = ReactMount.findReactContainerForID(id);
    if (container && containsNode(container, node)) {
      return true;
    }
  }

  return false;
}

/**
 * Causes the cache to forget about one React-specific ID.
 *
 * @param {string} id The ID to forget.
 */
function purgeID(id) {
  delete nodeCache[id];
}

var deepestNodeSoFar = null;
function findDeepestCachedAncestorImpl(ancestorID) {
  var ancestor = nodeCache[ancestorID];
  if (ancestor && isValid(ancestor, ancestorID)) {
    deepestNodeSoFar = ancestor;
  } else {
    // This node isn't populated in the cache, so presumably none of its
    // descendants are. Break out of the loop.
    return false;
  }
}

/**
 * Return the deepest cached node whose ID is a prefix of `targetID`.
 */
function findDeepestCachedAncestor(targetID) {
  deepestNodeSoFar = null;
  ReactInstanceHandles.traverseAncestors(targetID, findDeepestCachedAncestorImpl);

  var foundNode = deepestNodeSoFar;
  deepestNodeSoFar = null;
  return foundNode;
}

/**
 * Mounts this component and inserts it into the DOM.
 *
 * @param {ReactComponent} componentInstance The instance to mount.
 * @param {string} rootID DOM ID of the root node.
 * @param {DOMElement} container DOM element to mount into.
 * @param {ReactReconcileTransaction} transaction
 * @param {boolean} shouldReuseMarkup If true, do not insert markup
 */
function mountComponentIntoNode(componentInstance, rootID, container, transaction, shouldReuseMarkup, context) {
  if (ReactDOMFeatureFlags.useCreateElement) {
    context = assign({}, context);
    if (container.nodeType === DOC_NODE_TYPE) {
      context[ownerDocumentContextKey] = container;
    } else {
      context[ownerDocumentContextKey] = container.ownerDocument;
    }
  }
  if (process.env.NODE_ENV !== 'production') {
    if (context === emptyObject) {
      context = {};
    }
    var tag = container.nodeName.toLowerCase();
    context[validateDOMNesting.ancestorInfoContextKey] = validateDOMNesting.updatedAncestorInfo(null, tag, null);
  }
  var markup = ReactReconciler.mountComponent(componentInstance, rootID, transaction, context);
  componentInstance._renderedComponent._topLevelWrapper = componentInstance;
  ReactMount._mountImageIntoNode(markup, container, shouldReuseMarkup, transaction);
}

/**
 * Batched mount.
 *
 * @param {ReactComponent} componentInstance The instance to mount.
 * @param {string} rootID DOM ID of the root node.
 * @param {DOMElement} container DOM element to mount into.
 * @param {boolean} shouldReuseMarkup If true, do not insert markup
 */
function batchedMountComponentIntoNode(componentInstance, rootID, container, shouldReuseMarkup, context) {
  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(
  /* forceHTML */shouldReuseMarkup);
  transaction.perform(mountComponentIntoNode, null, componentInstance, rootID, container, transaction, shouldReuseMarkup, context);
  ReactUpdates.ReactReconcileTransaction.release(transaction);
}

/**
 * Unmounts a component and removes it from the DOM.
 *
 * @param {ReactComponent} instance React component instance.
 * @param {DOMElement} container DOM element to unmount from.
 * @final
 * @internal
 * @see {ReactMount.unmountComponentAtNode}
 */
function unmountComponentFromNode(instance, container) {
  ReactReconciler.unmountComponent(instance);

  if (container.nodeType === DOC_NODE_TYPE) {
    container = container.documentElement;
  }

  // http://jsperf.com/emptying-a-node
  while (container.lastChild) {
    container.removeChild(container.lastChild);
  }
}

/**
 * True if the supplied DOM node has a direct React-rendered child that is
 * not a React root element. Useful for warning in `render`,
 * `unmountComponentAtNode`, etc.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM element contains a direct child that was
 * rendered by React but is not a root element.
 * @internal
 */
function hasNonRootReactChild(node) {
  var reactRootID = getReactRootID(node);
  return reactRootID ? reactRootID !== ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID) : false;
}

/**
 * Returns the first (deepest) ancestor of a node which is rendered by this copy
 * of React.
 */
function findFirstReactDOMImpl(node) {
  // This node might be from another React instance, so we make sure not to
  // examine the node cache here
  for (; node && node.parentNode !== node; node = node.parentNode) {
    if (node.nodeType !== 1) {
      // Not a DOMElement, therefore not a React component
      continue;
    }
    var nodeID = internalGetID(node);
    if (!nodeID) {
      continue;
    }
    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);

    // If containersByReactRootID contains the container we find by crawling up
    // the tree, we know that this instance of React rendered the node.
    // nb. isValid's strategy (with containsNode) does not work because render
    // trees may be nested and we don't want a false positive in that case.
    var current = node;
    var lastID;
    do {
      lastID = internalGetID(current);
      current = current.parentNode;
      if (current == null) {
        // The passed-in node has been detached from the container it was
        // originally rendered into.
        return null;
      }
    } while (lastID !== reactRootID);

    if (current === containersByReactRootID[reactRootID]) {
      return node;
    }
  }
  return null;
}

/**
 * Temporary (?) hack so that we can store all top-level pending updates on
 * composites instead of having to worry about different types of components
 * here.
 */
var TopLevelWrapper = function () {};
TopLevelWrapper.prototype.isReactComponent = {};
if (process.env.NODE_ENV !== 'production') {
  TopLevelWrapper.displayName = 'TopLevelWrapper';
}
TopLevelWrapper.prototype.render = function () {
  // this.props is actually a ReactElement
  return this.props;
};

/**
 * Mounting is the process of initializing a React component by creating its
 * representative DOM elements and inserting them into a supplied `container`.
 * Any prior content inside `container` is destroyed in the process.
 *
 *   ReactMount.render(
 *     component,
 *     document.getElementById('container')
 *   );
 *
 *   <div id="container">                   <-- Supplied `container`.
 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
 *       // ...                                 component.
 *     </div>
 *   </div>
 *
 * Inside of `container`, the first element rendered is the "reactRoot".
 */
var ReactMount = {

  TopLevelWrapper: TopLevelWrapper,

  /** Exposed for debugging purposes **/
  _instancesByReactRootID: instancesByReactRootID,

  /**
   * This is a hook provided to support rendering React components while
   * ensuring that the apparent scroll position of its `container` does not
   * change.
   *
   * @param {DOMElement} container The `container` being rendered into.
   * @param {function} renderCallback This must be called once to do the render.
   */
  scrollMonitor: function (container, renderCallback) {
    renderCallback();
  },

  /**
   * Take a component that's already mounted into the DOM and replace its props
   * @param {ReactComponent} prevComponent component instance already in the DOM
   * @param {ReactElement} nextElement component instance to render
   * @param {DOMElement} container container to render into
   * @param {?function} callback function triggered on completion
   */
  _updateRootComponent: function (prevComponent, nextElement, container, callback) {
    ReactMount.scrollMonitor(container, function () {
      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement);
      if (callback) {
        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
      }
    });

    if (process.env.NODE_ENV !== 'production') {
      // Record the root element in case it later gets transplanted.
      rootElementsByReactRootID[getReactRootID(container)] = getReactRootElementInContainer(container);
    }

    return prevComponent;
  },

  /**
   * Register a component into the instance map and starts scroll value
   * monitoring
   * @param {ReactComponent} nextComponent component instance to render
   * @param {DOMElement} container container to render into
   * @return {string} reactRoot ID prefix
   */
  _registerComponent: function (nextComponent, container) {
    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : invariant(false) : undefined;

    ReactBrowserEventEmitter.ensureScrollValueMonitoring();

    var reactRootID = ReactMount.registerContainer(container);
    instancesByReactRootID[reactRootID] = nextComponent;
    return reactRootID;
  },

  /**
   * Render a new component into the DOM.
   * @param {ReactElement} nextElement element to render
   * @param {DOMElement} container container to render into
   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
   * @return {ReactComponent} nextComponent
   */
  _renderNewRootComponent: function (nextElement, container, shouldReuseMarkup, context) {
    // Various parts of our code (such as ReactCompositeComponent's
    // _renderValidatedComponent) assume that calls to render aren't nested;
    // verify that that's the case.
    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : undefined;

    var componentInstance = instantiateReactComponent(nextElement, null);
    var reactRootID = ReactMount._registerComponent(componentInstance, container);

    // The initial render is synchronous but any updates that happen during
    // rendering, in componentWillMount or componentDidMount, will be batched
    // according to the current batching strategy.

    ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, reactRootID, container, shouldReuseMarkup, context);

    if (process.env.NODE_ENV !== 'production') {
      // Record the root element in case it later gets transplanted.
      rootElementsByReactRootID[reactRootID] = getReactRootElementInContainer(container);
    }

    return componentInstance;
  },

  /**
   * Renders a React component into the DOM in the supplied `container`.
   *
   * If the React component was previously rendered into `container`, this will
   * perform an update on it and only mutate the DOM as necessary to reflect the
   * latest React component.
   *
   * @param {ReactComponent} parentComponent The conceptual parent of this render tree.
   * @param {ReactElement} nextElement Component element to render.
   * @param {DOMElement} container DOM element to render into.
   * @param {?function} callback function triggered on completion
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
    !(parentComponent != null && parentComponent._reactInternalInstance != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'parentComponent must be a valid React Component') : invariant(false) : undefined;
    return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);
  },

  _renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
    !ReactElement.isValidElement(nextElement) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? ' Instead of passing an element string, make sure to instantiate ' + 'it by passing it to React.createElement.' : typeof nextElement === 'function' ? ' Instead of passing a component class, make sure to instantiate ' + 'it by passing it to React.createElement.' :
    // Check if it quacks like an element
    nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : invariant(false) : undefined;

    process.env.NODE_ENV !== 'production' ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : undefined;

    var nextWrappedElement = new ReactElement(TopLevelWrapper, null, null, null, null, null, nextElement);

    var prevComponent = instancesByReactRootID[getReactRootID(container)];

    if (prevComponent) {
      var prevWrappedElement = prevComponent._currentElement;
      var prevElement = prevWrappedElement.props;
      if (shouldUpdateReactComponent(prevElement, nextElement)) {
        return ReactMount._updateRootComponent(prevComponent, nextWrappedElement, container, callback)._renderedComponent.getPublicInstance();
      } else {
        ReactMount.unmountComponentAtNode(container);
      }
    }

    var reactRootElement = getReactRootElementInContainer(container);
    var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);
    var containerHasNonRootReactChild = hasNonRootReactChild(container);

    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : undefined;

      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
        var rootElementSibling = reactRootElement;
        while (rootElementSibling) {
          if (internalGetID(rootElementSibling)) {
            process.env.NODE_ENV !== 'production' ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : undefined;
            break;
          }
          rootElementSibling = rootElementSibling.nextSibling;
        }
      }
    }

    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;
    var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, parentComponent != null ? parentComponent._reactInternalInstance._processChildContext(parentComponent._reactInternalInstance._context) : emptyObject)._renderedComponent.getPublicInstance();
    if (callback) {
      callback.call(component);
    }
    return component;
  },

  /**
   * Renders a React component into the DOM in the supplied `container`.
   *
   * If the React component was previously rendered into `container`, this will
   * perform an update on it and only mutate the DOM as necessary to reflect the
   * latest React component.
   *
   * @param {ReactElement} nextElement Component element to render.
   * @param {DOMElement} container DOM element to render into.
   * @param {?function} callback function triggered on completion
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  render: function (nextElement, container, callback) {
    return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);
  },

  /**
   * Registers a container node into which React components will be rendered.
   * This also creates the "reactRoot" ID that will be assigned to the element
   * rendered within.
   *
   * @param {DOMElement} container DOM element to register as a container.
   * @return {string} The "reactRoot" ID of elements rendered within.
   */
  registerContainer: function (container) {
    var reactRootID = getReactRootID(container);
    if (reactRootID) {
      // If one exists, make sure it is a valid "reactRoot" ID.
      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);
    }
    if (!reactRootID) {
      // No valid "reactRoot" ID found, create one.
      reactRootID = ReactInstanceHandles.createReactRootID();
    }
    containersByReactRootID[reactRootID] = container;
    return reactRootID;
  },

  /**
   * Unmounts and destroys the React component rendered in the `container`.
   *
   * @param {DOMElement} container DOM element containing a React component.
   * @return {boolean} True if a component was found in and unmounted from
   *                   `container`
   */
  unmountComponentAtNode: function (container) {
    // Various parts of our code (such as ReactCompositeComponent's
    // _renderValidatedComponent) assume that calls to render aren't nested;
    // verify that that's the case. (Strictly speaking, unmounting won't cause a
    // render but we still don't expect to be in a render call here.)
    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : undefined;

    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : invariant(false) : undefined;

    var reactRootID = getReactRootID(container);
    var component = instancesByReactRootID[reactRootID];
    if (!component) {
      // Check if the node being unmounted was rendered by React, but isn't a
      // root node.
      var containerHasNonRootReactChild = hasNonRootReactChild(container);

      // Check if the container itself is a React root node.
      var containerID = internalGetID(container);
      var isContainerReactRoot = containerID && containerID === ReactInstanceHandles.getReactRootIDFromNodeID(containerID);

      if (process.env.NODE_ENV !== 'production') {
        process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : undefined;
      }

      return false;
    }
    ReactUpdates.batchedUpdates(unmountComponentFromNode, component, container);
    delete instancesByReactRootID[reactRootID];
    delete containersByReactRootID[reactRootID];
    if (process.env.NODE_ENV !== 'production') {
      delete rootElementsByReactRootID[reactRootID];
    }
    return true;
  },

  /**
   * Finds the container DOM element that contains React component to which the
   * supplied DOM `id` belongs.
   *
   * @param {string} id The ID of an element rendered by a React component.
   * @return {?DOMElement} DOM element that contains the `id`.
   */
  findReactContainerForID: function (id) {
    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);
    var container = containersByReactRootID[reactRootID];

    if (process.env.NODE_ENV !== 'production') {
      var rootElement = rootElementsByReactRootID[reactRootID];
      if (rootElement && rootElement.parentNode !== container) {
        process.env.NODE_ENV !== 'production' ? warning(
        // Call internalGetID here because getID calls isValid which calls
        // findReactContainerForID (this function).
        internalGetID(rootElement) === reactRootID, 'ReactMount: Root element ID differed from reactRootID.') : undefined;
        var containerChild = container.firstChild;
        if (containerChild && reactRootID === internalGetID(containerChild)) {
          // If the container has a new child with the same ID as the old
          // root element, then rootElementsByReactRootID[reactRootID] is
          // just stale and needs to be updated. The case that deserves a
          // warning is when the container is empty.
          rootElementsByReactRootID[reactRootID] = containerChild;
        } else {
          process.env.NODE_ENV !== 'production' ? warning(false, 'ReactMount: Root element has been removed from its original ' + 'container. New container: %s', rootElement.parentNode) : undefined;
        }
      }
    }

    return container;
  },

  /**
   * Finds an element rendered by React with the supplied ID.
   *
   * @param {string} id ID of a DOM node in the React component.
   * @return {DOMElement} Root DOM node of the React component.
   */
  findReactNodeByID: function (id) {
    var reactRoot = ReactMount.findReactContainerForID(id);
    return ReactMount.findComponentRoot(reactRoot, id);
  },

  /**
   * Traverses up the ancestors of the supplied node to find a node that is a
   * DOM representation of a React component rendered by this copy of React.
   *
   * @param {*} node
   * @return {?DOMEventTarget}
   * @internal
   */
  getFirstReactDOM: function (node) {
    return findFirstReactDOMImpl(node);
  },

  /**
   * Finds a node with the supplied `targetID` inside of the supplied
   * `ancestorNode`.  Exploits the ID naming scheme to perform the search
   * quickly.
   *
   * @param {DOMEventTarget} ancestorNode Search from this root.
   * @pararm {string} targetID ID of the DOM representation of the component.
   * @return {DOMEventTarget} DOM node with the supplied `targetID`.
   * @internal
   */
  findComponentRoot: function (ancestorNode, targetID) {
    var firstChildren = findComponentRootReusableArray;
    var childIndex = 0;

    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;

    if (process.env.NODE_ENV !== 'production') {
      // This will throw on the next line; give an early warning
      process.env.NODE_ENV !== 'production' ? warning(deepestAncestor != null, 'React can\'t find the root component node for data-reactid value ' + '`%s`. If you\'re seeing this message, it probably means that ' + 'you\'ve loaded two copies of React on the page. At this time, only ' + 'a single copy of React can be loaded at a time.', targetID) : undefined;
    }

    firstChildren[0] = deepestAncestor.firstChild;
    firstChildren.length = 1;

    while (childIndex < firstChildren.length) {
      var child = firstChildren[childIndex++];
      var targetChild;

      while (child) {
        var childID = ReactMount.getID(child);
        if (childID) {
          // Even if we find the node we're looking for, we finish looping
          // through its siblings to ensure they're cached so that we don't have
          // to revisit this node again. Otherwise, we make n^2 calls to getID
          // when visiting the many children of a single node in order.

          if (targetID === childID) {
            targetChild = child;
          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {
            // If we find a child whose ID is an ancestor of the given ID,
            // then we can be sure that we only want to search the subtree
            // rooted at this child, so we can throw out the rest of the
            // search state.
            firstChildren.length = childIndex = 0;
            firstChildren.push(child.firstChild);
          }
        } else {
          // If this child had no ID, then there's a chance that it was
          // injected automatically by the browser, as when a `<table>`
          // element sprouts an extra `<tbody>` child as a side effect of
          // `.innerHTML` parsing. Optimistically continue down this
          // branch, but not before examining the other siblings.
          firstChildren.push(child.firstChild);
        }

        child = child.nextSibling;
      }

      if (targetChild) {
        // Emptying firstChildren/findComponentRootReusableArray is
        // not necessary for correctness, but it helps the GC reclaim
        // any nodes that were left at the end of the search.
        firstChildren.length = 0;

        return targetChild;
      }
    }

    firstChildren.length = 0;

    !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findComponentRoot(..., %s): Unable to find element. This probably ' + 'means the DOM was unexpectedly mutated (e.g., by the browser), ' + 'usually due to forgetting a <tbody> when using tables, nesting tags ' + 'like <form>, <p>, or <a>, or using non-SVG elements in an <svg> ' + 'parent. ' + 'Try inspecting the child nodes of the element with React ID `%s`.', targetID, ReactMount.getID(ancestorNode)) : invariant(false) : undefined;
  },

  _mountImageIntoNode: function (markup, container, shouldReuseMarkup, transaction) {
    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : invariant(false) : undefined;

    if (shouldReuseMarkup) {
      var rootElement = getReactRootElementInContainer(container);
      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
        return;
      } else {
        var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);

        var rootMarkup = rootElement.outerHTML;
        rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);

        var normalizedMarkup = markup;
        if (process.env.NODE_ENV !== 'production') {
          // because rootMarkup is retrieved from the DOM, various normalizations
          // will have occurred which will not be present in `markup`. Here,
          // insert markup into a <div> or <iframe> depending on the container
          // type to perform the same normalizations before comparing.
          var normalizer;
          if (container.nodeType === ELEMENT_NODE_TYPE) {
            normalizer = document.createElement('div');
            normalizer.innerHTML = markup;
            normalizedMarkup = normalizer.innerHTML;
          } else {
            normalizer = document.createElement('iframe');
            document.body.appendChild(normalizer);
            normalizer.contentDocument.write(markup);
            normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;
            document.body.removeChild(normalizer);
          }
        }

        var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);
        var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);

        !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document using ' + 'server rendering but the checksum was invalid. This usually ' + 'means you rendered a different component type or props on ' + 'the client from the one on the server, or your render() ' + 'methods are impure. React cannot handle this case due to ' + 'cross-browser quirks by rendering at the document root. You ' + 'should look for environment dependent code in your components ' + 'and ensure the props are the same client and server side:\n%s', difference) : invariant(false) : undefined;

        if (process.env.NODE_ENV !== 'production') {
          process.env.NODE_ENV !== 'production' ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\n%s', difference) : undefined;
        }
      }
    }

    !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document but ' + 'you didn\'t use server rendering. We can\'t do this ' + 'without using server rendering due to cross-browser quirks. ' + 'See ReactDOMServer.renderToString() for server rendering.') : invariant(false) : undefined;

    if (transaction.useCreateElement) {
      while (container.lastChild) {
        container.removeChild(container.lastChild);
      }
      container.appendChild(markup);
    } else {
      setInnerHTML(container, markup);
    }
  },

  ownerDocumentContextKey: ownerDocumentContextKey,

  /**
   * React ID utilities.
   */

  getReactRootID: getReactRootID,

  getID: getID,

  setID: setID,

  getNode: getNode,

  getNodeFromInstance: getNodeFromInstance,

  isValid: isValid,

  purgeID: purgeID
};

ReactPerf.measureMethods(ReactMount, 'ReactMount', {
  _renderNewRootComponent: '_renderNewRootComponent',
  _mountImageIntoNode: '_mountImageIntoNode'
});

module.exports = ReactMount;
}).call(this,require('_process'))

},{"./DOMProperty":16,"./Object.assign":29,"./ReactBrowserEventEmitter":33,"./ReactCurrentOwner":41,"./ReactDOMFeatureFlags":46,"./ReactElement":59,"./ReactEmptyComponentRegistry":62,"./ReactInstanceHandles":68,"./ReactInstanceMap":69,"./ReactMarkupChecksum":71,"./ReactPerf":78,"./ReactReconciler":83,"./ReactUpdateQueue":89,"./ReactUpdates":90,"./instantiateReactComponent":124,"./setInnerHTML":130,"./shouldUpdateReactComponent":132,"./validateDOMNesting":134,"_process":6,"fbjs/lib/containsNode":139,"fbjs/lib/emptyObject":143,"fbjs/lib/invariant":150,"fbjs/lib/warning":161}],73:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMultiChild
 * @typechecks static-only
 */

'use strict';

var ReactComponentEnvironment = require('./ReactComponentEnvironment');
var ReactMultiChildUpdateTypes = require('./ReactMultiChildUpdateTypes');

var ReactCurrentOwner = require('./ReactCurrentOwner');
var ReactReconciler = require('./ReactReconciler');
var ReactChildReconciler = require('./ReactChildReconciler');

var flattenChildren = require('./flattenChildren');

/**
 * Updating children of a component may trigger recursive updates. The depth is
 * used to batch recursive updates to render markup more efficiently.
 *
 * @type {number}
 * @private
 */
var updateDepth = 0;

/**
 * Queue of update configuration objects.
 *
 * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.
 *
 * @type {array<object>}
 * @private
 */
var updateQueue = [];

/**
 * Queue of markup to be rendered.
 *
 * @type {array<string>}
 * @private
 */
var markupQueue = [];

/**
 * Enqueues markup to be rendered and inserted at a supplied index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {string} markup Markup that renders into an element.
 * @param {number} toIndex Destination index.
 * @private
 */
function enqueueInsertMarkup(parentID, markup, toIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
    markupIndex: markupQueue.push(markup) - 1,
    content: null,
    fromIndex: null,
    toIndex: toIndex
  });
}

/**
 * Enqueues moving an existing element to another index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {number} fromIndex Source index of the existing element.
 * @param {number} toIndex Destination index of the element.
 * @private
 */
function enqueueMove(parentID, fromIndex, toIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
    markupIndex: null,
    content: null,
    fromIndex: fromIndex,
    toIndex: toIndex
  });
}

/**
 * Enqueues removing an element at an index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {number} fromIndex Index of the element to remove.
 * @private
 */
function enqueueRemove(parentID, fromIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.REMOVE_NODE,
    markupIndex: null,
    content: null,
    fromIndex: fromIndex,
    toIndex: null
  });
}

/**
 * Enqueues setting the markup of a node.
 *
 * @param {string} parentID ID of the parent component.
 * @param {string} markup Markup that renders into an element.
 * @private
 */
function enqueueSetMarkup(parentID, markup) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.SET_MARKUP,
    markupIndex: null,
    content: markup,
    fromIndex: null,
    toIndex: null
  });
}

/**
 * Enqueues setting the text content.
 *
 * @param {string} parentID ID of the parent component.
 * @param {string} textContent Text content to set.
 * @private
 */
function enqueueTextContent(parentID, textContent) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
    markupIndex: null,
    content: textContent,
    fromIndex: null,
    toIndex: null
  });
}

/**
 * Processes any enqueued updates.
 *
 * @private
 */
function processQueue() {
  if (updateQueue.length) {
    ReactComponentEnvironment.processChildrenUpdates(updateQueue, markupQueue);
    clearQueue();
  }
}

/**
 * Clears any enqueued updates.
 *
 * @private
 */
function clearQueue() {
  updateQueue.length = 0;
  markupQueue.length = 0;
}

/**
 * ReactMultiChild are capable of reconciling multiple children.
 *
 * @class ReactMultiChild
 * @internal
 */
var ReactMultiChild = {

  /**
   * Provides common functionality for components that must reconcile multiple
   * children. This is used by `ReactDOMComponent` to mount, update, and
   * unmount child components.
   *
   * @lends {ReactMultiChild.prototype}
   */
  Mixin: {

    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {
      if (process.env.NODE_ENV !== 'production') {
        if (this._currentElement) {
          try {
            ReactCurrentOwner.current = this._currentElement._owner;
            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
          } finally {
            ReactCurrentOwner.current = null;
          }
        }
      }
      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
    },

    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, transaction, context) {
      var nextChildren;
      if (process.env.NODE_ENV !== 'production') {
        if (this._currentElement) {
          try {
            ReactCurrentOwner.current = this._currentElement._owner;
            nextChildren = flattenChildren(nextNestedChildrenElements);
          } finally {
            ReactCurrentOwner.current = null;
          }
          return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);
        }
      }
      nextChildren = flattenChildren(nextNestedChildrenElements);
      return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);
    },

    /**
     * Generates a "mount image" for each of the supplied children. In the case
     * of `ReactDOMComponent`, a mount image is a string of markup.
     *
     * @param {?object} nestedChildren Nested child maps.
     * @return {array} An array of mounted representations.
     * @internal
     */
    mountChildren: function (nestedChildren, transaction, context) {
      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
      this._renderedChildren = children;
      var mountImages = [];
      var index = 0;
      for (var name in children) {
        if (children.hasOwnProperty(name)) {
          var child = children[name];
          // Inlined for performance, see `ReactInstanceHandles.createReactID`.
          var rootID = this._rootNodeID + name;
          var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);
          child._mountIndex = index++;
          mountImages.push(mountImage);
        }
      }
      return mountImages;
    },

    /**
     * Replaces any rendered children with a text content string.
     *
     * @param {string} nextContent String of content.
     * @internal
     */
    updateTextContent: function (nextContent) {
      updateDepth++;
      var errorThrown = true;
      try {
        var prevChildren = this._renderedChildren;
        // Remove any rendered children.
        ReactChildReconciler.unmountChildren(prevChildren);
        // TODO: The setTextContent operation should be enough
        for (var name in prevChildren) {
          if (prevChildren.hasOwnProperty(name)) {
            this._unmountChild(prevChildren[name]);
          }
        }
        // Set new text content.
        this.setTextContent(nextContent);
        errorThrown = false;
      } finally {
        updateDepth--;
        if (!updateDepth) {
          if (errorThrown) {
            clearQueue();
          } else {
            processQueue();
          }
        }
      }
    },

    /**
     * Replaces any rendered children with a markup string.
     *
     * @param {string} nextMarkup String of markup.
     * @internal
     */
    updateMarkup: function (nextMarkup) {
      updateDepth++;
      var errorThrown = true;
      try {
        var prevChildren = this._renderedChildren;
        // Remove any rendered children.
        ReactChildReconciler.unmountChildren(prevChildren);
        for (var name in prevChildren) {
          if (prevChildren.hasOwnProperty(name)) {
            this._unmountChildByName(prevChildren[name], name);
          }
        }
        this.setMarkup(nextMarkup);
        errorThrown = false;
      } finally {
        updateDepth--;
        if (!updateDepth) {
          if (errorThrown) {
            clearQueue();
          } else {
            processQueue();
          }
        }
      }
    },

    /**
     * Updates the rendered children with new children.
     *
     * @param {?object} nextNestedChildrenElements Nested child element maps.
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    updateChildren: function (nextNestedChildrenElements, transaction, context) {
      updateDepth++;
      var errorThrown = true;
      try {
        this._updateChildren(nextNestedChildrenElements, transaction, context);
        errorThrown = false;
      } finally {
        updateDepth--;
        if (!updateDepth) {
          if (errorThrown) {
            clearQueue();
          } else {
            processQueue();
          }
        }
      }
    },

    /**
     * Improve performance by isolating this hot code path from the try/catch
     * block in `updateChildren`.
     *
     * @param {?object} nextNestedChildrenElements Nested child element maps.
     * @param {ReactReconcileTransaction} transaction
     * @final
     * @protected
     */
    _updateChildren: function (nextNestedChildrenElements, transaction, context) {
      var prevChildren = this._renderedChildren;
      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, transaction, context);
      this._renderedChildren = nextChildren;
      if (!nextChildren && !prevChildren) {
        return;
      }
      var name;
      // `nextIndex` will increment for each child in `nextChildren`, but
      // `lastIndex` will be the last index visited in `prevChildren`.
      var lastIndex = 0;
      var nextIndex = 0;
      for (name in nextChildren) {
        if (!nextChildren.hasOwnProperty(name)) {
          continue;
        }
        var prevChild = prevChildren && prevChildren[name];
        var nextChild = nextChildren[name];
        if (prevChild === nextChild) {
          this.moveChild(prevChild, nextIndex, lastIndex);
          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
          prevChild._mountIndex = nextIndex;
        } else {
          if (prevChild) {
            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
            this._unmountChild(prevChild);
          }
          // The child must be instantiated before it's mounted.
          this._mountChildByNameAtIndex(nextChild, name, nextIndex, transaction, context);
        }
        nextIndex++;
      }
      // Remove children that are no longer present.
      for (name in prevChildren) {
        if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
          this._unmountChild(prevChildren[name]);
        }
      }
    },

    /**
     * Unmounts all rendered children. This should be used to clean up children
     * when this component is unmounted.
     *
     * @internal
     */
    unmountChildren: function () {
      var renderedChildren = this._renderedChildren;
      ReactChildReconciler.unmountChildren(renderedChildren);
      this._renderedChildren = null;
    },

    /**
     * Moves a child component to the supplied index.
     *
     * @param {ReactComponent} child Component to move.
     * @param {number} toIndex Destination index of the element.
     * @param {number} lastIndex Last index visited of the siblings of `child`.
     * @protected
     */
    moveChild: function (child, toIndex, lastIndex) {
      // If the index of `child` is less than `lastIndex`, then it needs to
      // be moved. Otherwise, we do not need to move it because a child will be
      // inserted or moved before `child`.
      if (child._mountIndex < lastIndex) {
        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);
      }
    },

    /**
     * Creates a child component.
     *
     * @param {ReactComponent} child Component to create.
     * @param {string} mountImage Markup to insert.
     * @protected
     */
    createChild: function (child, mountImage) {
      enqueueInsertMarkup(this._rootNodeID, mountImage, child._mountIndex);
    },

    /**
     * Removes a child component.
     *
     * @param {ReactComponent} child Child to remove.
     * @protected
     */
    removeChild: function (child) {
      enqueueRemove(this._rootNodeID, child._mountIndex);
    },

    /**
     * Sets this text content string.
     *
     * @param {string} textContent Text content to set.
     * @protected
     */
    setTextContent: function (textContent) {
      enqueueTextContent(this._rootNodeID, textContent);
    },

    /**
     * Sets this markup string.
     *
     * @param {string} markup Markup to set.
     * @protected
     */
    setMarkup: function (markup) {
      enqueueSetMarkup(this._rootNodeID, markup);
    },

    /**
     * Mounts a child with the supplied name.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to mount.
     * @param {string} name Name of the child.
     * @param {number} index Index at which to insert the child.
     * @param {ReactReconcileTransaction} transaction
     * @private
     */
    _mountChildByNameAtIndex: function (child, name, index, transaction, context) {
      // Inlined for performance, see `ReactInstanceHandles.createReactID`.
      var rootID = this._rootNodeID + name;
      var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);
      child._mountIndex = index;
      this.createChild(child, mountImage);
    },

    /**
     * Unmounts a rendered child.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to unmount.
     * @private
     */
    _unmountChild: function (child) {
      this.removeChild(child);
      child._mountIndex = null;
    }

  }

};

module.exports = ReactMultiChild;
}).call(this,require('_process'))

},{"./ReactChildReconciler":34,"./ReactComponentEnvironment":39,"./ReactCurrentOwner":41,"./ReactMultiChildUpdateTypes":74,"./ReactReconciler":83,"./flattenChildren":115,"_process":6}],74:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMultiChildUpdateTypes
 */

'use strict';

var keyMirror = require('fbjs/lib/keyMirror');

/**
 * When a component's children are updated, a series of update configuration
 * objects are created in order to batch and serialize the required changes.
 *
 * Enumerates all the possible types of update configurations.
 *
 * @internal
 */
var ReactMultiChildUpdateTypes = keyMirror({
  INSERT_MARKUP: null,
  MOVE_EXISTING: null,
  REMOVE_NODE: null,
  SET_MARKUP: null,
  TEXT_CONTENT: null
});

module.exports = ReactMultiChildUpdateTypes;
},{"fbjs/lib/keyMirror":153}],75:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactNativeComponent
 */

'use strict';

var assign = require('./Object.assign');
var invariant = require('fbjs/lib/invariant');

var autoGenerateWrapperClass = null;
var genericComponentClass = null;
// This registry keeps track of wrapper classes around native tags.
var tagToComponentClass = {};
var textComponentClass = null;

var ReactNativeComponentInjection = {
  // This accepts a class that receives the tag string. This is a catch all
  // that can render any kind of tag.
  injectGenericComponentClass: function (componentClass) {
    genericComponentClass = componentClass;
  },
  // This accepts a text component class that takes the text string to be
  // rendered as props.
  injectTextComponentClass: function (componentClass) {
    textComponentClass = componentClass;
  },
  // This accepts a keyed object with classes as values. Each key represents a
  // tag. That particular tag will use this class instead of the generic one.
  injectComponentClasses: function (componentClasses) {
    assign(tagToComponentClass, componentClasses);
  }
};

/**
 * Get a composite component wrapper class for a specific tag.
 *
 * @param {ReactElement} element The tag for which to get the class.
 * @return {function} The React class constructor function.
 */
function getComponentClassForElement(element) {
  if (typeof element.type === 'function') {
    return element.type;
  }
  var tag = element.type;
  var componentClass = tagToComponentClass[tag];
  if (componentClass == null) {
    tagToComponentClass[tag] = componentClass = autoGenerateWrapperClass(tag);
  }
  return componentClass;
}

/**
 * Get a native internal component class for a specific tag.
 *
 * @param {ReactElement} element The element to create.
 * @return {function} The internal class constructor function.
 */
function createInternalComponent(element) {
  !genericComponentClass ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : invariant(false) : undefined;
  return new genericComponentClass(element.type, element.props);
}

/**
 * @param {ReactText} text
 * @return {ReactComponent}
 */
function createInstanceForText(text) {
  return new textComponentClass(text);
}

/**
 * @param {ReactComponent} component
 * @return {boolean}
 */
function isTextComponent(component) {
  return component instanceof textComponentClass;
}

var ReactNativeComponent = {
  getComponentClassForElement: getComponentClassForElement,
  createInternalComponent: createInternalComponent,
  createInstanceForText: createInstanceForText,
  isTextComponent: isTextComponent,
  injection: ReactNativeComponentInjection
};

module.exports = ReactNativeComponent;
}).call(this,require('_process'))

},{"./Object.assign":29,"_process":6,"fbjs/lib/invariant":150}],76:[function(require,module,exports){
(function (process){
/**
 * Copyright 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactNoopUpdateQueue
 */

'use strict';

var warning = require('fbjs/lib/warning');

function warnTDZ(publicInstance, callerName) {
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor && publicInstance.constructor.displayName || '') : undefined;
  }
}

/**
 * This is the abstract API for an update queue.
 */
var ReactNoopUpdateQueue = {

  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function (publicInstance) {
    return false;
  },

  /**
   * Enqueue a callback that will be executed after all the pending updates
   * have processed.
   *
   * @param {ReactClass} publicInstance The instance to use as `this` context.
   * @param {?function} callback Called after state is updated.
   * @internal
   */
  enqueueCallback: function (publicInstance, callback) {},

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @internal
   */
  enqueueForceUpdate: function (publicInstance) {
    warnTDZ(publicInstance, 'forceUpdate');
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @internal
   */
  enqueueReplaceState: function (publicInstance, completeState) {
    warnTDZ(publicInstance, 'replaceState');
  },

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @internal
   */
  enqueueSetState: function (publicInstance, partialState) {
    warnTDZ(publicInstance, 'setState');
  },

  /**
   * Sets a subset of the props.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialProps Subset of the next props.
   * @internal
   */
  enqueueSetProps: function (publicInstance, partialProps) {
    warnTDZ(publicInstance, 'setProps');
  },

  /**
   * Replaces all of the props.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} props New props.
   * @internal
   */
  enqueueReplaceProps: function (publicInstance, props) {
    warnTDZ(publicInstance, 'replaceProps');
  }

};

module.exports = ReactNoopUpdateQueue;
}).call(this,require('_process'))

},{"_process":6,"fbjs/lib/warning":161}],77:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactOwner
 */

'use strict';

var invariant = require('fbjs/lib/invariant');

/**
 * ReactOwners are capable of storing references to owned components.
 *
 * All components are capable of //being// referenced by owner components, but
 * only ReactOwner components are capable of //referencing// owned components.
 * The named reference is known as a "ref".
 *
 * Refs are available when mounted and updated during reconciliation.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return (
 *         <div onClick={this.handleClick}>
 *           <CustomComponent ref="custom" />
 *         </div>
 *       );
 *     },
 *     handleClick: function() {
 *       this.refs.custom.handleClick();
 *     },
 *     componentDidMount: function() {
 *       this.refs.custom.initialize();
 *     }
 *   });
 *
 * Refs should rarely be used. When refs are used, they should only be done to
 * control data that is not handled by React's data flow.
 *
 * @class ReactOwner
 */
var ReactOwner = {

  /**
   * @param {?object} object
   * @return {boolean} True if `object` is a valid owner.
   * @final
   */
  isValidOwner: function (object) {
    return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');
  },

  /**
   * Adds a component by ref to an owner component.
   *
   * @param {ReactComponent} component Component to reference.
   * @param {string} ref Name by which to refer to the component.
   * @param {ReactOwner} owner Component on which to record the ref.
   * @final
   * @internal
   */
  addComponentAsRefTo: function (component, ref, owner) {
    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might ' + 'be adding a ref to a component that was not created inside a component\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : undefined;
    owner.attachRef(ref, component);
  },

  /**
   * Removes a component by ref from an owner component.
   *
   * @param {ReactComponent} component Component to dereference.
   * @param {string} ref Name of the ref to remove.
   * @param {ReactOwner} owner Component on which the ref is recorded.
   * @final
   * @internal
   */
  removeComponentAsRefFrom: function (component, ref, owner) {
    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might ' + 'be removing a ref to a component that was not created inside a component\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : undefined;
    // Check that `component` is still the current ref because we do not want to
    // detach the ref if another component stole it.
    if (owner.getPublicInstance().refs[ref] === component.getPublicInstance()) {
      owner.detachRef(ref);
    }
  }

};

module.exports = ReactOwner;
}).call(this,require('_process'))

},{"_process":6,"fbjs/lib/invariant":150}],78:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPerf
 * @typechecks static-only
 */

'use strict';

/**
 * ReactPerf is a general AOP system designed to measure performance. This
 * module only has the hooks: see ReactDefaultPerf for the analysis tool.
 */
var ReactPerf = {
  /**
   * Boolean to enable/disable measurement. Set to false by default to prevent
   * accidental logging and perf loss.
   */
  enableMeasure: false,

  /**
   * Holds onto the measure function in use. By default, don't measure
   * anything, but we'll override this if we inject a measure function.
   */
  storedMeasure: _noMeasure,

  /**
   * @param {object} object
   * @param {string} objectName
   * @param {object<string>} methodNames
   */
  measureMethods: function (object, objectName, methodNames) {
    if (process.env.NODE_ENV !== 'production') {
      for (var key in methodNames) {
        if (!methodNames.hasOwnProperty(key)) {
          continue;
        }
        object[key] = ReactPerf.measure(objectName, methodNames[key], object[key]);
      }
    }
  },

  /**
   * Use this to wrap methods you want to measure. Zero overhead in production.
   *
   * @param {string} objName
   * @param {string} fnName
   * @param {function} func
   * @return {function}
   */
  measure: function (objName, fnName, func) {
    if (process.env.NODE_ENV !== 'production') {
      var measuredFunc = null;
      var wrapper = function () {
        if (ReactPerf.enableMeasure) {
          if (!measuredFunc) {
            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
          }
          return measuredFunc.apply(this, arguments);
        }
        return func.apply(this, arguments);
      };
      wrapper.displayName = objName + '_' + fnName;
      return wrapper;
    }
    return func;
  },

  injection: {
    /**
     * @param {function} measure
     */
    injectMeasure: function (measure) {
      ReactPerf.storedMeasure = measure;
    }
  }
};

/**
 * Simply passes through the measured function, without measuring it.
 *
 * @param {string} objName
 * @param {string} fnName
 * @param {function} func
 * @return {function}
 */
function _noMeasure(objName, fnName, func) {
  return func;
}

module.exports = ReactPerf;
}).call(this,require('_process'))

},{"_process":6}],79:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypeLocationNames
 */

'use strict';

var ReactPropTypeLocationNames = {};

if (process.env.NODE_ENV !== 'production') {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
}

module.exports = ReactPropTypeLocationNames;
}).call(this,require('_process'))

},{"_process":6}],80:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypeLocations
 */

'use strict';

var keyMirror = require('fbjs/lib/keyMirror');

var ReactPropTypeLocations = keyMirror({
  prop: null,
  context: null,
  childContext: null
});

module.exports = ReactPropTypeLocations;
},{"fbjs/lib/keyMirror":153}],81:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypes
 */

'use strict';

var ReactElement = require('./ReactElement');
var ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');

var emptyFunction = require('fbjs/lib/emptyFunction');
var getIteratorFn = require('./getIteratorFn');

/**
 * Collection of methods that allow declaration and validation of props that are
 * supplied to React components. Example usage:
 *
 *   var Props = require('ReactPropTypes');
 *   var MyArticle = React.createClass({
 *     propTypes: {
 *       // An optional string prop named "description".
 *       description: Props.string,
 *
 *       // A required enum prop named "category".
 *       category: Props.oneOf(['News','Photos']).isRequired,
 *
 *       // A prop named "dialog" that requires an instance of Dialog.
 *       dialog: Props.instanceOf(Dialog).isRequired
 *     },
 *     render: function() { ... }
 *   });
 *
 * A more formal specification of how these methods are used:
 *
 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
 *   decl := ReactPropTypes.{type}(.isRequired)?
 *
 * Each and every declaration produces a function with the same signature. This
 * allows the creation of custom validation functions. For example:
 *
 *  var MyLink = React.createClass({
 *    propTypes: {
 *      // An optional string or URI prop named "href".
 *      href: function(props, propName, componentName) {
 *        var propValue = props[propName];
 *        if (propValue != null && typeof propValue !== 'string' &&
 *            !(propValue instanceof URI)) {
 *          return new Error(
 *            'Expected a string or an URI for ' + propName + ' in ' +
 *            componentName
 *          );
 *        }
 *      }
 *    },
 *    render: function() {...}
 *  });
 *
 * @internal
 */

var ANONYMOUS = '<<anonymous>>';

var ReactPropTypes = {
  array: createPrimitiveTypeChecker('array'),
  bool: createPrimitiveTypeChecker('boolean'),
  func: createPrimitiveTypeChecker('function'),
  number: createPrimitiveTypeChecker('number'),
  object: createPrimitiveTypeChecker('object'),
  string: createPrimitiveTypeChecker('string'),

  any: createAnyTypeChecker(),
  arrayOf: createArrayOfTypeChecker,
  element: createElementTypeChecker(),
  instanceOf: createInstanceTypeChecker,
  node: createNodeChecker(),
  objectOf: createObjectOfTypeChecker,
  oneOf: createEnumTypeChecker,
  oneOfType: createUnionTypeChecker,
  shape: createShapeTypeChecker
};

function createChainableTypeChecker(validate) {
  function checkType(isRequired, props, propName, componentName, location, propFullName) {
    componentName = componentName || ANONYMOUS;
    propFullName = propFullName || propName;
    if (props[propName] == null) {
      var locationName = ReactPropTypeLocationNames[location];
      if (isRequired) {
        return new Error('Required ' + locationName + ' `' + propFullName + '` was not specified in ' + ('`' + componentName + '`.'));
      }
      return null;
    } else {
      return validate(props, propName, componentName, location, propFullName);
    }
  }

  var chainedCheckType = checkType.bind(null, false);
  chainedCheckType.isRequired = checkType.bind(null, true);

  return chainedCheckType;
}

function createPrimitiveTypeChecker(expectedType) {
  function validate(props, propName, componentName, location, propFullName) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== expectedType) {
      var locationName = ReactPropTypeLocationNames[location];
      // `propValue` being instance of, say, date/regexp, pass the 'object'
      // check, but we can offer a more precise error message here rather than
      // 'of type `object`'.
      var preciseType = getPreciseType(propValue);

      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createAnyTypeChecker() {
  return createChainableTypeChecker(emptyFunction.thatReturns(null));
}

function createArrayOfTypeChecker(typeChecker) {
  function validate(props, propName, componentName, location, propFullName) {
    var propValue = props[propName];
    if (!Array.isArray(propValue)) {
      var locationName = ReactPropTypeLocationNames[location];
      var propType = getPropType(propValue);
      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
    }
    for (var i = 0; i < propValue.length; i++) {
      var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']');
      if (error instanceof Error) {
        return error;
      }
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createElementTypeChecker() {
  function validate(props, propName, componentName, location, propFullName) {
    if (!ReactElement.isValidElement(props[propName])) {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a single ReactElement.'));
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createInstanceTypeChecker(expectedClass) {
  function validate(props, propName, componentName, location, propFullName) {
    if (!(props[propName] instanceof expectedClass)) {
      var locationName = ReactPropTypeLocationNames[location];
      var expectedClassName = expectedClass.name || ANONYMOUS;
      var actualClassName = getClassName(props[propName]);
      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createEnumTypeChecker(expectedValues) {
  if (!Array.isArray(expectedValues)) {
    return createChainableTypeChecker(function () {
      return new Error('Invalid argument supplied to oneOf, expected an instance of array.');
    });
  }

  function validate(props, propName, componentName, location, propFullName) {
    var propValue = props[propName];
    for (var i = 0; i < expectedValues.length; i++) {
      if (propValue === expectedValues[i]) {
        return null;
      }
    }

    var locationName = ReactPropTypeLocationNames[location];
    var valuesString = JSON.stringify(expectedValues);
    return new Error('Invalid ' + locationName + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
  }
  return createChainableTypeChecker(validate);
}

function createObjectOfTypeChecker(typeChecker) {
  function validate(props, propName, componentName, location, propFullName) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== 'object') {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
    }
    for (var key in propValue) {
      if (propValue.hasOwnProperty(key)) {
        var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key);
        if (error instanceof Error) {
          return error;
        }
      }
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createUnionTypeChecker(arrayOfTypeCheckers) {
  if (!Array.isArray(arrayOfTypeCheckers)) {
    return createChainableTypeChecker(function () {
      return new Error('Invalid argument supplied to oneOfType, expected an instance of array.');
    });
  }

  function validate(props, propName, componentName, location, propFullName) {
    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (checker(props, propName, componentName, location, propFullName) == null) {
        return null;
      }
    }

    var locationName = ReactPropTypeLocationNames[location];
    return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
  }
  return createChainableTypeChecker(validate);
}

function createNodeChecker() {
  function validate(props, propName, componentName, location, propFullName) {
    if (!isNode(props[propName])) {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createShapeTypeChecker(shapeTypes) {
  function validate(props, propName, componentName, location, propFullName) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== 'object') {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
    }
    for (var key in shapeTypes) {
      var checker = shapeTypes[key];
      if (!checker) {
        continue;
      }
      var error = checker(propValue, key, componentName, location, propFullName + '.' + key);
      if (error) {
        return error;
      }
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function isNode(propValue) {
  switch (typeof propValue) {
    case 'number':
    case 'string':
    case 'undefined':
      return true;
    case 'boolean':
      return !propValue;
    case 'object':
      if (Array.isArray(propValue)) {
        return propValue.every(isNode);
      }
      if (propValue === null || ReactElement.isValidElement(propValue)) {
        return true;
      }

      var iteratorFn = getIteratorFn(propValue);
      if (iteratorFn) {
        var iterator = iteratorFn.call(propValue);
        var step;
        if (iteratorFn !== propValue.entries) {
          while (!(step = iterator.next()).done) {
            if (!isNode(step.value)) {
              return false;
            }
          }
        } else {
          // Iterator will provide entry [k,v] tuples rather than values.
          while (!(step = iterator.next()).done) {
            var entry = step.value;
            if (entry) {
              if (!isNode(entry[1])) {
                return false;
              }
            }
          }
        }
      } else {
        return false;
      }

      return true;
    default:
      return false;
  }
}

// Equivalent of `typeof` but with special handling for array and regexp.
function getPropType(propValue) {
  var propType = typeof propValue;
  if (Array.isArray(propValue)) {
    return 'array';
  }
  if (propValue instanceof RegExp) {
    // Old webkits (at least until Android 4.0) return 'function' rather than
    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
    // passes PropTypes.object.
    return 'object';
  }
  return propType;
}

// This handles more types than `getPropType`. Only used for error messages.
// See `createPrimitiveTypeChecker`.
function getPreciseType(propValue) {
  var propType = getPropType(propValue);
  if (propType === 'object') {
    if (propValue instanceof Date) {
      return 'date';
    } else if (propValue instanceof RegExp) {
      return 'regexp';
    }
  }
  return propType;
}

// Returns class name of the object, if any.
function getClassName(propValue) {
  if (!propValue.constructor || !propValue.constructor.name) {
    return '<<anonymous>>';
  }
  return propValue.constructor.name;
}

module.exports = ReactPropTypes;
},{"./ReactElement":59,"./ReactPropTypeLocationNames":79,"./getIteratorFn":121,"fbjs/lib/emptyFunction":142}],82:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactReconcileTransaction
 * @typechecks static-only
 */

'use strict';

var CallbackQueue = require('./CallbackQueue');
var PooledClass = require('./PooledClass');
var ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');
var ReactDOMFeatureFlags = require('./ReactDOMFeatureFlags');
var ReactInputSelection = require('./ReactInputSelection');
var Transaction = require('./Transaction');

var assign = require('./Object.assign');

/**
 * Ensures that, when possible, the selection range (currently selected text
 * input) is not disturbed by performing the transaction.
 */
var SELECTION_RESTORATION = {
  /**
   * @return {Selection} Selection information.
   */
  initialize: ReactInputSelection.getSelectionInformation,
  /**
   * @param {Selection} sel Selection information returned from `initialize`.
   */
  close: ReactInputSelection.restoreSelection
};

/**
 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
 * high level DOM manipulations (like temporarily removing a text input from the
 * DOM).
 */
var EVENT_SUPPRESSION = {
  /**
   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
   * the reconciliation.
   */
  initialize: function () {
    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
    ReactBrowserEventEmitter.setEnabled(false);
    return currentlyEnabled;
  },

  /**
   * @param {boolean} previouslyEnabled Enabled status of
   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`
   *   restores the previous value.
   */
  close: function (previouslyEnabled) {
    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
  }
};

/**
 * Provides a queue for collecting `componentDidMount` and
 * `componentDidUpdate` callbacks during the the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function () {
    this.reactMountReady.reset();
  },

  /**
   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
   */
  close: function () {
    this.reactMountReady.notifyAll();
  }
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];

/**
 * Currently:
 * - The order that these are listed in the transaction is critical:
 * - Suppresses events.
 * - Restores selection range.
 *
 * Future:
 * - Restore document/overflow scroll positions that were unintentionally
 *   modified via DOM insertions above the top viewport boundary.
 * - Implement/integrate with customized constraint based layout system and keep
 *   track of which dimensions must be remeasured.
 *
 * @class ReactReconcileTransaction
 */
function ReactReconcileTransaction(forceHTML) {
  this.reinitializeTransaction();
  // Only server-side rendering really needs this option (see
  // `ReactServerRendering`), but server-side uses
  // `ReactServerRenderingTransaction` instead. This option is here so that it's
  // accessible and defaults to false when `ReactDOMComponent` and
  // `ReactTextComponent` checks it in `mountComponent`.`
  this.renderToStaticMarkup = false;
  this.reactMountReady = CallbackQueue.getPooled(null);
  this.useCreateElement = !forceHTML && ReactDOMFeatureFlags.useCreateElement;
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array<object>} List of operation wrap procedures.
   *   TODO: convert to array<TransactionWrapper>
   */
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function () {
    return this.reactMountReady;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be reused.
   */
  destructor: function () {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;
  }
};

assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);

PooledClass.addPoolingTo(ReactReconcileTransaction);

module.exports = ReactReconcileTransaction;
},{"./CallbackQueue":12,"./Object.assign":29,"./PooledClass":30,"./ReactBrowserEventEmitter":33,"./ReactDOMFeatureFlags":46,"./ReactInputSelection":67,"./Transaction":107}],83:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactReconciler
 */

'use strict';

var ReactRef = require('./ReactRef');

/**
 * Helper to call ReactRef.attachRefs with this composite component, split out
 * to avoid allocations in the transaction mount-ready queue.
 */
function attachRefs() {
  ReactRef.attachRefs(this, this._currentElement);
}

var ReactReconciler = {

  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {ReactComponent} internalInstance
   * @param {string} rootID DOM ID of the root node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: function (internalInstance, rootID, transaction, context) {
    var markup = internalInstance.mountComponent(rootID, transaction, context);
    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {
      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
    }
    return markup;
  },

  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function (internalInstance) {
    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
    internalInstance.unmountComponent();
  },

  /**
   * Update a component using a new element.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactElement} nextElement
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   * @internal
   */
  receiveComponent: function (internalInstance, nextElement, transaction, context) {
    var prevElement = internalInstance._currentElement;

    if (nextElement === prevElement && context === internalInstance._context) {
      // Since elements are immutable after the owner is rendered,
      // we can do a cheap identity compare here to determine if this is a
      // superfluous reconcile. It's possible for state to be mutable but such
      // change should trigger an update of the owner which would recreate
      // the element. We explicitly check for the existence of an owner since
      // it's possible for an element created outside a composite to be
      // deeply mutated and reused.

      // TODO: Bailing out early is just a perf optimization right?
      // TODO: Removing the return statement should affect correctness?
      return;
    }

    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);

    if (refsChanged) {
      ReactRef.detachRefs(internalInstance, prevElement);
    }

    internalInstance.receiveComponent(nextElement, transaction, context);

    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {
      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
    }
  },

  /**
   * Flush any dirty changes in a component.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  performUpdateIfNecessary: function (internalInstance, transaction) {
    internalInstance.performUpdateIfNecessary(transaction);
  }

};

module.exports = ReactReconciler;
},{"./ReactRef":84}],84:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactRef
 */

'use strict';

var ReactOwner = require('./ReactOwner');

var ReactRef = {};

function attachRef(ref, component, owner) {
  if (typeof ref === 'function') {
    ref(component.getPublicInstance());
  } else {
    // Legacy ref
    ReactOwner.addComponentAsRefTo(component, ref, owner);
  }
}

function detachRef(ref, component, owner) {
  if (typeof ref === 'function') {
    ref(null);
  } else {
    // Legacy ref
    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
  }
}

ReactRef.attachRefs = function (instance, element) {
  if (element === null || element === false) {
    return;
  }
  var ref = element.ref;
  if (ref != null) {
    attachRef(ref, instance, element._owner);
  }
};

ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
  // If either the owner or a `ref` has changed, make sure the newest owner
  // has stored a reference to `this`, and the previous owner (if different)
  // has forgotten the reference to `this`. We use the element instead
  // of the public this.props because the post processing cannot determine
  // a ref. The ref conceptually lives on the element.

  // TODO: Should this even be possible? The owner cannot change because
  // it's forbidden by shouldUpdateReactComponent. The ref can change
  // if you swap the keys of but not the refs. Reconsider where this check
  // is made. It probably belongs where the key checking and
  // instantiateReactComponent is done.

  var prevEmpty = prevElement === null || prevElement === false;
  var nextEmpty = nextElement === null || nextElement === false;

  return(
    // This has a few false positives w/r/t empty components.
    prevEmpty || nextEmpty || nextElement._owner !== prevElement._owner || nextElement.ref !== prevElement.ref
  );
};

ReactRef.detachRefs = function (instance, element) {
  if (element === null || element === false) {
    return;
  }
  var ref = element.ref;
  if (ref != null) {
    detachRef(ref, instance, element._owner);
  }
};

module.exports = ReactRef;
},{"./ReactOwner":77}],85:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactRootIndex
 * @typechecks
 */

'use strict';

var ReactRootIndexInjection = {
  /**
   * @param {function} _createReactRootIndex
   */
  injectCreateReactRootIndex: function (_createReactRootIndex) {
    ReactRootIndex.createReactRootIndex = _createReactRootIndex;
  }
};

var ReactRootIndex = {
  createReactRootIndex: null,
  injection: ReactRootIndexInjection
};

module.exports = ReactRootIndex;
},{}],86:[function(require,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactServerBatchingStrategy
 * @typechecks
 */

'use strict';

var ReactServerBatchingStrategy = {
  isBatchingUpdates: false,
  batchedUpdates: function (callback) {
    // Don't do anything here. During the server rendering we don't want to
    // schedule any updates. We will simply ignore them.
  }
};

module.exports = ReactServerBatchingStrategy;
},{}],87:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks static-only
 * @providesModule ReactServerRendering
 */
'use strict';

var ReactDefaultBatchingStrategy = require('./ReactDefaultBatchingStrategy');
var ReactElement = require('./ReactElement');
var ReactInstanceHandles = require('./ReactInstanceHandles');
var ReactMarkupChecksum = require('./ReactMarkupChecksum');
var ReactServerBatchingStrategy = require('./ReactServerBatchingStrategy');
var ReactServerRenderingTransaction = require('./ReactServerRenderingTransaction');
var ReactUpdates = require('./ReactUpdates');

var emptyObject = require('fbjs/lib/emptyObject');
var instantiateReactComponent = require('./instantiateReactComponent');
var invariant = require('fbjs/lib/invariant');

/**
 * @param {ReactElement} element
 * @return {string} the HTML markup
 */
function renderToString(element) {
  !ReactElement.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToString(): You must pass a valid ReactElement.') : invariant(false) : undefined;

  var transaction;
  try {
    ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);

    var id = ReactInstanceHandles.createReactRootID();
    transaction = ReactServerRenderingTransaction.getPooled(false);

    return transaction.perform(function () {
      var componentInstance = instantiateReactComponent(element, null);
      var markup = componentInstance.mountComponent(id, transaction, emptyObject);
      return ReactMarkupChecksum.addChecksumToMarkup(markup);
    }, null);
  } finally {
    ReactServerRenderingTransaction.release(transaction);
    // Revert to the DOM batching strategy since these two renderers
    // currently share these stateful modules.
    ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);
  }
}

/**
 * @param {ReactElement} element
 * @return {string} the HTML markup, without the extra React ID and checksum
 * (for generating static pages)
 */
function renderToStaticMarkup(element) {
  !ReactElement.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToStaticMarkup(): You must pass a valid ReactElement.') : invariant(false) : undefined;

  var transaction;
  try {
    ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);

    var id = ReactInstanceHandles.createReactRootID();
    transaction = ReactServerRenderingTransaction.getPooled(true);

    return transaction.perform(function () {
      var componentInstance = instantiateReactComponent(element, null);
      return componentInstance.mountComponent(id, transaction, emptyObject);
    }, null);
  } finally {
    ReactServerRenderingTransaction.release(transaction);
    // Revert to the DOM batching strategy since these two renderers
    // currently share these stateful modules.
    ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);
  }
}

module.exports = {
  renderToString: renderToString,
  renderToStaticMarkup: renderToStaticMarkup
};
}).call(this,require('_process'))

},{"./ReactDefaultBatchingStrategy":55,"./ReactElement":59,"./ReactInstanceHandles":68,"./ReactMarkupChecksum":71,"./ReactServerBatchingStrategy":86,"./ReactServerRenderingTransaction":88,"./ReactUpdates":90,"./instantiateReactComponent":124,"_process":6,"fbjs/lib/emptyObject":143,"fbjs/lib/invariant":150}],88:[function(require,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactServerRenderingTransaction
 * @typechecks
 */

'use strict';

var PooledClass = require('./PooledClass');
var CallbackQueue = require('./CallbackQueue');
var Transaction = require('./Transaction');

var assign = require('./Object.assign');
var emptyFunction = require('fbjs/lib/emptyFunction');

/**
 * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks
 * during the performing of the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function () {
    this.reactMountReady.reset();
  },

  close: emptyFunction
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [ON_DOM_READY_QUEUEING];

/**
 * @class ReactServerRenderingTransaction
 * @param {boolean} renderToStaticMarkup
 */
function ReactServerRenderingTransaction(renderToStaticMarkup) {
  this.reinitializeTransaction();
  this.renderToStaticMarkup = renderToStaticMarkup;
  this.reactMountReady = CallbackQueue.getPooled(null);
  this.useCreateElement = false;
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array} Empty list of operation wrap procedures.
   */
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function () {
    return this.reactMountReady;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be reused.
   */
  destructor: function () {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;
  }
};

assign(ReactServerRenderingTransaction.prototype, Transaction.Mixin, Mixin);

PooledClass.addPoolingTo(ReactServerRenderingTransaction);

module.exports = ReactServerRenderingTransaction;
},{"./CallbackQueue":12,"./Object.assign":29,"./PooledClass":30,"./Transaction":107,"fbjs/lib/emptyFunction":142}],89:[function(require,module,exports){
(function (process){
/**
 * Copyright 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactUpdateQueue
 */

'use strict';

var ReactCurrentOwner = require('./ReactCurrentOwner');
var ReactElement = require('./ReactElement');
var ReactInstanceMap = require('./ReactInstanceMap');
var ReactUpdates = require('./ReactUpdates');

var assign = require('./Object.assign');
var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

function enqueueUpdate(internalInstance) {
  ReactUpdates.enqueueUpdate(internalInstance);
}

function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
  var internalInstance = ReactInstanceMap.get(publicInstance);
  if (!internalInstance) {
    if (process.env.NODE_ENV !== 'production') {
      // Only warn when we have a callerName. Otherwise we should be silent.
      // We're probably calling from enqueueCallback. We don't want to warn
      // there because we already warned for the corresponding lifecycle method.
      process.env.NODE_ENV !== 'production' ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor.displayName) : undefined;
    }
    return null;
  }

  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition ' + '(such as within `render`). Render methods should be a pure function ' + 'of props and state.', callerName) : undefined;
  }

  return internalInstance;
}

/**
 * ReactUpdateQueue allows for state updates to be scheduled into a later
 * reconciliation step.
 */
var ReactUpdateQueue = {

  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function (publicInstance) {
    if (process.env.NODE_ENV !== 'production') {
      var owner = ReactCurrentOwner.current;
      if (owner !== null) {
        process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : undefined;
        owner._warnedAboutRefsInRender = true;
      }
    }
    var internalInstance = ReactInstanceMap.get(publicInstance);
    if (internalInstance) {
      // During componentWillMount and render this will still be null but after
      // that will always render to something. At least for now. So we can use
      // this hack.
      return !!internalInstance._renderedComponent;
    } else {
      return false;
    }
  },

  /**
   * Enqueue a callback that will be executed after all the pending updates
   * have processed.
   *
   * @param {ReactClass} publicInstance The instance to use as `this` context.
   * @param {?function} callback Called after state is updated.
   * @internal
   */
  enqueueCallback: function (publicInstance, callback) {
    !(typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'enqueueCallback(...): You called `setProps`, `replaceProps`, ' + '`setState`, `replaceState`, or `forceUpdate` with a callback that ' + 'isn\'t callable.') : invariant(false) : undefined;
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);

    // Previously we would throw an error if we didn't have an internal
    // instance. Since we want to make it a no-op instead, we mirror the same
    // behavior we have in other enqueue* methods.
    // We also need to ignore callbacks in componentWillMount. See
    // enqueueUpdates.
    if (!internalInstance) {
      return null;
    }

    if (internalInstance._pendingCallbacks) {
      internalInstance._pendingCallbacks.push(callback);
    } else {
      internalInstance._pendingCallbacks = [callback];
    }
    // TODO: The callback here is ignored when setState is called from
    // componentWillMount. Either fix it or disallow doing so completely in
    // favor of getInitialState. Alternatively, we can disallow
    // componentWillMount during server-side rendering.
    enqueueUpdate(internalInstance);
  },

  enqueueCallbackInternal: function (internalInstance, callback) {
    !(typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'enqueueCallback(...): You called `setProps`, `replaceProps`, ' + '`setState`, `replaceState`, or `forceUpdate` with a callback that ' + 'isn\'t callable.') : invariant(false) : undefined;
    if (internalInstance._pendingCallbacks) {
      internalInstance._pendingCallbacks.push(callback);
    } else {
      internalInstance._pendingCallbacks = [callback];
    }
    enqueueUpdate(internalInstance);
  },

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @internal
   */
  enqueueForceUpdate: function (publicInstance) {
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');

    if (!internalInstance) {
      return;
    }

    internalInstance._pendingForceUpdate = true;

    enqueueUpdate(internalInstance);
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @internal
   */
  enqueueReplaceState: function (publicInstance, completeState) {
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');

    if (!internalInstance) {
      return;
    }

    internalInstance._pendingStateQueue = [completeState];
    internalInstance._pendingReplaceState = true;

    enqueueUpdate(internalInstance);
  },

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @internal
   */
  enqueueSetState: function (publicInstance, partialState) {
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');

    if (!internalInstance) {
      return;
    }

    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);
    queue.push(partialState);

    enqueueUpdate(internalInstance);
  },

  /**
   * Sets a subset of the props.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialProps Subset of the next props.
   * @internal
   */
  enqueueSetProps: function (publicInstance, partialProps) {
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setProps');
    if (!internalInstance) {
      return;
    }
    ReactUpdateQueue.enqueueSetPropsInternal(internalInstance, partialProps);
  },

  enqueueSetPropsInternal: function (internalInstance, partialProps) {
    var topLevelWrapper = internalInstance._topLevelWrapper;
    !topLevelWrapper ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setProps(...): You called `setProps` on a ' + 'component with a parent. This is an anti-pattern since props will ' + 'get reactively updated when rendered. Instead, change the owner\'s ' + '`render` method to pass the correct value as props to the component ' + 'where it is created.') : invariant(false) : undefined;

    // Merge with the pending element if it exists, otherwise with existing
    // element props.
    var wrapElement = topLevelWrapper._pendingElement || topLevelWrapper._currentElement;
    var element = wrapElement.props;
    var props = assign({}, element.props, partialProps);
    topLevelWrapper._pendingElement = ReactElement.cloneAndReplaceProps(wrapElement, ReactElement.cloneAndReplaceProps(element, props));

    enqueueUpdate(topLevelWrapper);
  },

  /**
   * Replaces all of the props.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} props New props.
   * @internal
   */
  enqueueReplaceProps: function (publicInstance, props) {
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceProps');
    if (!internalInstance) {
      return;
    }
    ReactUpdateQueue.enqueueReplacePropsInternal(internalInstance, props);
  },

  enqueueReplacePropsInternal: function (internalInstance, props) {
    var topLevelWrapper = internalInstance._topLevelWrapper;
    !topLevelWrapper ? process.env.NODE_ENV !== 'production' ? invariant(false, 'replaceProps(...): You called `replaceProps` on a ' + 'component with a parent. This is an anti-pattern since props will ' + 'get reactively updated when rendered. Instead, change the owner\'s ' + '`render` method to pass the correct value as props to the component ' + 'where it is created.') : invariant(false) : undefined;

    // Merge with the pending element if it exists, otherwise with existing
    // element props.
    var wrapElement = topLevelWrapper._pendingElement || topLevelWrapper._currentElement;
    var element = wrapElement.props;
    topLevelWrapper._pendingElement = ReactElement.cloneAndReplaceProps(wrapElement, ReactElement.cloneAndReplaceProps(element, props));

    enqueueUpdate(topLevelWrapper);
  },

  enqueueElementInternal: function (internalInstance, newElement) {
    internalInstance._pendingElement = newElement;
    enqueueUpdate(internalInstance);
  }

};

module.exports = ReactUpdateQueue;
}).call(this,require('_process'))

},{"./Object.assign":29,"./ReactCurrentOwner":41,"./ReactElement":59,"./ReactInstanceMap":69,"./ReactUpdates":90,"_process":6,"fbjs/lib/invariant":150,"fbjs/lib/warning":161}],90:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactUpdates
 */

'use strict';

var CallbackQueue = require('./CallbackQueue');
var PooledClass = require('./PooledClass');
var ReactPerf = require('./ReactPerf');
var ReactReconciler = require('./ReactReconciler');
var Transaction = require('./Transaction');

var assign = require('./Object.assign');
var invariant = require('fbjs/lib/invariant');

var dirtyComponents = [];
var asapCallbackQueue = CallbackQueue.getPooled();
var asapEnqueued = false;

var batchingStrategy = null;

function ensureInjected() {
  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching ' + 'strategy') : invariant(false) : undefined;
}

var NESTED_UPDATES = {
  initialize: function () {
    this.dirtyComponentsLength = dirtyComponents.length;
  },
  close: function () {
    if (this.dirtyComponentsLength !== dirtyComponents.length) {
      // Additional updates were enqueued by componentDidUpdate handlers or
      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
      // these new updates so that if A's componentDidUpdate calls setState on
      // B, B will update before the callback A's updater provided when calling
      // setState.
      dirtyComponents.splice(0, this.dirtyComponentsLength);
      flushBatchedUpdates();
    } else {
      dirtyComponents.length = 0;
    }
  }
};

var UPDATE_QUEUEING = {
  initialize: function () {
    this.callbackQueue.reset();
  },
  close: function () {
    this.callbackQueue.notifyAll();
  }
};

var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

function ReactUpdatesFlushTransaction() {
  this.reinitializeTransaction();
  this.dirtyComponentsLength = null;
  this.callbackQueue = CallbackQueue.getPooled();
  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled( /* forceHTML */false);
}

assign(ReactUpdatesFlushTransaction.prototype, Transaction.Mixin, {
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  },

  destructor: function () {
    this.dirtyComponentsLength = null;
    CallbackQueue.release(this.callbackQueue);
    this.callbackQueue = null;
    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
    this.reconcileTransaction = null;
  },

  perform: function (method, scope, a) {
    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
    // with this transaction's wrappers around it.
    return Transaction.Mixin.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
  }
});

PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

function batchedUpdates(callback, a, b, c, d, e) {
  ensureInjected();
  batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
}

/**
 * Array comparator for ReactComponents by mount ordering.
 *
 * @param {ReactComponent} c1 first component you're comparing
 * @param {ReactComponent} c2 second component you're comparing
 * @return {number} Return value usable by Array.prototype.sort().
 */
function mountOrderComparator(c1, c2) {
  return c1._mountOrder - c2._mountOrder;
}

function runBatchedUpdates(transaction) {
  var len = transaction.dirtyComponentsLength;
  !(len === dirtyComponents.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected flush transaction\'s stored dirty-components length (%s) to ' + 'match dirty-components array length (%s).', len, dirtyComponents.length) : invariant(false) : undefined;

  // Since reconciling a component higher in the owner hierarchy usually (not
  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
  // them before their children by sorting the array.
  dirtyComponents.sort(mountOrderComparator);

  for (var i = 0; i < len; i++) {
    // If a component is unmounted before pending changes apply, it will still
    // be here, but we assume that it has cleared its _pendingCallbacks and
    // that performUpdateIfNecessary is a noop.
    var component = dirtyComponents[i];

    // If performUpdateIfNecessary happens to enqueue any new updates, we
    // shouldn't execute the callbacks until the next render happens, so
    // stash the callbacks first
    var callbacks = component._pendingCallbacks;
    component._pendingCallbacks = null;

    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction);

    if (callbacks) {
      for (var j = 0; j < callbacks.length; j++) {
        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());
      }
    }
  }
}

var flushBatchedUpdates = function () {
  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
  // array and perform any updates enqueued by mount-ready handlers (i.e.,
  // componentDidUpdate) but we need to check here too in order to catch
  // updates enqueued by setState callbacks and asap calls.
  while (dirtyComponents.length || asapEnqueued) {
    if (dirtyComponents.length) {
      var transaction = ReactUpdatesFlushTransaction.getPooled();
      transaction.perform(runBatchedUpdates, null, transaction);
      ReactUpdatesFlushTransaction.release(transaction);
    }

    if (asapEnqueued) {
      asapEnqueued = false;
      var queue = asapCallbackQueue;
      asapCallbackQueue = CallbackQueue.getPooled();
      queue.notifyAll();
      CallbackQueue.release(queue);
    }
  }
};
flushBatchedUpdates = ReactPerf.measure('ReactUpdates', 'flushBatchedUpdates', flushBatchedUpdates);

/**
 * Mark a component as needing a rerender, adding an optional callback to a
 * list of functions which will be executed once the rerender occurs.
 */
function enqueueUpdate(component) {
  ensureInjected();

  // Various parts of our code (such as ReactCompositeComponent's
  // _renderValidatedComponent) assume that calls to render aren't nested;
  // verify that that's the case. (This is called by each top-level update
  // function, like setProps, setState, forceUpdate, etc.; creation and
  // destruction of top-level components is guarded in ReactMount.)

  if (!batchingStrategy.isBatchingUpdates) {
    batchingStrategy.batchedUpdates(enqueueUpdate, component);
    return;
  }

  dirtyComponents.push(component);
}

/**
 * Enqueue a callback to be run at the end of the current batching cycle. Throws
 * if no updates are currently being performed.
 */
function asap(callback, context) {
  !batchingStrategy.isBatchingUpdates ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' + 'updates are not being batched.') : invariant(false) : undefined;
  asapCallbackQueue.enqueue(callback, context);
  asapEnqueued = true;
}

var ReactUpdatesInjection = {
  injectReconcileTransaction: function (ReconcileTransaction) {
    !ReconcileTransaction ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : invariant(false) : undefined;
    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
  },

  injectBatchingStrategy: function (_batchingStrategy) {
    !_batchingStrategy ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batching strategy') : invariant(false) : undefined;
    !(typeof _batchingStrategy.batchedUpdates === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : invariant(false) : undefined;
    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : invariant(false) : undefined;
    batchingStrategy = _batchingStrategy;
  }
};

var ReactUpdates = {
  /**
   * React references `ReactReconcileTransaction` using this property in order
   * to allow dependency injection.
   *
   * @internal
   */
  ReactReconcileTransaction: null,

  batchedUpdates: batchedUpdates,
  enqueueUpdate: enqueueUpdate,
  flushBatchedUpdates: flushBatchedUpdates,
  injection: ReactUpdatesInjection,
  asap: asap
};

module.exports = ReactUpdates;
}).call(this,require('_process'))

},{"./CallbackQueue":12,"./Object.assign":29,"./PooledClass":30,"./ReactPerf":78,"./ReactReconciler":83,"./Transaction":107,"_process":6,"fbjs/lib/invariant":150}],91:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactVersion
 */

'use strict';

module.exports = '0.14.0';
},{}],92:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SVGDOMPropertyConfig
 */

'use strict';

var DOMProperty = require('./DOMProperty');

var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;

var NS = {
  xlink: 'http://www.w3.org/1999/xlink',
  xml: 'http://www.w3.org/XML/1998/namespace'
};

var SVGDOMPropertyConfig = {
  Properties: {
    clipPath: MUST_USE_ATTRIBUTE,
    cx: MUST_USE_ATTRIBUTE,
    cy: MUST_USE_ATTRIBUTE,
    d: MUST_USE_ATTRIBUTE,
    dx: MUST_USE_ATTRIBUTE,
    dy: MUST_USE_ATTRIBUTE,
    fill: MUST_USE_ATTRIBUTE,
    fillOpacity: MUST_USE_ATTRIBUTE,
    fontFamily: MUST_USE_ATTRIBUTE,
    fontSize: MUST_USE_ATTRIBUTE,
    fx: MUST_USE_ATTRIBUTE,
    fy: MUST_USE_ATTRIBUTE,
    gradientTransform: MUST_USE_ATTRIBUTE,
    gradientUnits: MUST_USE_ATTRIBUTE,
    markerEnd: MUST_USE_ATTRIBUTE,
    markerMid: MUST_USE_ATTRIBUTE,
    markerStart: MUST_USE_ATTRIBUTE,
    offset: MUST_USE_ATTRIBUTE,
    opacity: MUST_USE_ATTRIBUTE,
    patternContentUnits: MUST_USE_ATTRIBUTE,
    patternUnits: MUST_USE_ATTRIBUTE,
    points: MUST_USE_ATTRIBUTE,
    preserveAspectRatio: MUST_USE_ATTRIBUTE,
    r: MUST_USE_ATTRIBUTE,
    rx: MUST_USE_ATTRIBUTE,
    ry: MUST_USE_ATTRIBUTE,
    spreadMethod: MUST_USE_ATTRIBUTE,
    stopColor: MUST_USE_ATTRIBUTE,
    stopOpacity: MUST_USE_ATTRIBUTE,
    stroke: MUST_USE_ATTRIBUTE,
    strokeDasharray: MUST_USE_ATTRIBUTE,
    strokeLinecap: MUST_USE_ATTRIBUTE,
    strokeOpacity: MUST_USE_ATTRIBUTE,
    strokeWidth: MUST_USE_ATTRIBUTE,
    textAnchor: MUST_USE_ATTRIBUTE,
    transform: MUST_USE_ATTRIBUTE,
    version: MUST_USE_ATTRIBUTE,
    viewBox: MUST_USE_ATTRIBUTE,
    x1: MUST_USE_ATTRIBUTE,
    x2: MUST_USE_ATTRIBUTE,
    x: MUST_USE_ATTRIBUTE,
    xlinkActuate: MUST_USE_ATTRIBUTE,
    xlinkArcrole: MUST_USE_ATTRIBUTE,
    xlinkHref: MUST_USE_ATTRIBUTE,
    xlinkRole: MUST_USE_ATTRIBUTE,
    xlinkShow: MUST_USE_ATTRIBUTE,
    xlinkTitle: MUST_USE_ATTRIBUTE,
    xlinkType: MUST_USE_ATTRIBUTE,
    xmlBase: MUST_USE_ATTRIBUTE,
    xmlLang: MUST_USE_ATTRIBUTE,
    xmlSpace: MUST_USE_ATTRIBUTE,
    y1: MUST_USE_ATTRIBUTE,
    y2: MUST_USE_ATTRIBUTE,
    y: MUST_USE_ATTRIBUTE
  },
  DOMAttributeNamespaces: {
    xlinkActuate: NS.xlink,
    xlinkArcrole: NS.xlink,
    xlinkHref: NS.xlink,
    xlinkRole: NS.xlink,
    xlinkShow: NS.xlink,
    xlinkTitle: NS.xlink,
    xlinkType: NS.xlink,
    xmlBase: NS.xml,
    xmlLang: NS.xml,
    xmlSpace: NS.xml
  },
  DOMAttributeNames: {
    clipPath: 'clip-path',
    fillOpacity: 'fill-opacity',
    fontFamily: 'font-family',
    fontSize: 'font-size',
    gradientTransform: 'gradientTransform',
    gradientUnits: 'gradientUnits',
    markerEnd: 'marker-end',
    markerMid: 'marker-mid',
    markerStart: 'marker-start',
    patternContentUnits: 'patternContentUnits',
    patternUnits: 'patternUnits',
    preserveAspectRatio: 'preserveAspectRatio',
    spreadMethod: 'spreadMethod',
    stopColor: 'stop-color',
    stopOpacity: 'stop-opacity',
    strokeDasharray: 'stroke-dasharray',
    strokeLinecap: 'stroke-linecap',
    strokeOpacity: 'stroke-opacity',
    strokeWidth: 'stroke-width',
    textAnchor: 'text-anchor',
    viewBox: 'viewBox',
    xlinkActuate: 'xlink:actuate',
    xlinkArcrole: 'xlink:arcrole',
    xlinkHref: 'xlink:href',
    xlinkRole: 'xlink:role',
    xlinkShow: 'xlink:show',
    xlinkTitle: 'xlink:title',
    xlinkType: 'xlink:type',
    xmlBase: 'xml:base',
    xmlLang: 'xml:lang',
    xmlSpace: 'xml:space'
  }
};

module.exports = SVGDOMPropertyConfig;
},{"./DOMProperty":16}],93:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SelectEventPlugin
 */

'use strict';

var EventConstants = require('./EventConstants');
var EventPropagators = require('./EventPropagators');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var ReactInputSelection = require('./ReactInputSelection');
var SyntheticEvent = require('./SyntheticEvent');

var getActiveElement = require('fbjs/lib/getActiveElement');
var isTextInputElement = require('./isTextInputElement');
var keyOf = require('fbjs/lib/keyOf');
var shallowEqual = require('fbjs/lib/shallowEqual');

var topLevelTypes = EventConstants.topLevelTypes;

var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;

var eventTypes = {
  select: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onSelect: null }),
      captured: keyOf({ onSelectCapture: null })
    },
    dependencies: [topLevelTypes.topBlur, topLevelTypes.topContextMenu, topLevelTypes.topFocus, topLevelTypes.topKeyDown, topLevelTypes.topMouseDown, topLevelTypes.topMouseUp, topLevelTypes.topSelectionChange]
  }
};

var activeElement = null;
var activeElementID = null;
var lastSelection = null;
var mouseDown = false;

// Track whether a listener exists for this plugin. If none exist, we do
// not extract events.
var hasListener = false;
var ON_SELECT_KEY = keyOf({ onSelect: null });

/**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getSelection(node) {
  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {
    return {
      start: node.selectionStart,
      end: node.selectionEnd
    };
  } else if (window.getSelection) {
    var selection = window.getSelection();
    return {
      anchorNode: selection.anchorNode,
      anchorOffset: selection.anchorOffset,
      focusNode: selection.focusNode,
      focusOffset: selection.focusOffset
    };
  } else if (document.selection) {
    var range = document.selection.createRange();
    return {
      parentElement: range.parentElement(),
      text: range.text,
      top: range.boundingTop,
      left: range.boundingLeft
    };
  }
}

/**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @return {?SyntheticEvent}
 */
function constructSelectEvent(nativeEvent, nativeEventTarget) {
  // Ensure we have the right element, and that the user is not dragging a
  // selection (this matches native `select` event behavior). In HTML5, select
  // fires only on input and textarea thus if there's no focused element we
  // won't dispatch.
  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {
    return null;
  }

  // Only fire when selection has actually changed.
  var currentSelection = getSelection(activeElement);
  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
    lastSelection = currentSelection;

    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementID, nativeEvent, nativeEventTarget);

    syntheticEvent.type = 'select';
    syntheticEvent.target = activeElement;

    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

    return syntheticEvent;
  }

  return null;
}

/**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */
var SelectEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
    if (!hasListener) {
      return null;
    }

    switch (topLevelType) {
      // Track the input node that has focus.
      case topLevelTypes.topFocus:
        if (isTextInputElement(topLevelTarget) || topLevelTarget.contentEditable === 'true') {
          activeElement = topLevelTarget;
          activeElementID = topLevelTargetID;
          lastSelection = null;
        }
        break;
      case topLevelTypes.topBlur:
        activeElement = null;
        activeElementID = null;
        lastSelection = null;
        break;

      // Don't fire the event while the user is dragging. This matches the
      // semantics of the native select event.
      case topLevelTypes.topMouseDown:
        mouseDown = true;
        break;
      case topLevelTypes.topContextMenu:
      case topLevelTypes.topMouseUp:
        mouseDown = false;
        return constructSelectEvent(nativeEvent, nativeEventTarget);

      // Chrome and IE fire non-standard event when selection is changed (and
      // sometimes when it hasn't). IE's event fires out of order with respect
      // to key and input events on deletion, so we discard it.
      //
      // Firefox doesn't support selectionchange, so check selection status
      // after each key entry. The selection changes after keydown and before
      // keyup, but we check on keydown as well in the case of holding down a
      // key, when multiple keydown events are fired but only one keyup is.
      // This is also our approach for IE handling, for the reason above.
      case topLevelTypes.topSelectionChange:
        if (skipSelectionChangeEvent) {
          break;
        }
      // falls through
      case topLevelTypes.topKeyDown:
      case topLevelTypes.topKeyUp:
        return constructSelectEvent(nativeEvent, nativeEventTarget);
    }

    return null;
  },

  didPutListener: function (id, registrationName, listener) {
    if (registrationName === ON_SELECT_KEY) {
      hasListener = true;
    }
  }
};

module.exports = SelectEventPlugin;
},{"./EventConstants":21,"./EventPropagators":25,"./ReactInputSelection":67,"./SyntheticEvent":99,"./isTextInputElement":126,"fbjs/lib/ExecutionEnvironment":136,"fbjs/lib/getActiveElement":145,"fbjs/lib/keyOf":154,"fbjs/lib/shallowEqual":159}],94:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ServerReactRootIndex
 * @typechecks
 */

'use strict';

/**
 * Size of the reactRoot ID space. We generate random numbers for React root
 * IDs and if there's a collision the events and DOM update system will
 * get confused. In the future we need a way to generate GUIDs but for
 * now this will work on a smaller scale.
 */
var GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);

var ServerReactRootIndex = {
  createReactRootIndex: function () {
    return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);
  }
};

module.exports = ServerReactRootIndex;
},{}],95:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SimpleEventPlugin
 */

'use strict';

var EventConstants = require('./EventConstants');
var EventListener = require('fbjs/lib/EventListener');
var EventPropagators = require('./EventPropagators');
var ReactMount = require('./ReactMount');
var SyntheticClipboardEvent = require('./SyntheticClipboardEvent');
var SyntheticEvent = require('./SyntheticEvent');
var SyntheticFocusEvent = require('./SyntheticFocusEvent');
var SyntheticKeyboardEvent = require('./SyntheticKeyboardEvent');
var SyntheticMouseEvent = require('./SyntheticMouseEvent');
var SyntheticDragEvent = require('./SyntheticDragEvent');
var SyntheticTouchEvent = require('./SyntheticTouchEvent');
var SyntheticUIEvent = require('./SyntheticUIEvent');
var SyntheticWheelEvent = require('./SyntheticWheelEvent');

var emptyFunction = require('fbjs/lib/emptyFunction');
var getEventCharCode = require('./getEventCharCode');
var invariant = require('fbjs/lib/invariant');
var keyOf = require('fbjs/lib/keyOf');

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  abort: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onAbort: true }),
      captured: keyOf({ onAbortCapture: true })
    }
  },
  blur: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onBlur: true }),
      captured: keyOf({ onBlurCapture: true })
    }
  },
  canPlay: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onCanPlay: true }),
      captured: keyOf({ onCanPlayCapture: true })
    }
  },
  canPlayThrough: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onCanPlayThrough: true }),
      captured: keyOf({ onCanPlayThroughCapture: true })
    }
  },
  click: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onClick: true }),
      captured: keyOf({ onClickCapture: true })
    }
  },
  contextMenu: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onContextMenu: true }),
      captured: keyOf({ onContextMenuCapture: true })
    }
  },
  copy: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onCopy: true }),
      captured: keyOf({ onCopyCapture: true })
    }
  },
  cut: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onCut: true }),
      captured: keyOf({ onCutCapture: true })
    }
  },
  doubleClick: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDoubleClick: true }),
      captured: keyOf({ onDoubleClickCapture: true })
    }
  },
  drag: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDrag: true }),
      captured: keyOf({ onDragCapture: true })
    }
  },
  dragEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDragEnd: true }),
      captured: keyOf({ onDragEndCapture: true })
    }
  },
  dragEnter: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDragEnter: true }),
      captured: keyOf({ onDragEnterCapture: true })
    }
  },
  dragExit: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDragExit: true }),
      captured: keyOf({ onDragExitCapture: true })
    }
  },
  dragLeave: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDragLeave: true }),
      captured: keyOf({ onDragLeaveCapture: true })
    }
  },
  dragOver: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDragOver: true }),
      captured: keyOf({ onDragOverCapture: true })
    }
  },
  dragStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDragStart: true }),
      captured: keyOf({ onDragStartCapture: true })
    }
  },
  drop: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDrop: true }),
      captured: keyOf({ onDropCapture: true })
    }
  },
  durationChange: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDurationChange: true }),
      captured: keyOf({ onDurationChangeCapture: true })
    }
  },
  emptied: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onEmptied: true }),
      captured: keyOf({ onEmptiedCapture: true })
    }
  },
  encrypted: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onEncrypted: true }),
      captured: keyOf({ onEncryptedCapture: true })
    }
  },
  ended: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onEnded: true }),
      captured: keyOf({ onEndedCapture: true })
    }
  },
  error: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onError: true }),
      captured: keyOf({ onErrorCapture: true })
    }
  },
  focus: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onFocus: true }),
      captured: keyOf({ onFocusCapture: true })
    }
  },
  input: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onInput: true }),
      captured: keyOf({ onInputCapture: true })
    }
  },
  keyDown: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onKeyDown: true }),
      captured: keyOf({ onKeyDownCapture: true })
    }
  },
  keyPress: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onKeyPress: true }),
      captured: keyOf({ onKeyPressCapture: true })
    }
  },
  keyUp: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onKeyUp: true }),
      captured: keyOf({ onKeyUpCapture: true })
    }
  },
  load: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onLoad: true }),
      captured: keyOf({ onLoadCapture: true })
    }
  },
  loadedData: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onLoadedData: true }),
      captured: keyOf({ onLoadedDataCapture: true })
    }
  },
  loadedMetadata: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onLoadedMetadata: true }),
      captured: keyOf({ onLoadedMetadataCapture: true })
    }
  },
  loadStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onLoadStart: true }),
      captured: keyOf({ onLoadStartCapture: true })
    }
  },
  // Note: We do not allow listening to mouseOver events. Instead, use the
  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
  mouseDown: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onMouseDown: true }),
      captured: keyOf({ onMouseDownCapture: true })
    }
  },
  mouseMove: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onMouseMove: true }),
      captured: keyOf({ onMouseMoveCapture: true })
    }
  },
  mouseOut: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onMouseOut: true }),
      captured: keyOf({ onMouseOutCapture: true })
    }
  },
  mouseOver: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onMouseOver: true }),
      captured: keyOf({ onMouseOverCapture: true })
    }
  },
  mouseUp: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onMouseUp: true }),
      captured: keyOf({ onMouseUpCapture: true })
    }
  },
  paste: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onPaste: true }),
      captured: keyOf({ onPasteCapture: true })
    }
  },
  pause: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onPause: true }),
      captured: keyOf({ onPauseCapture: true })
    }
  },
  play: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onPlay: true }),
      captured: keyOf({ onPlayCapture: true })
    }
  },
  playing: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onPlaying: true }),
      captured: keyOf({ onPlayingCapture: true })
    }
  },
  progress: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onProgress: true }),
      captured: keyOf({ onProgressCapture: true })
    }
  },
  rateChange: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onRateChange: true }),
      captured: keyOf({ onRateChangeCapture: true })
    }
  },
  reset: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onReset: true }),
      captured: keyOf({ onResetCapture: true })
    }
  },
  scroll: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onScroll: true }),
      captured: keyOf({ onScrollCapture: true })
    }
  },
  seeked: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onSeeked: true }),
      captured: keyOf({ onSeekedCapture: true })
    }
  },
  seeking: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onSeeking: true }),
      captured: keyOf({ onSeekingCapture: true })
    }
  },
  stalled: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onStalled: true }),
      captured: keyOf({ onStalledCapture: true })
    }
  },
  submit: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onSubmit: true }),
      captured: keyOf({ onSubmitCapture: true })
    }
  },
  suspend: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onSuspend: true }),
      captured: keyOf({ onSuspendCapture: true })
    }
  },
  timeUpdate: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onTimeUpdate: true }),
      captured: keyOf({ onTimeUpdateCapture: true })
    }
  },
  touchCancel: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onTouchCancel: true }),
      captured: keyOf({ onTouchCancelCapture: true })
    }
  },
  touchEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onTouchEnd: true }),
      captured: keyOf({ onTouchEndCapture: true })
    }
  },
  touchMove: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onTouchMove: true }),
      captured: keyOf({ onTouchMoveCapture: true })
    }
  },
  touchStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onTouchStart: true }),
      captured: keyOf({ onTouchStartCapture: true })
    }
  },
  volumeChange: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onVolumeChange: true }),
      captured: keyOf({ onVolumeChangeCapture: true })
    }
  },
  waiting: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onWaiting: true }),
      captured: keyOf({ onWaitingCapture: true })
    }
  },
  wheel: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onWheel: true }),
      captured: keyOf({ onWheelCapture: true })
    }
  }
};

var topLevelEventsToDispatchConfig = {
  topAbort: eventTypes.abort,
  topBlur: eventTypes.blur,
  topCanPlay: eventTypes.canPlay,
  topCanPlayThrough: eventTypes.canPlayThrough,
  topClick: eventTypes.click,
  topContextMenu: eventTypes.contextMenu,
  topCopy: eventTypes.copy,
  topCut: eventTypes.cut,
  topDoubleClick: eventTypes.doubleClick,
  topDrag: eventTypes.drag,
  topDragEnd: eventTypes.dragEnd,
  topDragEnter: eventTypes.dragEnter,
  topDragExit: eventTypes.dragExit,
  topDragLeave: eventTypes.dragLeave,
  topDragOver: eventTypes.dragOver,
  topDragStart: eventTypes.dragStart,
  topDrop: eventTypes.drop,
  topDurationChange: eventTypes.durationChange,
  topEmptied: eventTypes.emptied,
  topEncrypted: eventTypes.encrypted,
  topEnded: eventTypes.ended,
  topError: eventTypes.error,
  topFocus: eventTypes.focus,
  topInput: eventTypes.input,
  topKeyDown: eventTypes.keyDown,
  topKeyPress: eventTypes.keyPress,
  topKeyUp: eventTypes.keyUp,
  topLoad: eventTypes.load,
  topLoadedData: eventTypes.loadedData,
  topLoadedMetadata: eventTypes.loadedMetadata,
  topLoadStart: eventTypes.loadStart,
  topMouseDown: eventTypes.mouseDown,
  topMouseMove: eventTypes.mouseMove,
  topMouseOut: eventTypes.mouseOut,
  topMouseOver: eventTypes.mouseOver,
  topMouseUp: eventTypes.mouseUp,
  topPaste: eventTypes.paste,
  topPause: eventTypes.pause,
  topPlay: eventTypes.play,
  topPlaying: eventTypes.playing,
  topProgress: eventTypes.progress,
  topRateChange: eventTypes.rateChange,
  topReset: eventTypes.reset,
  topScroll: eventTypes.scroll,
  topSeeked: eventTypes.seeked,
  topSeeking: eventTypes.seeking,
  topStalled: eventTypes.stalled,
  topSubmit: eventTypes.submit,
  topSuspend: eventTypes.suspend,
  topTimeUpdate: eventTypes.timeUpdate,
  topTouchCancel: eventTypes.touchCancel,
  topTouchEnd: eventTypes.touchEnd,
  topTouchMove: eventTypes.touchMove,
  topTouchStart: eventTypes.touchStart,
  topVolumeChange: eventTypes.volumeChange,
  topWaiting: eventTypes.waiting,
  topWheel: eventTypes.wheel
};

for (var type in topLevelEventsToDispatchConfig) {
  topLevelEventsToDispatchConfig[type].dependencies = [type];
}

var ON_CLICK_KEY = keyOf({ onClick: null });
var onClickListeners = {};

var SimpleEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
    if (!dispatchConfig) {
      return null;
    }
    var EventConstructor;
    switch (topLevelType) {
      case topLevelTypes.topAbort:
      case topLevelTypes.topCanPlay:
      case topLevelTypes.topCanPlayThrough:
      case topLevelTypes.topDurationChange:
      case topLevelTypes.topEmptied:
      case topLevelTypes.topEncrypted:
      case topLevelTypes.topEnded:
      case topLevelTypes.topError:
      case topLevelTypes.topInput:
      case topLevelTypes.topLoad:
      case topLevelTypes.topLoadedData:
      case topLevelTypes.topLoadedMetadata:
      case topLevelTypes.topLoadStart:
      case topLevelTypes.topPause:
      case topLevelTypes.topPlay:
      case topLevelTypes.topPlaying:
      case topLevelTypes.topProgress:
      case topLevelTypes.topRateChange:
      case topLevelTypes.topReset:
      case topLevelTypes.topSeeked:
      case topLevelTypes.topSeeking:
      case topLevelTypes.topStalled:
      case topLevelTypes.topSubmit:
      case topLevelTypes.topSuspend:
      case topLevelTypes.topTimeUpdate:
      case topLevelTypes.topVolumeChange:
      case topLevelTypes.topWaiting:
        // HTML Events
        // @see http://www.w3.org/TR/html5/index.html#events-0
        EventConstructor = SyntheticEvent;
        break;
      case topLevelTypes.topKeyPress:
        // FireFox creates a keypress event for function keys too. This removes
        // the unwanted keypress events. Enter is however both printable and
        // non-printable. One would expect Tab to be as well (but it isn't).
        if (getEventCharCode(nativeEvent) === 0) {
          return null;
        }
      /* falls through */
      case topLevelTypes.topKeyDown:
      case topLevelTypes.topKeyUp:
        EventConstructor = SyntheticKeyboardEvent;
        break;
      case topLevelTypes.topBlur:
      case topLevelTypes.topFocus:
        EventConstructor = SyntheticFocusEvent;
        break;
      case topLevelTypes.topClick:
        // Firefox creates a click event on right mouse clicks. This removes the
        // unwanted click events.
        if (nativeEvent.button === 2) {
          return null;
        }
      /* falls through */
      case topLevelTypes.topContextMenu:
      case topLevelTypes.topDoubleClick:
      case topLevelTypes.topMouseDown:
      case topLevelTypes.topMouseMove:
      case topLevelTypes.topMouseOut:
      case topLevelTypes.topMouseOver:
      case topLevelTypes.topMouseUp:
        EventConstructor = SyntheticMouseEvent;
        break;
      case topLevelTypes.topDrag:
      case topLevelTypes.topDragEnd:
      case topLevelTypes.topDragEnter:
      case topLevelTypes.topDragExit:
      case topLevelTypes.topDragLeave:
      case topLevelTypes.topDragOver:
      case topLevelTypes.topDragStart:
      case topLevelTypes.topDrop:
        EventConstructor = SyntheticDragEvent;
        break;
      case topLevelTypes.topTouchCancel:
      case topLevelTypes.topTouchEnd:
      case topLevelTypes.topTouchMove:
      case topLevelTypes.topTouchStart:
        EventConstructor = SyntheticTouchEvent;
        break;
      case topLevelTypes.topScroll:
        EventConstructor = SyntheticUIEvent;
        break;
      case topLevelTypes.topWheel:
        EventConstructor = SyntheticWheelEvent;
        break;
      case topLevelTypes.topCopy:
      case topLevelTypes.topCut:
      case topLevelTypes.topPaste:
        EventConstructor = SyntheticClipboardEvent;
        break;
    }
    !EventConstructor ? process.env.NODE_ENV !== 'production' ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : invariant(false) : undefined;
    var event = EventConstructor.getPooled(dispatchConfig, topLevelTargetID, nativeEvent, nativeEventTarget);
    EventPropagators.accumulateTwoPhaseDispatches(event);
    return event;
  },

  didPutListener: function (id, registrationName, listener) {
    // Mobile Safari does not fire properly bubble click events on
    // non-interactive elements, which means delegated click listeners do not
    // fire. The workaround for this bug involves attaching an empty click
    // listener on the target node.
    if (registrationName === ON_CLICK_KEY) {
      var node = ReactMount.getNode(id);
      if (!onClickListeners[id]) {
        onClickListeners[id] = EventListener.listen(node, 'click', emptyFunction);
      }
    }
  },

  willDeleteListener: function (id, registrationName) {
    if (registrationName === ON_CLICK_KEY) {
      onClickListeners[id].remove();
      delete onClickListeners[id];
    }
  }

};

module.exports = SimpleEventPlugin;
}).call(this,require('_process'))

},{"./EventConstants":21,"./EventPropagators":25,"./ReactMount":72,"./SyntheticClipboardEvent":96,"./SyntheticDragEvent":98,"./SyntheticEvent":99,"./SyntheticFocusEvent":100,"./SyntheticKeyboardEvent":102,"./SyntheticMouseEvent":103,"./SyntheticTouchEvent":104,"./SyntheticUIEvent":105,"./SyntheticWheelEvent":106,"./getEventCharCode":117,"_process":6,"fbjs/lib/EventListener":135,"fbjs/lib/emptyFunction":142,"fbjs/lib/invariant":150,"fbjs/lib/keyOf":154}],96:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticClipboardEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticEvent = require('./SyntheticEvent');

/**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */
var ClipboardEventInterface = {
  clipboardData: function (event) {
    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

module.exports = SyntheticClipboardEvent;
},{"./SyntheticEvent":99}],97:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticCompositionEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticEvent = require('./SyntheticEvent');

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */
var CompositionEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);

module.exports = SyntheticCompositionEvent;
},{"./SyntheticEvent":99}],98:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticDragEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticMouseEvent = require('./SyntheticMouseEvent');

/**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var DragEventInterface = {
  dataTransfer: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

module.exports = SyntheticDragEvent;
},{"./SyntheticMouseEvent":103}],99:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticEvent
 * @typechecks static-only
 */

'use strict';

var PooledClass = require('./PooledClass');

var assign = require('./Object.assign');
var emptyFunction = require('fbjs/lib/emptyFunction');
var warning = require('fbjs/lib/warning');

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var EventInterface = {
  type: null,
  // currentTarget is set when dispatching; no use in copying it here
  currentTarget: emptyFunction.thatReturnsNull,
  eventPhase: null,
  bubbles: null,
  cancelable: null,
  timeStamp: function (event) {
    return event.timeStamp || Date.now();
  },
  defaultPrevented: null,
  isTrusted: null
};

/**
 * Synthetic events are dispatched by event plugins, typically in response to a
 * top-level event delegation handler.
 *
 * These systems should generally use pooling to reduce the frequency of garbage
 * collection. The system should check `isPersistent` to determine whether the
 * event should be released into the pool after being dispatched. Users that
 * need a persisted event should invoke `persist`.
 *
 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
 * normalizing browser quirks. Subclasses do not necessarily have to implement a
 * DOM interface; custom application-specific events can also subclass this.
 *
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 */
function SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  this.dispatchConfig = dispatchConfig;
  this.dispatchMarker = dispatchMarker;
  this.nativeEvent = nativeEvent;
  this.target = nativeEventTarget;
  this.currentTarget = nativeEventTarget;

  var Interface = this.constructor.Interface;
  for (var propName in Interface) {
    if (!Interface.hasOwnProperty(propName)) {
      continue;
    }
    var normalize = Interface[propName];
    if (normalize) {
      this[propName] = normalize(nativeEvent);
    } else {
      this[propName] = nativeEvent[propName];
    }
  }

  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
  if (defaultPrevented) {
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  } else {
    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
  }
  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
}

assign(SyntheticEvent.prototype, {

  preventDefault: function () {
    this.defaultPrevented = true;
    var event = this.nativeEvent;
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(event, 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re calling `preventDefault` on a ' + 'released/nullified synthetic event. This is a no-op. See ' + 'https://fb.me/react-event-pooling for more information.') : undefined;
    }
    if (!event) {
      return;
    }

    if (event.preventDefault) {
      event.preventDefault();
    } else {
      event.returnValue = false;
    }
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  },

  stopPropagation: function () {
    var event = this.nativeEvent;
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(event, 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re calling `stopPropagation` on a ' + 'released/nullified synthetic event. This is a no-op. See ' + 'https://fb.me/react-event-pooling for more information.') : undefined;
    }
    if (!event) {
      return;
    }

    if (event.stopPropagation) {
      event.stopPropagation();
    } else {
      event.cancelBubble = true;
    }
    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
  },

  /**
   * We release all dispatched `SyntheticEvent`s after each event loop, adding
   * them back into the pool. This allows a way to hold onto a reference that
   * won't be added back into the pool.
   */
  persist: function () {
    this.isPersistent = emptyFunction.thatReturnsTrue;
  },

  /**
   * Checks if this event should be released back into the pool.
   *
   * @return {boolean} True if this should not be released, false otherwise.
   */
  isPersistent: emptyFunction.thatReturnsFalse,

  /**
   * `PooledClass` looks for `destructor` on each instance it releases.
   */
  destructor: function () {
    var Interface = this.constructor.Interface;
    for (var propName in Interface) {
      this[propName] = null;
    }
    this.dispatchConfig = null;
    this.dispatchMarker = null;
    this.nativeEvent = null;
  }

});

SyntheticEvent.Interface = EventInterface;

/**
 * Helper to reduce boilerplate when creating subclasses.
 *
 * @param {function} Class
 * @param {?object} Interface
 */
SyntheticEvent.augmentClass = function (Class, Interface) {
  var Super = this;

  var prototype = Object.create(Super.prototype);
  assign(prototype, Class.prototype);
  Class.prototype = prototype;
  Class.prototype.constructor = Class;

  Class.Interface = assign({}, Super.Interface, Interface);
  Class.augmentClass = Super.augmentClass;

  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);
};

PooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);

module.exports = SyntheticEvent;
}).call(this,require('_process'))

},{"./Object.assign":29,"./PooledClass":30,"_process":6,"fbjs/lib/emptyFunction":142,"fbjs/lib/warning":161}],100:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticFocusEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticUIEvent = require('./SyntheticUIEvent');

/**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var FocusEventInterface = {
  relatedTarget: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

module.exports = SyntheticFocusEvent;
},{"./SyntheticUIEvent":105}],101:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticInputEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticEvent = require('./SyntheticEvent');

/**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */
var InputEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);

module.exports = SyntheticInputEvent;
},{"./SyntheticEvent":99}],102:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticKeyboardEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticUIEvent = require('./SyntheticUIEvent');

var getEventCharCode = require('./getEventCharCode');
var getEventKey = require('./getEventKey');
var getEventModifierState = require('./getEventModifierState');

/**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var KeyboardEventInterface = {
  key: getEventKey,
  location: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  repeat: null,
  locale: null,
  getModifierState: getEventModifierState,
  // Legacy Interface
  charCode: function (event) {
    // `charCode` is the result of a KeyPress event and represents the value of
    // the actual printable character.

    // KeyPress is deprecated, but its replacement is not yet final and not
    // implemented in any major browser. Only KeyPress has charCode.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    return 0;
  },
  keyCode: function (event) {
    // `keyCode` is the result of a KeyDown/Up event and represents the value of
    // physical keyboard key.

    // The actual meaning of the value depends on the users' keyboard layout
    // which cannot be detected. Assuming that it is a US keyboard layout
    // provides a surprisingly accurate mapping for US and European users.
    // Due to this, it is left to the user to implement at this time.
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  },
  which: function (event) {
    // `which` is an alias for either `keyCode` or `charCode` depending on the
    // type of the event.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

module.exports = SyntheticKeyboardEvent;
},{"./SyntheticUIEvent":105,"./getEventCharCode":117,"./getEventKey":118,"./getEventModifierState":119}],103:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticMouseEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticUIEvent = require('./SyntheticUIEvent');
var ViewportMetrics = require('./ViewportMetrics');

var getEventModifierState = require('./getEventModifierState');

/**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var MouseEventInterface = {
  screenX: null,
  screenY: null,
  clientX: null,
  clientY: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  getModifierState: getEventModifierState,
  button: function (event) {
    // Webkit, Firefox, IE9+
    // which:  1 2 3
    // button: 0 1 2 (standard)
    var button = event.button;
    if ('which' in event) {
      return button;
    }
    // IE<9
    // which:  undefined
    // button: 0 0 0
    // button: 1 4 2 (onmouseup)
    return button === 2 ? 2 : button === 4 ? 1 : 0;
  },
  buttons: null,
  relatedTarget: function (event) {
    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
  },
  // "Proprietary" Interface.
  pageX: function (event) {
    return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;
  },
  pageY: function (event) {
    return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

module.exports = SyntheticMouseEvent;
},{"./SyntheticUIEvent":105,"./ViewportMetrics":108,"./getEventModifierState":119}],104:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticTouchEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticUIEvent = require('./SyntheticUIEvent');

var getEventModifierState = require('./getEventModifierState');

/**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */
var TouchEventInterface = {
  touches: null,
  targetTouches: null,
  changedTouches: null,
  altKey: null,
  metaKey: null,
  ctrlKey: null,
  shiftKey: null,
  getModifierState: getEventModifierState
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

module.exports = SyntheticTouchEvent;
},{"./SyntheticUIEvent":105,"./getEventModifierState":119}],105:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticUIEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticEvent = require('./SyntheticEvent');

var getEventTarget = require('./getEventTarget');

/**
 * @interface UIEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var UIEventInterface = {
  view: function (event) {
    if (event.view) {
      return event.view;
    }

    var target = getEventTarget(event);
    if (target != null && target.window === target) {
      // target is a window object
      return target;
    }

    var doc = target.ownerDocument;
    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
    if (doc) {
      return doc.defaultView || doc.parentWindow;
    } else {
      return window;
    }
  },
  detail: function (event) {
    return event.detail || 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

module.exports = SyntheticUIEvent;
},{"./SyntheticEvent":99,"./getEventTarget":120}],106:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticWheelEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticMouseEvent = require('./SyntheticMouseEvent');

/**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var WheelEventInterface = {
  deltaX: function (event) {
    return 'deltaX' in event ? event.deltaX :
    // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
  },
  deltaY: function (event) {
    return 'deltaY' in event ? event.deltaY :
    // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
    'wheelDeltaY' in event ? -event.wheelDeltaY :
    // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
    'wheelDelta' in event ? -event.wheelDelta : 0;
  },
  deltaZ: null,

  // Browsers without "deltaMode" is reporting in raw wheel delta where one
  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
  deltaMode: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticMouseEvent}
 */
function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

module.exports = SyntheticWheelEvent;
},{"./SyntheticMouseEvent":103}],107:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Transaction
 */

'use strict';

var invariant = require('fbjs/lib/invariant');

/**
 * `Transaction` creates a black box that is able to wrap any method such that
 * certain invariants are maintained before and after the method is invoked
 * (Even if an exception is thrown while invoking the wrapped method). Whoever
 * instantiates a transaction can provide enforcers of the invariants at
 * creation time. The `Transaction` class itself will supply one additional
 * automatic invariant for you - the invariant that any transaction instance
 * should not be run while it is already being run. You would typically create a
 * single instance of a `Transaction` for reuse multiple times, that potentially
 * is used to wrap several different methods. Wrappers are extremely simple -
 * they only require implementing two methods.
 *
 * <pre>
 *                       wrappers (injected at creation time)
 *                                      +        +
 *                                      |        |
 *                    +-----------------|--------|--------------+
 *                    |                 v        |              |
 *                    |      +---------------+   |              |
 *                    |   +--|    wrapper1   |---|----+         |
 *                    |   |  +---------------+   v    |         |
 *                    |   |          +-------------+  |         |
 *                    |   |     +----|   wrapper2  |--------+   |
 *                    |   |     |    +-------------+  |     |   |
 *                    |   |     |                     |     |   |
 *                    |   v     v                     v     v   | wrapper
 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | +---+ +---+   +---------+   +---+ +---+ |
 *                    |  initialize                    close    |
 *                    +-----------------------------------------+
 * </pre>
 *
 * Use cases:
 * - Preserving the input selection ranges before/after reconciliation.
 *   Restoring selection even in the event of an unexpected error.
 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
 *   while guaranteeing that afterwards, the event system is reactivated.
 * - Flushing a queue of collected DOM mutations to the main UI thread after a
 *   reconciliation takes place in a worker thread.
 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
 *   content.
 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
 * - (Future use case): Layout calculations before and after DOM updates.
 *
 * Transactional plugin API:
 * - A module that has an `initialize` method that returns any precomputation.
 * - and a `close` method that accepts the precomputation. `close` is invoked
 *   when the wrapped process is completed, or has failed.
 *
 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
 * that implement `initialize` and `close`.
 * @return {Transaction} Single transaction for reuse in thread.
 *
 * @class Transaction
 */
var Mixin = {
  /**
   * Sets up this instance so that it is prepared for collecting metrics. Does
   * so such that this setup method may be used on an instance that is already
   * initialized, in a way that does not consume additional memory upon reuse.
   * That can be useful if you decide to make your subclass of this mixin a
   * "PooledClass".
   */
  reinitializeTransaction: function () {
    this.transactionWrappers = this.getTransactionWrappers();
    if (this.wrapperInitData) {
      this.wrapperInitData.length = 0;
    } else {
      this.wrapperInitData = [];
    }
    this._isInTransaction = false;
  },

  _isInTransaction: false,

  /**
   * @abstract
   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
   */
  getTransactionWrappers: null,

  isInTransaction: function () {
    return !!this._isInTransaction;
  },

  /**
   * Executes the function within a safety window. Use this for the top level
   * methods that result in large amounts of computation/mutations that would
   * need to be safety checked. The optional arguments helps prevent the need
   * to bind in many cases.
   *
   * @param {function} method Member of scope to call.
   * @param {Object} scope Scope to invoke from.
   * @param {Object?=} a Argument to pass to the method.
   * @param {Object?=} b Argument to pass to the method.
   * @param {Object?=} c Argument to pass to the method.
   * @param {Object?=} d Argument to pass to the method.
   * @param {Object?=} e Argument to pass to the method.
   * @param {Object?=} f Argument to pass to the method.
   *
   * @return {*} Return value from `method`.
   */
  perform: function (method, scope, a, b, c, d, e, f) {
    !!this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there ' + 'is already an outstanding transaction.') : invariant(false) : undefined;
    var errorThrown;
    var ret;
    try {
      this._isInTransaction = true;
      // Catching errors makes debugging more difficult, so we start with
      // errorThrown set to true before setting it to false after calling
      // close -- if it's still set to true in the finally block, it means
      // one of these calls threw.
      errorThrown = true;
      this.initializeAll(0);
      ret = method.call(scope, a, b, c, d, e, f);
      errorThrown = false;
    } finally {
      try {
        if (errorThrown) {
          // If `method` throws, prefer to show that stack trace over any thrown
          // by invoking `closeAll`.
          try {
            this.closeAll(0);
          } catch (err) {}
        } else {
          // Since `method` didn't throw, we don't want to silence the exception
          // here.
          this.closeAll(0);
        }
      } finally {
        this._isInTransaction = false;
      }
    }
    return ret;
  },

  initializeAll: function (startIndex) {
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      try {
        // Catching errors makes debugging more difficult, so we start with the
        // OBSERVED_ERROR state before overwriting it with the real return value
        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
        // block, it means wrapper.initialize threw.
        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
      } finally {
        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
          // The initializer for wrapper i threw an error; initialize the
          // remaining wrappers but silence any exceptions from them to ensure
          // that the first error is the one to bubble up.
          try {
            this.initializeAll(i + 1);
          } catch (err) {}
        }
      }
    }
  },

  /**
   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
   * them the respective return values of `this.transactionWrappers.init[i]`
   * (`close`rs that correspond to initializers that failed will not be
   * invoked).
   */
  closeAll: function (startIndex) {
    !this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : invariant(false) : undefined;
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      var initData = this.wrapperInitData[i];
      var errorThrown;
      try {
        // Catching errors makes debugging more difficult, so we start with
        // errorThrown set to true before setting it to false after calling
        // close -- if it's still set to true in the finally block, it means
        // wrapper.close threw.
        errorThrown = true;
        if (initData !== Transaction.OBSERVED_ERROR && wrapper.close) {
          wrapper.close.call(this, initData);
        }
        errorThrown = false;
      } finally {
        if (errorThrown) {
          // The closer for wrapper i threw an error; close the remaining
          // wrappers but silence any exceptions from them to ensure that the
          // first error is the one to bubble up.
          try {
            this.closeAll(i + 1);
          } catch (e) {}
        }
      }
    }
    this.wrapperInitData.length = 0;
  }
};

var Transaction = {

  Mixin: Mixin,

  /**
   * Token to look for to determine if an error occurred.
   */
  OBSERVED_ERROR: {}

};

module.exports = Transaction;
}).call(this,require('_process'))

},{"_process":6,"fbjs/lib/invariant":150}],108:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ViewportMetrics
 */

'use strict';

var ViewportMetrics = {

  currentScrollLeft: 0,

  currentScrollTop: 0,

  refreshScrollValues: function (scrollPosition) {
    ViewportMetrics.currentScrollLeft = scrollPosition.x;
    ViewportMetrics.currentScrollTop = scrollPosition.y;
  }

};

module.exports = ViewportMetrics;
},{}],109:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule accumulateInto
 */

'use strict';

var invariant = require('fbjs/lib/invariant');

/**
 *
 * Accumulates items that must not be null or undefined into the first one. This
 * is used to conserve memory by avoiding array allocations, and thus sacrifices
 * API cleanness. Since `current` can be null before being passed in and not
 * null after this function, make sure to assign it back to `current`:
 *
 * `a = accumulateInto(a, b);`
 *
 * This API should be sparingly used. Try `accumulate` for something cleaner.
 *
 * @return {*|array<*>} An accumulation of items.
 */

function accumulateInto(current, next) {
  !(next != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : invariant(false) : undefined;
  if (current == null) {
    return next;
  }

  // Both are not empty. Warning: Never call x.concat(y) when you are not
  // certain that x is an Array (x could be a string with concat method).
  var currentIsArray = Array.isArray(current);
  var nextIsArray = Array.isArray(next);

  if (currentIsArray && nextIsArray) {
    current.push.apply(current, next);
    return current;
  }

  if (currentIsArray) {
    current.push(next);
    return current;
  }

  if (nextIsArray) {
    // A bit too dangerous to mutate `next`.
    return [current].concat(next);
  }

  return [current, next];
}

module.exports = accumulateInto;
}).call(this,require('_process'))

},{"_process":6,"fbjs/lib/invariant":150}],110:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule adler32
 */

'use strict';

var MOD = 65521;

// adler32 is not cryptographically strong, and is only used to sanity check that
// markup generated on the server matches the markup generated on the client.
// This implementation (a modified version of the SheetJS version) has been optimized
// for our use case, at the expense of conforming to the adler32 specification
// for non-ascii inputs.
function adler32(data) {
  var a = 1;
  var b = 0;
  var i = 0;
  var l = data.length;
  var m = l & ~0x3;
  while (i < m) {
    for (; i < Math.min(i + 4096, m); i += 4) {
      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));
    }
    a %= MOD;
    b %= MOD;
  }
  for (; i < l; i++) {
    b += a += data.charCodeAt(i);
  }
  a %= MOD;
  b %= MOD;
  return a | b << 16;
}

module.exports = adler32;
},{}],111:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule dangerousStyleValue
 * @typechecks static-only
 */

'use strict';

var CSSProperty = require('./CSSProperty');

var isUnitlessNumber = CSSProperty.isUnitlessNumber;

/**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @return {string} Normalized style value with dimensions applied.
 */
function dangerousStyleValue(name, value) {
  // Note that we've removed escapeTextForBrowser() calls here since the
  // whole string will be escaped when the attribute is injected into
  // the markup. If you provide unsafe user data here they can inject
  // arbitrary CSS which may be problematic (I couldn't repro this):
  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
  // This is not an XSS hole but instead a potential CSS injection issue
  // which has lead to a greater discussion about how we're going to
  // trust URLs moving forward. See #2115901

  var isEmpty = value == null || typeof value === 'boolean' || value === '';
  if (isEmpty) {
    return '';
  }

  var isNonNumeric = isNaN(value);
  if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
    return '' + value; // cast to string
  }

  if (typeof value === 'string') {
    value = value.trim();
  }
  return value + 'px';
}

module.exports = dangerousStyleValue;
},{"./CSSProperty":10}],112:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule deprecated
 */

'use strict';

var assign = require('./Object.assign');
var warning = require('fbjs/lib/warning');

/**
 * This will log a single deprecation notice per function and forward the call
 * on to the new API.
 *
 * @param {string} fnName The name of the function
 * @param {string} newModule The module that fn will exist in
 * @param {string} newPackage The module that fn will exist in
 * @param {*} ctx The context this forwarded call should run in
 * @param {function} fn The function to forward on to
 * @return {function} The function that will warn once and then call fn
 */
function deprecated(fnName, newModule, newPackage, ctx, fn) {
  var warned = false;
  if (process.env.NODE_ENV !== 'production') {
    var newFn = function () {
      process.env.NODE_ENV !== 'production' ? warning(warned,
      // Require examples in this string must be split to prevent React's
      // build tools from mistaking them for real requires.
      // Otherwise the build tools will attempt to build a '%s' module.
      'React.%s is deprecated. Please use %s.%s from require' + '(\'%s\') ' + 'instead.', fnName, newModule, fnName, newPackage) : undefined;
      warned = true;
      return fn.apply(ctx, arguments);
    };
    // We need to make sure all properties of the original fn are copied over.
    // In particular, this is needed to support PropTypes
    return assign(newFn, fn);
  }

  return fn;
}

module.exports = deprecated;
}).call(this,require('_process'))

},{"./Object.assign":29,"_process":6,"fbjs/lib/warning":161}],113:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule escapeTextContentForBrowser
 */

'use strict';

var ESCAPE_LOOKUP = {
  '&': '&amp;',
  '>': '&gt;',
  '<': '&lt;',
  '"': '&quot;',
  '\'': '&#x27;'
};

var ESCAPE_REGEX = /[&><"']/g;

function escaper(match) {
  return ESCAPE_LOOKUP[match];
}

/**
 * Escapes text to prevent scripting attacks.
 *
 * @param {*} text Text value to escape.
 * @return {string} An escaped string.
 */
function escapeTextContentForBrowser(text) {
  return ('' + text).replace(ESCAPE_REGEX, escaper);
}

module.exports = escapeTextContentForBrowser;
},{}],114:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule findDOMNode
 * @typechecks static-only
 */

'use strict';

var ReactCurrentOwner = require('./ReactCurrentOwner');
var ReactInstanceMap = require('./ReactInstanceMap');
var ReactMount = require('./ReactMount');

var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

/**
 * Returns the DOM node rendered by this element.
 *
 * @param {ReactComponent|DOMElement} componentOrElement
 * @return {?DOMElement} The root node of this element.
 */
function findDOMNode(componentOrElement) {
  if (process.env.NODE_ENV !== 'production') {
    var owner = ReactCurrentOwner.current;
    if (owner !== null) {
      process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing getDOMNode or findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : undefined;
      owner._warnedAboutRefsInRender = true;
    }
  }
  if (componentOrElement == null) {
    return null;
  }
  if (componentOrElement.nodeType === 1) {
    return componentOrElement;
  }
  if (ReactInstanceMap.has(componentOrElement)) {
    return ReactMount.getNodeFromInstance(componentOrElement);
  }
  !(componentOrElement.render == null || typeof componentOrElement.render !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findDOMNode was called on an unmounted component.') : invariant(false) : undefined;
  !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : invariant(false) : undefined;
}

module.exports = findDOMNode;
}).call(this,require('_process'))

},{"./ReactCurrentOwner":41,"./ReactInstanceMap":69,"./ReactMount":72,"_process":6,"fbjs/lib/invariant":150,"fbjs/lib/warning":161}],115:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule flattenChildren
 */

'use strict';

var traverseAllChildren = require('./traverseAllChildren');
var warning = require('fbjs/lib/warning');

/**
 * @param {function} traverseContext Context passed through traversal.
 * @param {?ReactComponent} child React child component.
 * @param {!string} name String name of key path to child.
 */
function flattenSingleChildIntoContext(traverseContext, child, name) {
  // We found a component instance.
  var result = traverseContext;
  var keyUnique = result[name] === undefined;
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', name) : undefined;
  }
  if (keyUnique && child != null) {
    result[name] = child;
  }
}

/**
 * Flattens children that are typically specified as `props.children`. Any null
 * children will not be included in the resulting object.
 * @return {!object} flattened children keyed by name.
 */
function flattenChildren(children) {
  if (children == null) {
    return children;
  }
  var result = {};
  traverseAllChildren(children, flattenSingleChildIntoContext, result);
  return result;
}

module.exports = flattenChildren;
}).call(this,require('_process'))

},{"./traverseAllChildren":133,"_process":6,"fbjs/lib/warning":161}],116:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule forEachAccumulated
 */

'use strict';

/**
 * @param {array} arr an "accumulation" of items which is either an Array or
 * a single item. Useful when paired with the `accumulate` module. This is a
 * simple utility that allows us to reason about a collection of items, but
 * handling the case when there is exactly one item (and we do not need to
 * allocate an array).
 */
var forEachAccumulated = function (arr, cb, scope) {
  if (Array.isArray(arr)) {
    arr.forEach(cb, scope);
  } else if (arr) {
    cb.call(scope, arr);
  }
};

module.exports = forEachAccumulated;
},{}],117:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventCharCode
 * @typechecks static-only
 */

'use strict';

/**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {number} Normalized `charCode` property.
 */
function getEventCharCode(nativeEvent) {
  var charCode;
  var keyCode = nativeEvent.keyCode;

  if ('charCode' in nativeEvent) {
    charCode = nativeEvent.charCode;

    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
    if (charCode === 0 && keyCode === 13) {
      charCode = 13;
    }
  } else {
    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
    charCode = keyCode;
  }

  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
  // Must not discard the (non-)printable Enter-key.
  if (charCode >= 32 || charCode === 13) {
    return charCode;
  }

  return 0;
}

module.exports = getEventCharCode;
},{}],118:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventKey
 * @typechecks static-only
 */

'use strict';

var getEventCharCode = require('./getEventCharCode');

/**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var normalizeKey = {
  'Esc': 'Escape',
  'Spacebar': ' ',
  'Left': 'ArrowLeft',
  'Up': 'ArrowUp',
  'Right': 'ArrowRight',
  'Down': 'ArrowDown',
  'Del': 'Delete',
  'Win': 'OS',
  'Menu': 'ContextMenu',
  'Apps': 'ContextMenu',
  'Scroll': 'ScrollLock',
  'MozPrintableKey': 'Unidentified'
};

/**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var translateToKey = {
  8: 'Backspace',
  9: 'Tab',
  12: 'Clear',
  13: 'Enter',
  16: 'Shift',
  17: 'Control',
  18: 'Alt',
  19: 'Pause',
  20: 'CapsLock',
  27: 'Escape',
  32: ' ',
  33: 'PageUp',
  34: 'PageDown',
  35: 'End',
  36: 'Home',
  37: 'ArrowLeft',
  38: 'ArrowUp',
  39: 'ArrowRight',
  40: 'ArrowDown',
  45: 'Insert',
  46: 'Delete',
  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
  144: 'NumLock',
  145: 'ScrollLock',
  224: 'Meta'
};

/**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */
function getEventKey(nativeEvent) {
  if (nativeEvent.key) {
    // Normalize inconsistent values reported by browsers due to
    // implementations of a working draft specification.

    // FireFox implements `key` but returns `MozPrintableKey` for all
    // printable characters (normalized to `Unidentified`), ignore it.
    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
    if (key !== 'Unidentified') {
      return key;
    }
  }

  // Browser does not implement `key`, polyfill as much of it as we can.
  if (nativeEvent.type === 'keypress') {
    var charCode = getEventCharCode(nativeEvent);

    // The enter-key is technically both printable and non-printable and can
    // thus be captured by `keypress`, no other non-printable key should.
    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
  }
  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
    // While user keyboard layout determines the actual meaning of each
    // `keyCode` value, almost all function keys have a universal value.
    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
  }
  return '';
}

module.exports = getEventKey;
},{"./getEventCharCode":117}],119:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventModifierState
 * @typechecks static-only
 */

'use strict';

/**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */

var modifierKeyToProp = {
  'Alt': 'altKey',
  'Control': 'ctrlKey',
  'Meta': 'metaKey',
  'Shift': 'shiftKey'
};

// IE8 does not implement getModifierState so we simply map it to the only
// modifier keys exposed by the event itself, does not support Lock-keys.
// Currently, all major browsers except Chrome seems to support Lock-keys.
function modifierStateGetter(keyArg) {
  var syntheticEvent = this;
  var nativeEvent = syntheticEvent.nativeEvent;
  if (nativeEvent.getModifierState) {
    return nativeEvent.getModifierState(keyArg);
  }
  var keyProp = modifierKeyToProp[keyArg];
  return keyProp ? !!nativeEvent[keyProp] : false;
}

function getEventModifierState(nativeEvent) {
  return modifierStateGetter;
}

module.exports = getEventModifierState;
},{}],120:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventTarget
 * @typechecks static-only
 */

'use strict';

/**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */
function getEventTarget(nativeEvent) {
  var target = nativeEvent.target || nativeEvent.srcElement || window;
  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
  // @see http://www.quirksmode.org/js/events_properties.html
  return target.nodeType === 3 ? target.parentNode : target;
}

module.exports = getEventTarget;
},{}],121:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getIteratorFn
 * @typechecks static-only
 */

'use strict';

/* global Symbol */
var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

/**
 * Returns the iterator method function contained on the iterable object.
 *
 * Be sure to invoke the function with the iterable as context:
 *
 *     var iteratorFn = getIteratorFn(myIterable);
 *     if (iteratorFn) {
 *       var iterator = iteratorFn.call(myIterable);
 *       ...
 *     }
 *
 * @param {?object} maybeIterable
 * @return {?function}
 */
function getIteratorFn(maybeIterable) {
  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
  if (typeof iteratorFn === 'function') {
    return iteratorFn;
  }
}

module.exports = getIteratorFn;
},{}],122:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getNodeForCharacterOffset
 */

'use strict';

/**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */
function getLeafNode(node) {
  while (node && node.firstChild) {
    node = node.firstChild;
  }
  return node;
}

/**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */
function getSiblingNode(node) {
  while (node) {
    if (node.nextSibling) {
      return node.nextSibling;
    }
    node = node.parentNode;
  }
}

/**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */
function getNodeForCharacterOffset(root, offset) {
  var node = getLeafNode(root);
  var nodeStart = 0;
  var nodeEnd = 0;

  while (node) {
    if (node.nodeType === 3) {
      nodeEnd = nodeStart + node.textContent.length;

      if (nodeStart <= offset && nodeEnd >= offset) {
        return {
          node: node,
          offset: offset - nodeStart
        };
      }

      nodeStart = nodeEnd;
    }

    node = getLeafNode(getSiblingNode(node));
  }
}

module.exports = getNodeForCharacterOffset;
},{}],123:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getTextContentAccessor
 */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var contentKey = null;

/**
 * Gets the key used to access text content on a DOM node.
 *
 * @return {?string} Key used to access text content.
 * @internal
 */
function getTextContentAccessor() {
  if (!contentKey && ExecutionEnvironment.canUseDOM) {
    // Prefer textContent to innerText because many browsers support both but
    // SVG <text> elements don't support innerText even when <div> does.
    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
  }
  return contentKey;
}

module.exports = getTextContentAccessor;
},{"fbjs/lib/ExecutionEnvironment":136}],124:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule instantiateReactComponent
 * @typechecks static-only
 */

'use strict';

var ReactCompositeComponent = require('./ReactCompositeComponent');
var ReactEmptyComponent = require('./ReactEmptyComponent');
var ReactNativeComponent = require('./ReactNativeComponent');

var assign = require('./Object.assign');
var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

// To avoid a cyclic dependency, we create the final class in this module
var ReactCompositeComponentWrapper = function () {};
assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent.Mixin, {
  _instantiateReactComponent: instantiateReactComponent
});

function getDeclarationErrorAddendum(owner) {
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

/**
 * Check if the type reference is a known internal type. I.e. not a user
 * provided composite type.
 *
 * @param {function} type
 * @return {boolean} Returns true if this is a valid internal type.
 */
function isInternalComponentType(type) {
  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
}

/**
 * Given a ReactNode, create an instance that will actually be mounted.
 *
 * @param {ReactNode} node
 * @return {object} A new instance of the element's constructor.
 * @protected
 */
function instantiateReactComponent(node) {
  var instance;

  if (node === null || node === false) {
    instance = new ReactEmptyComponent(instantiateReactComponent);
  } else if (typeof node === 'object') {
    var element = node;
    !(element && (typeof element.type === 'function' || typeof element.type === 'string')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element type is invalid: expected a string (for built-in components) ' + 'or a class/function (for composite components) but got: %s.%s', element.type == null ? element.type : typeof element.type, getDeclarationErrorAddendum(element._owner)) : invariant(false) : undefined;

    // Special case string values
    if (typeof element.type === 'string') {
      instance = ReactNativeComponent.createInternalComponent(element);
    } else if (isInternalComponentType(element.type)) {
      // This is temporarily available for custom components that are not string
      // representations. I.e. ART. Once those are updated to use the string
      // representation, we can drop this code path.
      instance = new element.type(element);
    } else {
      instance = new ReactCompositeComponentWrapper();
    }
  } else if (typeof node === 'string' || typeof node === 'number') {
    instance = ReactNativeComponent.createInstanceForText(node);
  } else {
    !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Encountered invalid React node of type %s', typeof node) : invariant(false) : undefined;
  }

  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(typeof instance.construct === 'function' && typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : undefined;
  }

  // Sets up the instance. This can probably just move into the constructor now.
  instance.construct(node);

  // These two fields are used by the DOM and ART diffing algorithms
  // respectively. Instead of using expandos on components, we should be
  // storing the state needed by the diffing algorithms elsewhere.
  instance._mountIndex = 0;
  instance._mountImage = null;

  if (process.env.NODE_ENV !== 'production') {
    instance._isOwnerNecessary = false;
    instance._warnedAboutRefsInRender = false;
  }

  // Internal instances should fully constructed at this point, so they should
  // not get any new fields added to them at this point.
  if (process.env.NODE_ENV !== 'production') {
    if (Object.preventExtensions) {
      Object.preventExtensions(instance);
    }
  }

  return instance;
}

module.exports = instantiateReactComponent;
}).call(this,require('_process'))

},{"./Object.assign":29,"./ReactCompositeComponent":40,"./ReactEmptyComponent":61,"./ReactNativeComponent":75,"_process":6,"fbjs/lib/invariant":150,"fbjs/lib/warning":161}],125:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isEventSupported
 */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var useHasFeature;
if (ExecutionEnvironment.canUseDOM) {
  useHasFeature = document.implementation && document.implementation.hasFeature &&
  // always returns true in newer browsers as per the standard.
  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
  document.implementation.hasFeature('', '') !== true;
}

/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @param {?boolean} capture Check if the capture phase is supported.
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
function isEventSupported(eventNameSuffix, capture) {
  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
    return false;
  }

  var eventName = 'on' + eventNameSuffix;
  var isSupported = (eventName in document);

  if (!isSupported) {
    var element = document.createElement('div');
    element.setAttribute(eventName, 'return;');
    isSupported = typeof element[eventName] === 'function';
  }

  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
    // This is the only way to test support for the `wheel` event in IE9+.
    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
  }

  return isSupported;
}

module.exports = isEventSupported;
},{"fbjs/lib/ExecutionEnvironment":136}],126:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isTextInputElement
 */

'use strict';

/**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */
var supportedInputTypes = {
  'color': true,
  'date': true,
  'datetime': true,
  'datetime-local': true,
  'email': true,
  'month': true,
  'number': true,
  'password': true,
  'range': true,
  'search': true,
  'tel': true,
  'text': true,
  'time': true,
  'url': true,
  'week': true
};

function isTextInputElement(elem) {
  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
  return nodeName && (nodeName === 'input' && supportedInputTypes[elem.type] || nodeName === 'textarea');
}

module.exports = isTextInputElement;
},{}],127:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule onlyChild
 */
'use strict';

var ReactElement = require('./ReactElement');

var invariant = require('fbjs/lib/invariant');

/**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection. The current implementation of this
 * function assumes that a single child gets passed without a wrapper, but the
 * purpose of this helper function is to abstract away the particular structure
 * of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactComponent} The first and only `ReactComponent` contained in the
 * structure.
 */
function onlyChild(children) {
  !ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'onlyChild must be passed a children with exactly one child.') : invariant(false) : undefined;
  return children;
}

module.exports = onlyChild;
}).call(this,require('_process'))

},{"./ReactElement":59,"_process":6,"fbjs/lib/invariant":150}],128:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule quoteAttributeValueForBrowser
 */

'use strict';

var escapeTextContentForBrowser = require('./escapeTextContentForBrowser');

/**
 * Escapes attribute value to prevent scripting attacks.
 *
 * @param {*} value Value to escape.
 * @return {string} An escaped string.
 */
function quoteAttributeValueForBrowser(value) {
  return '"' + escapeTextContentForBrowser(value) + '"';
}

module.exports = quoteAttributeValueForBrowser;
},{"./escapeTextContentForBrowser":113}],129:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
* @providesModule renderSubtreeIntoContainer
*/

'use strict';

var ReactMount = require('./ReactMount');

module.exports = ReactMount.renderSubtreeIntoContainer;
},{"./ReactMount":72}],130:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule setInnerHTML
 */

/* globals MSApp */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var WHITESPACE_TEST = /^[ \r\n\t\f]/;
var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

/**
 * Set the innerHTML property of a node, ensuring that whitespace is preserved
 * even in IE8.
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */
var setInnerHTML = function (node, html) {
  node.innerHTML = html;
};

// Win8 apps: Allow all html to be inserted
if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
  setInnerHTML = function (node, html) {
    MSApp.execUnsafeLocalFunction(function () {
      node.innerHTML = html;
    });
  };
}

if (ExecutionEnvironment.canUseDOM) {
  // IE8: When updating a just created node with innerHTML only leading
  // whitespace is removed. When updating an existing node with innerHTML
  // whitespace in root TextNodes is also collapsed.
  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

  // Feature detection; only IE8 is known to behave improperly like this.
  var testElement = document.createElement('div');
  testElement.innerHTML = ' ';
  if (testElement.innerHTML === '') {
    setInnerHTML = function (node, html) {
      // Magic theory: IE8 supposedly differentiates between added and updated
      // nodes when processing innerHTML, innerHTML on updated nodes suffers
      // from worse whitespace behavior. Re-adding a node like this triggers
      // the initial and more favorable whitespace behavior.
      // TODO: What to do on a detached node?
      if (node.parentNode) {
        node.parentNode.replaceChild(node, node);
      }

      // We also implement a workaround for non-visible tags disappearing into
      // thin air on IE8, this only happens if there is no visible text
      // in-front of the non-visible tags. Piggyback on the whitespace fix
      // and simply check if any non-visible tags appear in the source.
      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {
        // Recover leading whitespace by temporarily prepending any character.
        // \uFEFF has the potential advantage of being zero-width/invisible.
        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode
        // in hopes that this is preserved even if "\uFEFF" is transformed to
        // the actual Unicode character (by Babel, for example).
        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216
        node.innerHTML = String.fromCharCode(0xFEFF) + html;

        // deleteData leaves an empty `TextNode` which offsets the index of all
        // children. Definitely want to avoid this.
        var textNode = node.firstChild;
        if (textNode.data.length === 1) {
          node.removeChild(textNode);
        } else {
          textNode.deleteData(0, 1);
        }
      } else {
        node.innerHTML = html;
      }
    };
  }
}

module.exports = setInnerHTML;
},{"fbjs/lib/ExecutionEnvironment":136}],131:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule setTextContent
 */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var escapeTextContentForBrowser = require('./escapeTextContentForBrowser');
var setInnerHTML = require('./setInnerHTML');

/**
 * Set the textContent property of a node, ensuring that whitespace is preserved
 * even in IE8. innerText is a poor substitute for textContent and, among many
 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
 * as it should.
 *
 * @param {DOMElement} node
 * @param {string} text
 * @internal
 */
var setTextContent = function (node, text) {
  node.textContent = text;
};

if (ExecutionEnvironment.canUseDOM) {
  if (!('textContent' in document.documentElement)) {
    setTextContent = function (node, text) {
      setInnerHTML(node, escapeTextContentForBrowser(text));
    };
  }
}

module.exports = setTextContent;
},{"./escapeTextContentForBrowser":113,"./setInnerHTML":130,"fbjs/lib/ExecutionEnvironment":136}],132:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule shouldUpdateReactComponent
 * @typechecks static-only
 */

'use strict';

/**
 * Given a `prevElement` and `nextElement`, determines if the existing
 * instance should be updated as opposed to being destroyed or replaced by a new
 * instance. Both arguments are elements. This ensures that this logic can
 * operate on stateless trees without any backing instance.
 *
 * @param {?object} prevElement
 * @param {?object} nextElement
 * @return {boolean} True if the existing instance should be updated.
 * @protected
 */
function shouldUpdateReactComponent(prevElement, nextElement) {
  var prevEmpty = prevElement === null || prevElement === false;
  var nextEmpty = nextElement === null || nextElement === false;
  if (prevEmpty || nextEmpty) {
    return prevEmpty === nextEmpty;
  }

  var prevType = typeof prevElement;
  var nextType = typeof nextElement;
  if (prevType === 'string' || prevType === 'number') {
    return nextType === 'string' || nextType === 'number';
  } else {
    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
  }
  return false;
}

module.exports = shouldUpdateReactComponent;
},{}],133:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule traverseAllChildren
 */

'use strict';

var ReactCurrentOwner = require('./ReactCurrentOwner');
var ReactElement = require('./ReactElement');
var ReactInstanceHandles = require('./ReactInstanceHandles');

var getIteratorFn = require('./getIteratorFn');
var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

var SEPARATOR = ReactInstanceHandles.SEPARATOR;
var SUBSEPARATOR = ':';

/**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */

var userProvidedKeyEscaperLookup = {
  '=': '=0',
  '.': '=1',
  ':': '=2'
};

var userProvidedKeyEscapeRegex = /[=.:]/g;

var didWarnAboutMaps = false;

function userProvidedKeyEscaper(match) {
  return userProvidedKeyEscaperLookup[match];
}

/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */
function getComponentKey(component, index) {
  if (component && component.key != null) {
    // Explicit key
    return wrapUserProvidedKey(component.key);
  }
  // Implicit key determined by the index in the set
  return index.toString(36);
}

/**
 * Escape a component key so that it is safe to use in a reactid.
 *
 * @param {*} text Component key to be escaped.
 * @return {string} An escaped string.
 */
function escapeUserProvidedKey(text) {
  return ('' + text).replace(userProvidedKeyEscapeRegex, userProvidedKeyEscaper);
}

/**
 * Wrap a `key` value explicitly provided by the user to distinguish it from
 * implicitly-generated keys generated by a component's index in its parent.
 *
 * @param {string} key Value of a user-provided `key` attribute
 * @return {string}
 */
function wrapUserProvidedKey(key) {
  return '$' + escapeUserProvidedKey(key);
}

/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
  var type = typeof children;

  if (type === 'undefined' || type === 'boolean') {
    // All of the above are perceived as null.
    children = null;
  }

  if (children === null || type === 'string' || type === 'number' || ReactElement.isValidElement(children)) {
    callback(traverseContext, children,
    // If it's the only child, treat the name as if it was wrapped in an array
    // so that it's consistent if the number of children grows.
    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
    return 1;
  }

  var child;
  var nextName;
  var subtreeCount = 0; // Count of children found in the current subtree.
  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      nextName = nextNamePrefix + getComponentKey(child, i);
      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
    }
  } else {
    var iteratorFn = getIteratorFn(children);
    if (iteratorFn) {
      var iterator = iteratorFn.call(children);
      var step;
      if (iteratorFn !== children.entries) {
        var ii = 0;
        while (!(step = iterator.next()).done) {
          child = step.value;
          nextName = nextNamePrefix + getComponentKey(child, ii++);
          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
        }
      } else {
        if (process.env.NODE_ENV !== 'production') {
          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.') : undefined;
          didWarnAboutMaps = true;
        }
        // Iterator will provide entry [k,v] tuples rather than values.
        while (!(step = iterator.next()).done) {
          var entry = step.value;
          if (entry) {
            child = entry[1];
            nextName = nextNamePrefix + wrapUserProvidedKey(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
          }
        }
      }
    } else if (type === 'object') {
      var addendum = '';
      if (process.env.NODE_ENV !== 'production') {
        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
        if (children._isReactElement) {
          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
        }
        if (ReactCurrentOwner.current) {
          var name = ReactCurrentOwner.current.getName();
          if (name) {
            addendum += ' Check the render method of `' + name + '`.';
          }
        }
      }
      var childrenString = String(children);
      !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : invariant(false) : undefined;
    }
  }

  return subtreeCount;
}

/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', callback, traverseContext);
}

module.exports = traverseAllChildren;
}).call(this,require('_process'))

},{"./ReactCurrentOwner":41,"./ReactElement":59,"./ReactInstanceHandles":68,"./getIteratorFn":121,"_process":6,"fbjs/lib/invariant":150,"fbjs/lib/warning":161}],134:[function(require,module,exports){
(function (process){
/**
 * Copyright 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule validateDOMNesting
 */

'use strict';

var assign = require('./Object.assign');
var emptyFunction = require('fbjs/lib/emptyFunction');
var warning = require('fbjs/lib/warning');

var validateDOMNesting = emptyFunction;

if (process.env.NODE_ENV !== 'production') {
  // This validation code was written based on the HTML5 parsing spec:
  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
  //
  // Note: this does not catch all invalid nesting, nor does it try to (as it's
  // not clear what practical benefit doing so provides); instead, we warn only
  // for cases where the parser will give a parse tree differing from what React
  // intended. For example, <b><div></div></b> is invalid but we don't warn
  // because it still parses correctly; we do warn for other cases like nested
  // <p> tags where the beginning of the second element implicitly closes the
  // first, causing a confusing mess.

  // https://html.spec.whatwg.org/multipage/syntax.html#special
  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];

  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',

  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
  // TODO: Distinguish by namespace here -- for <title>, including it here
  // errs on the side of fewer warnings
  'foreignObject', 'desc', 'title'];

  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
  var buttonScopeTags = inScopeTags.concat(['button']);

  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];

  var emptyAncestorInfo = {
    parentTag: null,

    formTag: null,
    aTagInScope: null,
    buttonTagInScope: null,
    nobrTagInScope: null,
    pTagInButtonScope: null,

    listItemTagAutoclosing: null,
    dlItemTagAutoclosing: null
  };

  var updatedAncestorInfo = function (oldInfo, tag, instance) {
    var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
    var info = { tag: tag, instance: instance };

    if (inScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.aTagInScope = null;
      ancestorInfo.buttonTagInScope = null;
      ancestorInfo.nobrTagInScope = null;
    }
    if (buttonScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.pTagInButtonScope = null;
    }

    // See rules for 'li', 'dd', 'dt' start tags in
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
      ancestorInfo.listItemTagAutoclosing = null;
      ancestorInfo.dlItemTagAutoclosing = null;
    }

    ancestorInfo.parentTag = info;

    if (tag === 'form') {
      ancestorInfo.formTag = info;
    }
    if (tag === 'a') {
      ancestorInfo.aTagInScope = info;
    }
    if (tag === 'button') {
      ancestorInfo.buttonTagInScope = info;
    }
    if (tag === 'nobr') {
      ancestorInfo.nobrTagInScope = info;
    }
    if (tag === 'p') {
      ancestorInfo.pTagInButtonScope = info;
    }
    if (tag === 'li') {
      ancestorInfo.listItemTagAutoclosing = info;
    }
    if (tag === 'dd' || tag === 'dt') {
      ancestorInfo.dlItemTagAutoclosing = info;
    }

    return ancestorInfo;
  };

  /**
   * Returns whether
   */
  var isTagValidWithParent = function (tag, parentTag) {
    // First, let's check if we're in an unusual parsing mode...
    switch (parentTag) {
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
      case 'select':
        return tag === 'option' || tag === 'optgroup' || tag === '#text';
      case 'optgroup':
        return tag === 'option' || tag === '#text';
      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
      // but
      case 'option':
        return tag === '#text';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
      // No special behavior since these rules fall back to "in body" mode for
      // all except special table nodes which cause bad parsing behavior anyway.

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
      case 'tr':
        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
      case 'tbody':
      case 'thead':
      case 'tfoot':
        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
      case 'colgroup':
        return tag === 'col' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
      case 'table':
        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
      case 'head':
        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
      case 'html':
        return tag === 'head' || tag === 'body';
    }

    // Probably in the "in body" parsing mode, so we outlaw only tag combos
    // where the parsing rules cause implicit opens or closes to be added.
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
    switch (tag) {
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

      case 'rp':
      case 'rt':
        return impliedEndTags.indexOf(parentTag) === -1;

      case 'caption':
      case 'col':
      case 'colgroup':
      case 'frame':
      case 'head':
      case 'tbody':
      case 'td':
      case 'tfoot':
      case 'th':
      case 'thead':
      case 'tr':
        // These tags are only valid with a few parents that have special child
        // parsing rules -- if we're down here, then none of those matched and
        // so we allow it only if we don't know what the parent is, as all other
        // cases are invalid.
        return parentTag == null;
    }

    return true;
  };

  /**
   * Returns whether
   */
  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
    switch (tag) {
      case 'address':
      case 'article':
      case 'aside':
      case 'blockquote':
      case 'center':
      case 'details':
      case 'dialog':
      case 'dir':
      case 'div':
      case 'dl':
      case 'fieldset':
      case 'figcaption':
      case 'figure':
      case 'footer':
      case 'header':
      case 'hgroup':
      case 'main':
      case 'menu':
      case 'nav':
      case 'ol':
      case 'p':
      case 'section':
      case 'summary':
      case 'ul':

      case 'pre':
      case 'listing':

      case 'table':

      case 'hr':

      case 'xmp':

      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return ancestorInfo.pTagInButtonScope;

      case 'form':
        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

      case 'li':
        return ancestorInfo.listItemTagAutoclosing;

      case 'dd':
      case 'dt':
        return ancestorInfo.dlItemTagAutoclosing;

      case 'button':
        return ancestorInfo.buttonTagInScope;

      case 'a':
        // Spec says something about storing a list of markers, but it sounds
        // equivalent to this check.
        return ancestorInfo.aTagInScope;

      case 'nobr':
        return ancestorInfo.nobrTagInScope;
    }

    return null;
  };

  /**
   * Given a ReactCompositeComponent instance, return a list of its recursive
   * owners, starting at the root and ending with the instance itself.
   */
  var findOwnerStack = function (instance) {
    if (!instance) {
      return [];
    }

    var stack = [];
    /*eslint-disable space-after-keywords */
    do {
      /*eslint-enable space-after-keywords */
      stack.push(instance);
    } while (instance = instance._currentElement._owner);
    stack.reverse();
    return stack;
  };

  var didWarn = {};

  validateDOMNesting = function (childTag, childInstance, ancestorInfo) {
    ancestorInfo = ancestorInfo || emptyAncestorInfo;
    var parentInfo = ancestorInfo.parentTag;
    var parentTag = parentInfo && parentInfo.tag;

    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
    var problematic = invalidParent || invalidAncestor;

    if (problematic) {
      var ancestorTag = problematic.tag;
      var ancestorInstance = problematic.instance;

      var childOwner = childInstance && childInstance._currentElement._owner;
      var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;

      var childOwners = findOwnerStack(childOwner);
      var ancestorOwners = findOwnerStack(ancestorOwner);

      var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
      var i;

      var deepestCommon = -1;
      for (i = 0; i < minStackLen; i++) {
        if (childOwners[i] === ancestorOwners[i]) {
          deepestCommon = i;
        } else {
          break;
        }
      }

      var UNKNOWN = '(unknown)';
      var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {
        return inst.getName() || UNKNOWN;
      });
      var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {
        return inst.getName() || UNKNOWN;
      });
      var ownerInfo = [].concat(
      // If the parent and child instances have a common owner ancestor, start
      // with that -- otherwise we just start with the parent's owners.
      deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,
      // If we're warning about an invalid (non-parent) ancestry, add '...'
      invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');

      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;
      if (didWarn[warnKey]) {
        return;
      }
      didWarn[warnKey] = true;

      if (invalidParent) {
        var info = '';
        if (ancestorTag === 'table' && childTag === 'tr') {
          info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
        }
        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): <%s> cannot appear as a child of <%s>. ' + 'See %s.%s', childTag, ancestorTag, ownerInfo, info) : undefined;
      } else {
        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): <%s> cannot appear as a descendant of ' + '<%s>. See %s.', childTag, ancestorTag, ownerInfo) : undefined;
      }
    }
  };

  validateDOMNesting.ancestorInfoContextKey = '__validateDOMNesting_ancestorInfo$' + Math.random().toString(36).slice(2);

  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;

  // For testing
  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
    ancestorInfo = ancestorInfo || emptyAncestorInfo;
    var parentInfo = ancestorInfo.parentTag;
    var parentTag = parentInfo && parentInfo.tag;
    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
  };
}

module.exports = validateDOMNesting;
}).call(this,require('_process'))

},{"./Object.assign":29,"_process":6,"fbjs/lib/emptyFunction":142,"fbjs/lib/warning":161}],135:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule EventListener
 * @typechecks
 */

'use strict';

var emptyFunction = require('./emptyFunction');

/**
 * Upstream version of event listener. Does not take into account specific
 * nature of platform.
 */
var EventListener = {
  /**
   * Listen to DOM events during the bubble phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  listen: function (target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, false);
      return {
        remove: function () {
          target.removeEventListener(eventType, callback, false);
        }
      };
    } else if (target.attachEvent) {
      target.attachEvent('on' + eventType, callback);
      return {
        remove: function () {
          target.detachEvent('on' + eventType, callback);
        }
      };
    }
  },

  /**
   * Listen to DOM events during the capture phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  capture: function (target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, true);
      return {
        remove: function () {
          target.removeEventListener(eventType, callback, true);
        }
      };
    } else {
      if (process.env.NODE_ENV !== 'production') {
        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
      }
      return {
        remove: emptyFunction
      };
    }
  },

  registerDefault: function () {}
};

module.exports = EventListener;
}).call(this,require('_process'))

},{"./emptyFunction":142,"_process":6}],136:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ExecutionEnvironment
 */

'use strict';

var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

/**
 * Simple, lightweight module assisting with the detection and context of
 * Worker. Helps avoid circular dependencies and allows code to reason about
 * whether or not they are in a Worker, even if they never include the main
 * `ReactWorker` dependency.
 */
var ExecutionEnvironment = {

  canUseDOM: canUseDOM,

  canUseWorkers: typeof Worker !== 'undefined',

  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

  canUseViewport: canUseDOM && !!window.screen,

  isInWorker: !canUseDOM // For now, this is true - might change in the future.

};

module.exports = ExecutionEnvironment;
},{}],137:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule camelize
 * @typechecks
 */

"use strict";

var _hyphenPattern = /-(.)/g;

/**
 * Camelcases a hyphenated string, for example:
 *
 *   > camelize('background-color')
 *   < "backgroundColor"
 *
 * @param {string} string
 * @return {string}
 */
function camelize(string) {
  return string.replace(_hyphenPattern, function (_, character) {
    return character.toUpperCase();
  });
}

module.exports = camelize;
},{}],138:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule camelizeStyleName
 * @typechecks
 */

'use strict';

var camelize = require('./camelize');

var msPattern = /^-ms-/;

/**
 * Camelcases a hyphenated CSS property name, for example:
 *
 *   > camelizeStyleName('background-color')
 *   < "backgroundColor"
 *   > camelizeStyleName('-moz-transition')
 *   < "MozTransition"
 *   > camelizeStyleName('-ms-transition')
 *   < "msTransition"
 *
 * As Andi Smith suggests
 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
 * is converted to lowercase `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function camelizeStyleName(string) {
  return camelize(string.replace(msPattern, 'ms-'));
}

module.exports = camelizeStyleName;
},{"./camelize":137}],139:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule containsNode
 * @typechecks
 */

'use strict';

var isTextNode = require('./isTextNode');

/*eslint-disable no-bitwise */

/**
 * Checks if a given DOM node contains or is another DOM node.
 *
 * @param {?DOMNode} outerNode Outer DOM node.
 * @param {?DOMNode} innerNode Inner DOM node.
 * @return {boolean} True if `outerNode` contains or is `innerNode`.
 */
function containsNode(_x, _x2) {
  var _again = true;

  _function: while (_again) {
    var outerNode = _x,
        innerNode = _x2;
    _again = false;

    if (!outerNode || !innerNode) {
      return false;
    } else if (outerNode === innerNode) {
      return true;
    } else if (isTextNode(outerNode)) {
      return false;
    } else if (isTextNode(innerNode)) {
      _x = outerNode;
      _x2 = innerNode.parentNode;
      _again = true;
      continue _function;
    } else if (outerNode.contains) {
      return outerNode.contains(innerNode);
    } else if (outerNode.compareDocumentPosition) {
      return !!(outerNode.compareDocumentPosition(innerNode) & 16);
    } else {
      return false;
    }
  }
}

module.exports = containsNode;
},{"./isTextNode":152}],140:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createArrayFromMixed
 * @typechecks
 */

'use strict';

var toArray = require('./toArray');

/**
 * Perform a heuristic test to determine if an object is "array-like".
 *
 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
 *   Joshu replied: "Mu."
 *
 * This function determines if its argument has "array nature": it returns
 * true if the argument is an actual array, an `arguments' object, or an
 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
 *
 * It will return false for other array-like objects like Filelist.
 *
 * @param {*} obj
 * @return {boolean}
 */
function hasArrayNature(obj) {
  return(
    // not null/false
    !!obj && (
    // arrays are objects, NodeLists are functions in Safari
    typeof obj == 'object' || typeof obj == 'function') &&
    // quacks like an array
    'length' in obj &&
    // not window
    !('setInterval' in obj) &&
    // no DOM node should be considered an array-like
    // a 'select' element has 'length' and 'item' properties on IE8
    typeof obj.nodeType != 'number' && (
    // a real array
    Array.isArray(obj) ||
    // arguments
    'callee' in obj ||
    // HTMLCollection/NodeList
    'item' in obj)
  );
}

/**
 * Ensure that the argument is an array by wrapping it in an array if it is not.
 * Creates a copy of the argument if it is already an array.
 *
 * This is mostly useful idiomatically:
 *
 *   var createArrayFromMixed = require('createArrayFromMixed');
 *
 *   function takesOneOrMoreThings(things) {
 *     things = createArrayFromMixed(things);
 *     ...
 *   }
 *
 * This allows you to treat `things' as an array, but accept scalars in the API.
 *
 * If you need to convert an array-like object, like `arguments`, into an array
 * use toArray instead.
 *
 * @param {*} obj
 * @return {array}
 */
function createArrayFromMixed(obj) {
  if (!hasArrayNature(obj)) {
    return [obj];
  } else if (Array.isArray(obj)) {
    return obj.slice();
  } else {
    return toArray(obj);
  }
}

module.exports = createArrayFromMixed;
},{"./toArray":160}],141:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createNodesFromMarkup
 * @typechecks
 */

/*eslint-disable fb-www/unsafe-html*/

'use strict';

var ExecutionEnvironment = require('./ExecutionEnvironment');

var createArrayFromMixed = require('./createArrayFromMixed');
var getMarkupWrap = require('./getMarkupWrap');
var invariant = require('./invariant');

/**
 * Dummy container used to render all markup.
 */
var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Pattern used by `getNodeName`.
 */
var nodeNamePattern = /^\s*<(\w+)/;

/**
 * Extracts the `nodeName` of the first element in a string of markup.
 *
 * @param {string} markup String of markup.
 * @return {?string} Node name of the supplied markup.
 */
function getNodeName(markup) {
  var nodeNameMatch = markup.match(nodeNamePattern);
  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
}

/**
 * Creates an array containing the nodes rendered from the supplied markup. The
 * optionally supplied `handleScript` function will be invoked once for each
 * <script> element that is rendered. If no `handleScript` function is supplied,
 * an exception is thrown if any <script> elements are rendered.
 *
 * @param {string} markup A string of valid HTML markup.
 * @param {?function} handleScript Invoked once for each rendered <script>.
 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
 */
function createNodesFromMarkup(markup, handleScript) {
  var node = dummyNode;
  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : undefined;
  var nodeName = getNodeName(markup);

  var wrap = nodeName && getMarkupWrap(nodeName);
  if (wrap) {
    node.innerHTML = wrap[1] + markup + wrap[2];

    var wrapDepth = wrap[0];
    while (wrapDepth--) {
      node = node.lastChild;
    }
  } else {
    node.innerHTML = markup;
  }

  var scripts = node.getElementsByTagName('script');
  if (scripts.length) {
    !handleScript ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : undefined;
    createArrayFromMixed(scripts).forEach(handleScript);
  }

  var nodes = createArrayFromMixed(node.childNodes);
  while (node.lastChild) {
    node.removeChild(node.lastChild);
  }
  return nodes;
}

module.exports = createNodesFromMarkup;
}).call(this,require('_process'))

},{"./ExecutionEnvironment":136,"./createArrayFromMixed":140,"./getMarkupWrap":146,"./invariant":150,"_process":6}],142:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule emptyFunction
 */

"use strict";

function makeEmptyFunction(arg) {
  return function () {
    return arg;
  };
}

/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */
function emptyFunction() {}

emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);
emptyFunction.thatReturnsThis = function () {
  return this;
};
emptyFunction.thatReturnsArgument = function (arg) {
  return arg;
};

module.exports = emptyFunction;
},{}],143:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule emptyObject
 */

'use strict';

var emptyObject = {};

if (process.env.NODE_ENV !== 'production') {
  Object.freeze(emptyObject);
}

module.exports = emptyObject;
}).call(this,require('_process'))

},{"_process":6}],144:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule focusNode
 */

'use strict';

/**
 * @param {DOMElement} node input/textarea to focus
 */
function focusNode(node) {
  // IE8 can throw "Can't move focus to the control because it is invisible,
  // not enabled, or of a type that does not accept the focus." for all kinds of
  // reasons that are too expensive and fragile to test.
  try {
    node.focus();
  } catch (e) {}
}

module.exports = focusNode;
},{}],145:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getActiveElement
 * @typechecks
 */

/**
 * Same as document.activeElement but wraps in a try-catch block. In IE it is
 * not safe to call document.activeElement if there is nothing focused.
 *
 * The activeElement will be null only if the document or document body is not yet defined.
 */
'use strict';

function getActiveElement() /*?DOMElement*/{
  if (typeof document === 'undefined') {
    return null;
  }

  try {
    return document.activeElement || document.body;
  } catch (e) {
    return document.body;
  }
}

module.exports = getActiveElement;
},{}],146:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getMarkupWrap
 */

/*eslint-disable fb-www/unsafe-html */

'use strict';

var ExecutionEnvironment = require('./ExecutionEnvironment');

var invariant = require('./invariant');

/**
 * Dummy container used to detect which wraps are necessary.
 */
var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Some browsers cannot use `innerHTML` to render certain elements standalone,
 * so we wrap them, render the wrapped nodes, then extract the desired node.
 *
 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
 */

var shouldWrap = {};

var selectWrap = [1, '<select multiple="true">', '</select>'];
var tableWrap = [1, '<table>', '</table>'];
var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

var svgWrap = [1, '<svg xmlns="http://www.w3.org/2000/svg">', '</svg>'];

var markupWrap = {
  '*': [1, '?<div>', '</div>'],

  'area': [1, '<map>', '</map>'],
  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
  'legend': [1, '<fieldset>', '</fieldset>'],
  'param': [1, '<object>', '</object>'],
  'tr': [2, '<table><tbody>', '</tbody></table>'],

  'optgroup': selectWrap,
  'option': selectWrap,

  'caption': tableWrap,
  'colgroup': tableWrap,
  'tbody': tableWrap,
  'tfoot': tableWrap,
  'thead': tableWrap,

  'td': trWrap,
  'th': trWrap
};

// Initialize the SVG elements since we know they'll always need to be wrapped
// consistently. If they are created inside a <div> they will be initialized in
// the wrong namespace (and will not display).
var svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];
svgElements.forEach(function (nodeName) {
  markupWrap[nodeName] = svgWrap;
  shouldWrap[nodeName] = true;
});

/**
 * Gets the markup wrap configuration for the supplied `nodeName`.
 *
 * NOTE: This lazily detects which wraps are necessary for the current browser.
 *
 * @param {string} nodeName Lowercase `nodeName`.
 * @return {?array} Markup wrap configuration, if applicable.
 */
function getMarkupWrap(nodeName) {
  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : undefined;
  if (!markupWrap.hasOwnProperty(nodeName)) {
    nodeName = '*';
  }
  if (!shouldWrap.hasOwnProperty(nodeName)) {
    if (nodeName === '*') {
      dummyNode.innerHTML = '<link />';
    } else {
      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
    }
    shouldWrap[nodeName] = !dummyNode.firstChild;
  }
  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
}

module.exports = getMarkupWrap;
}).call(this,require('_process'))

},{"./ExecutionEnvironment":136,"./invariant":150,"_process":6}],147:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getUnboundedScrollPosition
 * @typechecks
 */

'use strict';

/**
 * Gets the scroll position of the supplied element or window.
 *
 * The return values are unbounded, unlike `getScrollPosition`. This means they
 * may be negative or exceed the element boundaries (which is possible using
 * inertial scrolling).
 *
 * @param {DOMWindow|DOMElement} scrollable
 * @return {object} Map with `x` and `y` keys.
 */
function getUnboundedScrollPosition(scrollable) {
  if (scrollable === window) {
    return {
      x: window.pageXOffset || document.documentElement.scrollLeft,
      y: window.pageYOffset || document.documentElement.scrollTop
    };
  }
  return {
    x: scrollable.scrollLeft,
    y: scrollable.scrollTop
  };
}

module.exports = getUnboundedScrollPosition;
},{}],148:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule hyphenate
 * @typechecks
 */

'use strict';

var _uppercasePattern = /([A-Z])/g;

/**
 * Hyphenates a camelcased string, for example:
 *
 *   > hyphenate('backgroundColor')
 *   < "background-color"
 *
 * For CSS style names, use `hyphenateStyleName` instead which works properly
 * with all vendor prefixes, including `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenate(string) {
  return string.replace(_uppercasePattern, '-$1').toLowerCase();
}

module.exports = hyphenate;
},{}],149:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule hyphenateStyleName
 * @typechecks
 */

'use strict';

var hyphenate = require('./hyphenate');

var msPattern = /^ms-/;

/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenateStyleName(string) {
  return hyphenate(string).replace(msPattern, '-ms-');
}

module.exports = hyphenateStyleName;
},{"./hyphenate":148}],150:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule invariant
 */

'use strict';

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var invariant = function (condition, format, a, b, c, d, e, f) {
  if (process.env.NODE_ENV !== 'production') {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  }

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error('Invariant Violation: ' + format.replace(/%s/g, function () {
        return args[argIndex++];
      }));
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
};

module.exports = invariant;
}).call(this,require('_process'))

},{"_process":6}],151:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isNode
 * @typechecks
 */

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM node.
 */
'use strict';

function isNode(object) {
  return !!(object && (typeof Node === 'function' ? object instanceof Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
}

module.exports = isNode;
},{}],152:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isTextNode
 * @typechecks
 */

'use strict';

var isNode = require('./isNode');

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM text node.
 */
function isTextNode(object) {
  return isNode(object) && object.nodeType == 3;
}

module.exports = isTextNode;
},{"./isNode":151}],153:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule keyMirror
 * @typechecks static-only
 */

'use strict';

var invariant = require('./invariant');

/**
 * Constructs an enumeration with keys equal to their value.
 *
 * For example:
 *
 *   var COLORS = keyMirror({blue: null, red: null});
 *   var myColor = COLORS.blue;
 *   var isColorValid = !!COLORS[myColor];
 *
 * The last line could not be performed if the values of the generated enum were
 * not equal to their keys.
 *
 *   Input:  {key1: val1, key2: val2}
 *   Output: {key1: key1, key2: key2}
 *
 * @param {object} obj
 * @return {object}
 */
var keyMirror = function (obj) {
  var ret = {};
  var key;
  !(obj instanceof Object && !Array.isArray(obj)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'keyMirror(...): Argument must be an object.') : invariant(false) : undefined;
  for (key in obj) {
    if (!obj.hasOwnProperty(key)) {
      continue;
    }
    ret[key] = key;
  }
  return ret;
};

module.exports = keyMirror;
}).call(this,require('_process'))

},{"./invariant":150,"_process":6}],154:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule keyOf
 */

/**
 * Allows extraction of a minified key. Let's the build system minify keys
 * without losing the ability to dynamically use key strings as values
 * themselves. Pass in an object with a single key/val pair and it will return
 * you the string key of that single record. Suppose you want to grab the
 * value for a key 'className' inside of an object. Key/val minification may
 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
 * reuse those resolutions.
 */
"use strict";

var keyOf = function (oneKeyObj) {
  var key;
  for (key in oneKeyObj) {
    if (!oneKeyObj.hasOwnProperty(key)) {
      continue;
    }
    return key;
  }
  return null;
};

module.exports = keyOf;
},{}],155:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule mapObject
 */

'use strict';

var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
 * Executes the provided `callback` once for each enumerable own property in the
 * object and constructs a new object from the results. The `callback` is
 * invoked with three arguments:
 *
 *  - the property value
 *  - the property name
 *  - the object being traversed
 *
 * Properties that are added after the call to `mapObject` will not be visited
 * by `callback`. If the values of existing properties are changed, the value
 * passed to `callback` will be the value at the time `mapObject` visits them.
 * Properties that are deleted before being visited are not visited.
 *
 * @grep function objectMap()
 * @grep function objMap()
 *
 * @param {?object} object
 * @param {function} callback
 * @param {*} context
 * @return {?object}
 */
function mapObject(object, callback, context) {
  if (!object) {
    return null;
  }
  var result = {};
  for (var name in object) {
    if (hasOwnProperty.call(object, name)) {
      result[name] = callback.call(context, object[name], name, object);
    }
  }
  return result;
}

module.exports = mapObject;
},{}],156:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule memoizeStringOnly
 * @typechecks static-only
 */

'use strict';

/**
 * Memoizes the return value of a function that accepts one string argument.
 *
 * @param {function} callback
 * @return {function}
 */
function memoizeStringOnly(callback) {
  var cache = {};
  return function (string) {
    if (!cache.hasOwnProperty(string)) {
      cache[string] = callback.call(this, string);
    }
    return cache[string];
  };
}

module.exports = memoizeStringOnly;
},{}],157:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule performance
 * @typechecks
 */

'use strict';

var ExecutionEnvironment = require('./ExecutionEnvironment');

var performance;

if (ExecutionEnvironment.canUseDOM) {
  performance = window.performance || window.msPerformance || window.webkitPerformance;
}

module.exports = performance || {};
},{"./ExecutionEnvironment":136}],158:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule performanceNow
 * @typechecks
 */

'use strict';

var performance = require('./performance');
var curPerformance = performance;

/**
 * Detect if we can use `window.performance.now()` and gracefully fallback to
 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
 * because of Facebook's testing infrastructure.
 */
if (!curPerformance || !curPerformance.now) {
  curPerformance = Date;
}

var performanceNow = curPerformance.now.bind(curPerformance);

module.exports = performanceNow;
},{"./performance":157}],159:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule shallowEqual
 * @typechecks
 * 
 */

'use strict';

var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */
function shallowEqual(objA, objB) {
  if (objA === objB) {
    return true;
  }

  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) {
    return false;
  }

  // Test for A's keys different from B.
  var bHasOwnProperty = hasOwnProperty.bind(objB);
  for (var i = 0; i < keysA.length; i++) {
    if (!bHasOwnProperty(keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {
      return false;
    }
  }

  return true;
}

module.exports = shallowEqual;
},{}],160:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule toArray
 * @typechecks
 */

'use strict';

var invariant = require('./invariant');

/**
 * Convert array-like objects to arrays.
 *
 * This API assumes the caller knows the contents of the data type. For less
 * well defined inputs use createArrayFromMixed.
 *
 * @param {object|function|filelist} obj
 * @return {array}
 */
function toArray(obj) {
  var length = obj.length;

  // Some browse builtin objects can report typeof 'function' (e.g. NodeList in
  // old versions of Safari).
  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : undefined;

  !(typeof length === 'number') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : undefined;

  !(length === 0 || length - 1 in obj) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : undefined;

  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
  // without method will throw during the slice call and skip straight to the
  // fallback.
  if (obj.hasOwnProperty) {
    try {
      return Array.prototype.slice.call(obj);
    } catch (e) {
      // IE < 9 does not support Array#slice on collections objects
    }
  }

  // Fall back to copying key by key. This assumes all keys have a value,
  // so will not preserve sparsely populated inputs.
  var ret = Array(length);
  for (var ii = 0; ii < length; ii++) {
    ret[ii] = obj[ii];
  }
  return ret;
}

module.exports = toArray;
}).call(this,require('_process'))

},{"./invariant":150,"_process":6}],161:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule warning
 */

'use strict';

var emptyFunction = require('./emptyFunction');

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = emptyFunction;

if (process.env.NODE_ENV !== 'production') {
  warning = function (condition, format) {
    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }

    if (format === undefined) {
      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
    }

    if (format.indexOf('Failed Composite propType: ') === 0) {
      return; // Ignore CompositeComponent proptype check.
    }

    if (!condition) {
      var argIndex = 0;
      var message = 'Warning: ' + format.replace(/%s/g, function () {
        return args[argIndex++];
      });
      if (typeof console !== 'undefined') {
        console.error(message);
      }
      try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
      } catch (x) {}
    }
  };
}

module.exports = warning;
}).call(this,require('_process'))

},{"./emptyFunction":142,"_process":6}],162:[function(require,module,exports){
'use strict';

module.exports = require('./lib/React');

},{"./lib/React":31}]},{},[5])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
